// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TensorMap struct {
	_tab flatbuffers.Table
}

func GetRootAsTensorMap(buf []byte, offset flatbuffers.UOffsetT) *TensorMap {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TensorMap{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTensorMap(buf []byte, offset flatbuffers.UOffsetT) *TensorMap {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TensorMap{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TensorMap) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TensorMap) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TensorMap) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TensorMap) TensorIndex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TensorMap) MutateTensorIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func TensorMapStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TensorMapAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func TensorMapAddTensorIndex(builder *flatbuffers.Builder, tensorIndex uint32) {
	builder.PrependUint32Slot(1, tensorIndex, 0)
}
func TensorMapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
