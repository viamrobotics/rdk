// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BatchMatMulOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBatchMatMulOptions(buf []byte, offset flatbuffers.UOffsetT) *BatchMatMulOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatchMatMulOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBatchMatMulOptions(buf []byte, offset flatbuffers.UOffsetT) *BatchMatMulOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BatchMatMulOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BatchMatMulOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatchMatMulOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BatchMatMulOptions) AdjX() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BatchMatMulOptions) MutateAdjX(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *BatchMatMulOptions) AdjY() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BatchMatMulOptions) MutateAdjY(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *BatchMatMulOptions) AsymmetricQuantizeInputs() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BatchMatMulOptions) MutateAsymmetricQuantizeInputs(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func BatchMatMulOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BatchMatMulOptionsAddAdjX(builder *flatbuffers.Builder, adjX bool) {
	builder.PrependBoolSlot(0, adjX, false)
}
func BatchMatMulOptionsAddAdjY(builder *flatbuffers.Builder, adjY bool) {
	builder.PrependBoolSlot(1, adjY, false)
}
func BatchMatMulOptionsAddAsymmetricQuantizeInputs(builder *flatbuffers.Builder, asymmetricQuantizeInputs bool) {
	builder.PrependBoolSlot(2, asymmetricQuantizeInputs, false)
}
func BatchMatMulOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
