// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HashtableOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsHashtableOptions(buf []byte, offset flatbuffers.UOffsetT) *HashtableOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HashtableOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHashtableOptions(buf []byte, offset flatbuffers.UOffsetT) *HashtableOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HashtableOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HashtableOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HashtableOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HashtableOptions) TableId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *HashtableOptions) MutateTableId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *HashtableOptions) KeyDtype() TensorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return TensorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HashtableOptions) MutateKeyDtype(n TensorType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *HashtableOptions) ValueDtype() TensorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TensorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HashtableOptions) MutateValueDtype(n TensorType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func HashtableOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HashtableOptionsAddTableId(builder *flatbuffers.Builder, tableId int32) {
	builder.PrependInt32Slot(0, tableId, 0)
}
func HashtableOptionsAddKeyDtype(builder *flatbuffers.Builder, keyDtype TensorType) {
	builder.PrependInt8Slot(1, int8(keyDtype), 0)
}
func HashtableOptionsAddValueDtype(builder *flatbuffers.Builder, valueDtype TensorType) {
	builder.PrependInt8Slot(2, int8(valueDtype), 0)
}
func HashtableOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
