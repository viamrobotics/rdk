// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DimensionMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsDimensionMetadata(buf []byte, offset flatbuffers.UOffsetT) *DimensionMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DimensionMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDimensionMetadata(buf []byte, offset flatbuffers.UOffsetT) *DimensionMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DimensionMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DimensionMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DimensionMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DimensionMetadata) Format() DimensionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DimensionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DimensionMetadata) MutateFormat(n DimensionType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *DimensionMetadata) DenseSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DimensionMetadata) MutateDenseSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *DimensionMetadata) ArraySegmentsType() SparseIndexVector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SparseIndexVector(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DimensionMetadata) MutateArraySegmentsType(n SparseIndexVector) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *DimensionMetadata) ArraySegments(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *DimensionMetadata) ArrayIndicesType() SparseIndexVector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return SparseIndexVector(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DimensionMetadata) MutateArrayIndicesType(n SparseIndexVector) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *DimensionMetadata) ArrayIndices(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func DimensionMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DimensionMetadataAddFormat(builder *flatbuffers.Builder, format DimensionType) {
	builder.PrependInt8Slot(0, int8(format), 0)
}
func DimensionMetadataAddDenseSize(builder *flatbuffers.Builder, denseSize int32) {
	builder.PrependInt32Slot(1, denseSize, 0)
}
func DimensionMetadataAddArraySegmentsType(builder *flatbuffers.Builder, arraySegmentsType SparseIndexVector) {
	builder.PrependByteSlot(2, byte(arraySegmentsType), 0)
}
func DimensionMetadataAddArraySegments(builder *flatbuffers.Builder, arraySegments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(arraySegments), 0)
}
func DimensionMetadataAddArrayIndicesType(builder *flatbuffers.Builder, arrayIndicesType SparseIndexVector) {
	builder.PrependByteSlot(4, byte(arrayIndicesType), 0)
}
func DimensionMetadataAddArrayIndices(builder *flatbuffers.Builder, arrayIndices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(arrayIndices), 0)
}
func DimensionMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
