// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Conv2DOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsConv2DOptions(buf []byte, offset flatbuffers.UOffsetT) *Conv2DOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Conv2DOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConv2DOptions(buf []byte, offset flatbuffers.UOffsetT) *Conv2DOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Conv2DOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Conv2DOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Conv2DOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Conv2DOptions) Padding() Padding {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Padding(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Conv2DOptions) MutatePadding(n Padding) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Conv2DOptions) StrideW() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Conv2DOptions) MutateStrideW(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Conv2DOptions) StrideH() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Conv2DOptions) MutateStrideH(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Conv2DOptions) FusedActivationFunction() ActivationFunctionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ActivationFunctionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Conv2DOptions) MutateFusedActivationFunction(n ActivationFunctionType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *Conv2DOptions) DilationWFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Conv2DOptions) MutateDilationWFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Conv2DOptions) DilationHFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Conv2DOptions) MutateDilationHFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func Conv2DOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func Conv2DOptionsAddPadding(builder *flatbuffers.Builder, padding Padding) {
	builder.PrependInt8Slot(0, int8(padding), 0)
}
func Conv2DOptionsAddStrideW(builder *flatbuffers.Builder, strideW int32) {
	builder.PrependInt32Slot(1, strideW, 0)
}
func Conv2DOptionsAddStrideH(builder *flatbuffers.Builder, strideH int32) {
	builder.PrependInt32Slot(2, strideH, 0)
}
func Conv2DOptionsAddFusedActivationFunction(builder *flatbuffers.Builder, fusedActivationFunction ActivationFunctionType) {
	builder.PrependInt8Slot(3, int8(fusedActivationFunction), 0)
}
func Conv2DOptionsAddDilationWFactor(builder *flatbuffers.Builder, dilationWFactor int32) {
	builder.PrependInt32Slot(4, dilationWFactor, 1)
}
func Conv2DOptionsAddDilationHFactor(builder *flatbuffers.Builder, dilationHFactor int32) {
	builder.PrependInt32Slot(5, dilationHFactor, 1)
}
func Conv2DOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
