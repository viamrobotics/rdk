// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FakeQuantOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsFakeQuantOptions(buf []byte, offset flatbuffers.UOffsetT) *FakeQuantOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FakeQuantOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFakeQuantOptions(buf []byte, offset flatbuffers.UOffsetT) *FakeQuantOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FakeQuantOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FakeQuantOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FakeQuantOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FakeQuantOptions) Min() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FakeQuantOptions) MutateMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *FakeQuantOptions) Max() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FakeQuantOptions) MutateMax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *FakeQuantOptions) NumBits() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FakeQuantOptions) MutateNumBits(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *FakeQuantOptions) NarrowRange() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FakeQuantOptions) MutateNarrowRange(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func FakeQuantOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FakeQuantOptionsAddMin(builder *flatbuffers.Builder, min float32) {
	builder.PrependFloat32Slot(0, min, 0.0)
}
func FakeQuantOptionsAddMax(builder *flatbuffers.Builder, max float32) {
	builder.PrependFloat32Slot(1, max, 0.0)
}
func FakeQuantOptionsAddNumBits(builder *flatbuffers.Builder, numBits int32) {
	builder.PrependInt32Slot(2, numBits, 0)
}
func FakeQuantOptionsAddNarrowRange(builder *flatbuffers.Builder, narrowRange bool) {
	builder.PrependBoolSlot(3, narrowRange, false)
}
func FakeQuantOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
