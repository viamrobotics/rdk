// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UnpackOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsUnpackOptions(buf []byte, offset flatbuffers.UOffsetT) *UnpackOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnpackOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnpackOptions(buf []byte, offset flatbuffers.UOffsetT) *UnpackOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnpackOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnpackOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnpackOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UnpackOptions) Num() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnpackOptions) MutateNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *UnpackOptions) Axis() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnpackOptions) MutateAxis(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func UnpackOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UnpackOptionsAddNum(builder *flatbuffers.Builder, num int32) {
	builder.PrependInt32Slot(0, num, 0)
}
func UnpackOptionsAddAxis(builder *flatbuffers.Builder, axis int32) {
	builder.PrependInt32Slot(1, axis, 0)
}
func UnpackOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
