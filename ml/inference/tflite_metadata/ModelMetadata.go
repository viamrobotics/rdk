// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ModelMetadataT struct {
	Name             string
	Description      string
	Version          string
	SubgraphMetadata []*SubGraphMetadataT
	Author           string
	License          string
	AssociatedFiles  []*AssociatedFileT
	MinParserVersion string
}

func (t *ModelMetadataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := builder.CreateString(t.Name)
	descriptionOffset := builder.CreateString(t.Description)
	versionOffset := builder.CreateString(t.Version)
	subgraphMetadataOffset := flatbuffers.UOffsetT(0)
	if t.SubgraphMetadata != nil {
		subgraphMetadataLength := len(t.SubgraphMetadata)
		subgraphMetadataOffsets := make([]flatbuffers.UOffsetT, subgraphMetadataLength)
		for j := 0; j < subgraphMetadataLength; j++ {
			subgraphMetadataOffsets[j] = t.SubgraphMetadata[j].Pack(builder)
		}
		ModelMetadataStartSubgraphMetadataVector(builder, subgraphMetadataLength)
		for j := subgraphMetadataLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(subgraphMetadataOffsets[j])
		}
		subgraphMetadataOffset = builder.EndVector(subgraphMetadataLength)
	}
	authorOffset := builder.CreateString(t.Author)
	licenseOffset := builder.CreateString(t.License)
	associatedFilesOffset := flatbuffers.UOffsetT(0)
	if t.AssociatedFiles != nil {
		associatedFilesLength := len(t.AssociatedFiles)
		associatedFilesOffsets := make([]flatbuffers.UOffsetT, associatedFilesLength)
		for j := 0; j < associatedFilesLength; j++ {
			associatedFilesOffsets[j] = t.AssociatedFiles[j].Pack(builder)
		}
		ModelMetadataStartAssociatedFilesVector(builder, associatedFilesLength)
		for j := associatedFilesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(associatedFilesOffsets[j])
		}
		associatedFilesOffset = builder.EndVector(associatedFilesLength)
	}
	minParserVersionOffset := builder.CreateString(t.MinParserVersion)
	ModelMetadataStart(builder)
	ModelMetadataAddName(builder, nameOffset)
	ModelMetadataAddDescription(builder, descriptionOffset)
	ModelMetadataAddVersion(builder, versionOffset)
	ModelMetadataAddSubgraphMetadata(builder, subgraphMetadataOffset)
	ModelMetadataAddAuthor(builder, authorOffset)
	ModelMetadataAddLicense(builder, licenseOffset)
	ModelMetadataAddAssociatedFiles(builder, associatedFilesOffset)
	ModelMetadataAddMinParserVersion(builder, minParserVersionOffset)
	return ModelMetadataEnd(builder)
}

func (rcv *ModelMetadata) UnPackTo(t *ModelMetadataT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Version = string(rcv.Version())
	subgraphMetadataLength := rcv.SubgraphMetadataLength()
	t.SubgraphMetadata = make([]*SubGraphMetadataT, subgraphMetadataLength)
	for j := 0; j < subgraphMetadataLength; j++ {
		x := SubGraphMetadata{}
		rcv.SubgraphMetadata(&x, j)
		t.SubgraphMetadata[j] = x.UnPack()
	}
	t.Author = string(rcv.Author())
	t.License = string(rcv.License())
	associatedFilesLength := rcv.AssociatedFilesLength()
	t.AssociatedFiles = make([]*AssociatedFileT, associatedFilesLength)
	for j := 0; j < associatedFilesLength; j++ {
		x := AssociatedFile{}
		rcv.AssociatedFiles(&x, j)
		t.AssociatedFiles[j] = x.UnPack()
	}
	t.MinParserVersion = string(rcv.MinParserVersion())
}

func (rcv *ModelMetadata) UnPack() *ModelMetadataT {
	if rcv == nil {
		return nil
	}
	t := &ModelMetadataT{}
	rcv.UnPackTo(t)
	return t
}

type ModelMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsModelMetadata(buf []byte, offset flatbuffers.UOffsetT) *ModelMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModelMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsModelMetadata(buf []byte, offset flatbuffers.UOffsetT) *ModelMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ModelMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ModelMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModelMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ModelMetadata) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModelMetadata) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModelMetadata) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModelMetadata) SubgraphMetadata(obj *SubGraphMetadata, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ModelMetadata) SubgraphMetadataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ModelMetadata) Author() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModelMetadata) License() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ModelMetadata) AssociatedFiles(obj *AssociatedFile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ModelMetadata) AssociatedFilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ModelMetadata) MinParserVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ModelMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ModelMetadataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ModelMetadataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func ModelMetadataAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(version), 0)
}
func ModelMetadataAddSubgraphMetadata(builder *flatbuffers.Builder, subgraphMetadata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(subgraphMetadata), 0)
}
func ModelMetadataStartSubgraphMetadataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ModelMetadataAddAuthor(builder *flatbuffers.Builder, author flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(author), 0)
}
func ModelMetadataAddLicense(builder *flatbuffers.Builder, license flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(license), 0)
}
func ModelMetadataAddAssociatedFiles(builder *flatbuffers.Builder, associatedFiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(associatedFiles), 0)
}
func ModelMetadataStartAssociatedFilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ModelMetadataAddMinParserVersion(builder *flatbuffers.Builder, minParserVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(minParserVersion), 0)
}
func ModelMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
