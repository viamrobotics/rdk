// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoundingBoxPropertiesT struct {
	Index          []uint32
	Type           BoundingBoxType
	CoordinateType CoordinateType
}

func (t *BoundingBoxPropertiesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	indexOffset := flatbuffers.UOffsetT(0)
	if t.Index != nil {
		indexLength := len(t.Index)
		BoundingBoxPropertiesStartIndexVector(builder, indexLength)
		for j := indexLength - 1; j >= 0; j-- {
			builder.PrependUint32(t.Index[j])
		}
		indexOffset = builder.EndVector(indexLength)
	}
	BoundingBoxPropertiesStart(builder)
	BoundingBoxPropertiesAddIndex(builder, indexOffset)
	BoundingBoxPropertiesAddType(builder, t.Type)
	BoundingBoxPropertiesAddCoordinateType(builder, t.CoordinateType)
	return BoundingBoxPropertiesEnd(builder)
}

func (rcv *BoundingBoxProperties) UnPackTo(t *BoundingBoxPropertiesT) {
	indexLength := rcv.IndexLength()
	t.Index = make([]uint32, indexLength)
	for j := 0; j < indexLength; j++ {
		t.Index[j] = rcv.Index(j)
	}
	t.Type = rcv.Type()
	t.CoordinateType = rcv.CoordinateType()
}

func (rcv *BoundingBoxProperties) UnPack() *BoundingBoxPropertiesT {
	if rcv == nil {
		return nil
	}
	t := &BoundingBoxPropertiesT{}
	rcv.UnPackTo(t)
	return t
}

type BoundingBoxProperties struct {
	_tab flatbuffers.Table
}

func GetRootAsBoundingBoxProperties(buf []byte, offset flatbuffers.UOffsetT) *BoundingBoxProperties {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BoundingBoxProperties{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBoundingBoxProperties(buf []byte, offset flatbuffers.UOffsetT) *BoundingBoxProperties {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BoundingBoxProperties{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BoundingBoxProperties) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoundingBoxProperties) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BoundingBoxProperties) Index(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *BoundingBoxProperties) IndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BoundingBoxProperties) MutateIndex(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *BoundingBoxProperties) Type() BoundingBoxType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BoundingBoxType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BoundingBoxProperties) MutateType(n BoundingBoxType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *BoundingBoxProperties) CoordinateType() CoordinateType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CoordinateType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BoundingBoxProperties) MutateCoordinateType(n CoordinateType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func BoundingBoxPropertiesStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BoundingBoxPropertiesAddIndex(builder *flatbuffers.Builder, index flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(index), 0)
}
func BoundingBoxPropertiesStartIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BoundingBoxPropertiesAddType(builder *flatbuffers.Builder, type_ BoundingBoxType) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func BoundingBoxPropertiesAddCoordinateType(builder *flatbuffers.Builder, coordinateType CoordinateType) {
	builder.PrependInt8Slot(2, int8(coordinateType), 0)
}
func BoundingBoxPropertiesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
