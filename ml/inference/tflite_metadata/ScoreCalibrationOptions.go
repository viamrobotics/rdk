// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScoreCalibrationOptionsT struct {
	ScoreTransformation ScoreTransformationType
	DefaultScore        float32
}

func (t *ScoreCalibrationOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ScoreCalibrationOptionsStart(builder)
	ScoreCalibrationOptionsAddScoreTransformation(builder, t.ScoreTransformation)
	ScoreCalibrationOptionsAddDefaultScore(builder, t.DefaultScore)
	return ScoreCalibrationOptionsEnd(builder)
}

func (rcv *ScoreCalibrationOptions) UnPackTo(t *ScoreCalibrationOptionsT) {
	t.ScoreTransformation = rcv.ScoreTransformation()
	t.DefaultScore = rcv.DefaultScore()
}

func (rcv *ScoreCalibrationOptions) UnPack() *ScoreCalibrationOptionsT {
	if rcv == nil {
		return nil
	}
	t := &ScoreCalibrationOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type ScoreCalibrationOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsScoreCalibrationOptions(buf []byte, offset flatbuffers.UOffsetT) *ScoreCalibrationOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScoreCalibrationOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScoreCalibrationOptions(buf []byte, offset flatbuffers.UOffsetT) *ScoreCalibrationOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScoreCalibrationOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScoreCalibrationOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScoreCalibrationOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScoreCalibrationOptions) ScoreTransformation() ScoreTransformationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ScoreTransformationType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ScoreCalibrationOptions) MutateScoreTransformation(n ScoreTransformationType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *ScoreCalibrationOptions) DefaultScore() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ScoreCalibrationOptions) MutateDefaultScore(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func ScoreCalibrationOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ScoreCalibrationOptionsAddScoreTransformation(builder *flatbuffers.Builder, scoreTransformation ScoreTransformationType) {
	builder.PrependInt8Slot(0, int8(scoreTransformation), 0)
}
func ScoreCalibrationOptionsAddDefaultScore(builder *flatbuffers.Builder, defaultScore float32) {
	builder.PrependFloat32Slot(1, defaultScore, 0.0)
}
func ScoreCalibrationOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
