// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageSizeT struct {
	Width  uint32
	Height uint32
}

func (t *ImageSizeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ImageSizeStart(builder)
	ImageSizeAddWidth(builder, t.Width)
	ImageSizeAddHeight(builder, t.Height)
	return ImageSizeEnd(builder)
}

func (rcv *ImageSize) UnPackTo(t *ImageSizeT) {
	t.Width = rcv.Width()
	t.Height = rcv.Height()
}

func (rcv *ImageSize) UnPack() *ImageSizeT {
	if rcv == nil {
		return nil
	}
	t := &ImageSizeT{}
	rcv.UnPackTo(t)
	return t
}

type ImageSize struct {
	_tab flatbuffers.Table
}

func GetRootAsImageSize(buf []byte, offset flatbuffers.UOffsetT) *ImageSize {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageSize{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsImageSize(buf []byte, offset flatbuffers.UOffsetT) *ImageSize {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ImageSize{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ImageSize) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageSize) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ImageSize) Width() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageSize) MutateWidth(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ImageSize) Height() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageSize) MutateHeight(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func ImageSizeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ImageSizeAddWidth(builder *flatbuffers.Builder, width uint32) {
	builder.PrependUint32Slot(0, width, 0)
}
func ImageSizeAddHeight(builder *flatbuffers.Builder, height uint32) {
	builder.PrependUint32Slot(1, height, 0)
}
func ImageSizeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
