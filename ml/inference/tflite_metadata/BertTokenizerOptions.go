// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BertTokenizerOptionsT struct {
	VocabFile []*AssociatedFileT
}

func (t *BertTokenizerOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	vocabFileOffset := flatbuffers.UOffsetT(0)
	if t.VocabFile != nil {
		vocabFileLength := len(t.VocabFile)
		vocabFileOffsets := make([]flatbuffers.UOffsetT, vocabFileLength)
		for j := 0; j < vocabFileLength; j++ {
			vocabFileOffsets[j] = t.VocabFile[j].Pack(builder)
		}
		BertTokenizerOptionsStartVocabFileVector(builder, vocabFileLength)
		for j := vocabFileLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(vocabFileOffsets[j])
		}
		vocabFileOffset = builder.EndVector(vocabFileLength)
	}
	BertTokenizerOptionsStart(builder)
	BertTokenizerOptionsAddVocabFile(builder, vocabFileOffset)
	return BertTokenizerOptionsEnd(builder)
}

func (rcv *BertTokenizerOptions) UnPackTo(t *BertTokenizerOptionsT) {
	vocabFileLength := rcv.VocabFileLength()
	t.VocabFile = make([]*AssociatedFileT, vocabFileLength)
	for j := 0; j < vocabFileLength; j++ {
		x := AssociatedFile{}
		rcv.VocabFile(&x, j)
		t.VocabFile[j] = x.UnPack()
	}
}

func (rcv *BertTokenizerOptions) UnPack() *BertTokenizerOptionsT {
	if rcv == nil {
		return nil
	}
	t := &BertTokenizerOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type BertTokenizerOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsBertTokenizerOptions(buf []byte, offset flatbuffers.UOffsetT) *BertTokenizerOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BertTokenizerOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBertTokenizerOptions(buf []byte, offset flatbuffers.UOffsetT) *BertTokenizerOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BertTokenizerOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BertTokenizerOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BertTokenizerOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BertTokenizerOptions) VocabFile(obj *AssociatedFile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BertTokenizerOptions) VocabFileLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func BertTokenizerOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BertTokenizerOptionsAddVocabFile(builder *flatbuffers.Builder, vocabFile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(vocabFile), 0)
}
func BertTokenizerOptionsStartVocabFileVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BertTokenizerOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
