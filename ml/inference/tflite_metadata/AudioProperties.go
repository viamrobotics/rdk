// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AudioPropertiesT struct {
	SampleRate uint32
	Channels   uint32
}

func (t *AudioPropertiesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	AudioPropertiesStart(builder)
	AudioPropertiesAddSampleRate(builder, t.SampleRate)
	AudioPropertiesAddChannels(builder, t.Channels)
	return AudioPropertiesEnd(builder)
}

func (rcv *AudioProperties) UnPackTo(t *AudioPropertiesT) {
	t.SampleRate = rcv.SampleRate()
	t.Channels = rcv.Channels()
}

func (rcv *AudioProperties) UnPack() *AudioPropertiesT {
	if rcv == nil {
		return nil
	}
	t := &AudioPropertiesT{}
	rcv.UnPackTo(t)
	return t
}

type AudioProperties struct {
	_tab flatbuffers.Table
}

func GetRootAsAudioProperties(buf []byte, offset flatbuffers.UOffsetT) *AudioProperties {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AudioProperties{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAudioProperties(buf []byte, offset flatbuffers.UOffsetT) *AudioProperties {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AudioProperties{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AudioProperties) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AudioProperties) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AudioProperties) SampleRate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioProperties) MutateSampleRate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *AudioProperties) Channels() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AudioProperties) MutateChannels(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func AudioPropertiesStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AudioPropertiesAddSampleRate(builder *flatbuffers.Builder, sampleRate uint32) {
	builder.PrependUint32Slot(0, sampleRate, 0)
}
func AudioPropertiesAddChannels(builder *flatbuffers.Builder, channels uint32) {
	builder.PrependUint32Slot(1, channels, 0)
}
func AudioPropertiesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
