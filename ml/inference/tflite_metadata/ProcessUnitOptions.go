// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type ProcessUnitOptions byte

const (
	ProcessUnitOptionsNONE                          ProcessUnitOptions = 0
	ProcessUnitOptionsNormalizationOptions          ProcessUnitOptions = 1
	ProcessUnitOptionsScoreCalibrationOptions       ProcessUnitOptions = 2
	ProcessUnitOptionsScoreThresholdingOptions      ProcessUnitOptions = 3
	ProcessUnitOptionsBertTokenizerOptions          ProcessUnitOptions = 4
	ProcessUnitOptionsSentencePieceTokenizerOptions ProcessUnitOptions = 5
	ProcessUnitOptionsRegexTokenizerOptions         ProcessUnitOptions = 6
)

var EnumNamesProcessUnitOptions = map[ProcessUnitOptions]string{
	ProcessUnitOptionsNONE:                          "NONE",
	ProcessUnitOptionsNormalizationOptions:          "NormalizationOptions",
	ProcessUnitOptionsScoreCalibrationOptions:       "ScoreCalibrationOptions",
	ProcessUnitOptionsScoreThresholdingOptions:      "ScoreThresholdingOptions",
	ProcessUnitOptionsBertTokenizerOptions:          "BertTokenizerOptions",
	ProcessUnitOptionsSentencePieceTokenizerOptions: "SentencePieceTokenizerOptions",
	ProcessUnitOptionsRegexTokenizerOptions:         "RegexTokenizerOptions",
}

var EnumValuesProcessUnitOptions = map[string]ProcessUnitOptions{
	"NONE":                          ProcessUnitOptionsNONE,
	"NormalizationOptions":          ProcessUnitOptionsNormalizationOptions,
	"ScoreCalibrationOptions":       ProcessUnitOptionsScoreCalibrationOptions,
	"ScoreThresholdingOptions":      ProcessUnitOptionsScoreThresholdingOptions,
	"BertTokenizerOptions":          ProcessUnitOptionsBertTokenizerOptions,
	"SentencePieceTokenizerOptions": ProcessUnitOptionsSentencePieceTokenizerOptions,
	"RegexTokenizerOptions":         ProcessUnitOptionsRegexTokenizerOptions,
}

func (v ProcessUnitOptions) String() string {
	if s, ok := EnumNamesProcessUnitOptions[v]; ok {
		return s
	}
	return "ProcessUnitOptions(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ProcessUnitOptionsT struct {
	Type  ProcessUnitOptions
	Value interface{}
}

func (t *ProcessUnitOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ProcessUnitOptionsNormalizationOptions:
		return t.Value.(*NormalizationOptionsT).Pack(builder)
	case ProcessUnitOptionsScoreCalibrationOptions:
		return t.Value.(*ScoreCalibrationOptionsT).Pack(builder)
	case ProcessUnitOptionsScoreThresholdingOptions:
		return t.Value.(*ScoreThresholdingOptionsT).Pack(builder)
	case ProcessUnitOptionsBertTokenizerOptions:
		return t.Value.(*BertTokenizerOptionsT).Pack(builder)
	case ProcessUnitOptionsSentencePieceTokenizerOptions:
		return t.Value.(*SentencePieceTokenizerOptionsT).Pack(builder)
	case ProcessUnitOptionsRegexTokenizerOptions:
		return t.Value.(*RegexTokenizerOptionsT).Pack(builder)
	}
	return 0
}

func (rcv ProcessUnitOptions) UnPack(table flatbuffers.Table) *ProcessUnitOptionsT {
	switch rcv {
	case ProcessUnitOptionsNormalizationOptions:
		x := NormalizationOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsNormalizationOptions, Value: x.UnPack()}
	case ProcessUnitOptionsScoreCalibrationOptions:
		x := ScoreCalibrationOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsScoreCalibrationOptions, Value: x.UnPack()}
	case ProcessUnitOptionsScoreThresholdingOptions:
		x := ScoreThresholdingOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsScoreThresholdingOptions, Value: x.UnPack()}
	case ProcessUnitOptionsBertTokenizerOptions:
		x := BertTokenizerOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsBertTokenizerOptions, Value: x.UnPack()}
	case ProcessUnitOptionsSentencePieceTokenizerOptions:
		x := SentencePieceTokenizerOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsSentencePieceTokenizerOptions, Value: x.UnPack()}
	case ProcessUnitOptionsRegexTokenizerOptions:
		x := RegexTokenizerOptions{_tab: table}
		return &ProcessUnitOptionsT{Type: ProcessUnitOptionsRegexTokenizerOptions, Value: x.UnPack()}
	}
	return nil
}
