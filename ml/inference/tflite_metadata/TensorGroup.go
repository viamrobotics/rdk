// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TensorGroupT struct {
	Name        string
	TensorNames []string
}

func (t *TensorGroupT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := builder.CreateString(t.Name)
	tensorNamesOffset := flatbuffers.UOffsetT(0)
	if t.TensorNames != nil {
		tensorNamesLength := len(t.TensorNames)
		tensorNamesOffsets := make([]flatbuffers.UOffsetT, tensorNamesLength)
		for j := 0; j < tensorNamesLength; j++ {
			tensorNamesOffsets[j] = builder.CreateString(t.TensorNames[j])
		}
		TensorGroupStartTensorNamesVector(builder, tensorNamesLength)
		for j := tensorNamesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tensorNamesOffsets[j])
		}
		tensorNamesOffset = builder.EndVector(tensorNamesLength)
	}
	TensorGroupStart(builder)
	TensorGroupAddName(builder, nameOffset)
	TensorGroupAddTensorNames(builder, tensorNamesOffset)
	return TensorGroupEnd(builder)
}

func (rcv *TensorGroup) UnPackTo(t *TensorGroupT) {
	t.Name = string(rcv.Name())
	tensorNamesLength := rcv.TensorNamesLength()
	t.TensorNames = make([]string, tensorNamesLength)
	for j := 0; j < tensorNamesLength; j++ {
		t.TensorNames[j] = string(rcv.TensorNames(j))
	}
}

func (rcv *TensorGroup) UnPack() *TensorGroupT {
	if rcv == nil {
		return nil
	}
	t := &TensorGroupT{}
	rcv.UnPackTo(t)
	return t
}

type TensorGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsTensorGroup(buf []byte, offset flatbuffers.UOffsetT) *TensorGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TensorGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTensorGroup(buf []byte, offset flatbuffers.UOffsetT) *TensorGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TensorGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TensorGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TensorGroup) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TensorGroup) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TensorGroup) TensorNames(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TensorGroup) TensorNamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TensorGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TensorGroupAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func TensorGroupAddTensorNames(builder *flatbuffers.Builder, tensorNames flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tensorNames), 0)
}
func TensorGroupStartTensorNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TensorGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
