// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package tflite_metadata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SentencePieceTokenizerOptionsT struct {
	SentencePieceModel []*AssociatedFileT
	VocabFile          []*AssociatedFileT
}

func (t *SentencePieceTokenizerOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	sentencePieceModelOffset := flatbuffers.UOffsetT(0)
	if t.SentencePieceModel != nil {
		sentencePieceModelLength := len(t.SentencePieceModel)
		sentencePieceModelOffsets := make([]flatbuffers.UOffsetT, sentencePieceModelLength)
		for j := 0; j < sentencePieceModelLength; j++ {
			sentencePieceModelOffsets[j] = t.SentencePieceModel[j].Pack(builder)
		}
		SentencePieceTokenizerOptionsStartSentencePieceModelVector(builder, sentencePieceModelLength)
		for j := sentencePieceModelLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(sentencePieceModelOffsets[j])
		}
		sentencePieceModelOffset = builder.EndVector(sentencePieceModelLength)
	}
	vocabFileOffset := flatbuffers.UOffsetT(0)
	if t.VocabFile != nil {
		vocabFileLength := len(t.VocabFile)
		vocabFileOffsets := make([]flatbuffers.UOffsetT, vocabFileLength)
		for j := 0; j < vocabFileLength; j++ {
			vocabFileOffsets[j] = t.VocabFile[j].Pack(builder)
		}
		SentencePieceTokenizerOptionsStartVocabFileVector(builder, vocabFileLength)
		for j := vocabFileLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(vocabFileOffsets[j])
		}
		vocabFileOffset = builder.EndVector(vocabFileLength)
	}
	SentencePieceTokenizerOptionsStart(builder)
	SentencePieceTokenizerOptionsAddSentencePieceModel(builder, sentencePieceModelOffset)
	SentencePieceTokenizerOptionsAddVocabFile(builder, vocabFileOffset)
	return SentencePieceTokenizerOptionsEnd(builder)
}

func (rcv *SentencePieceTokenizerOptions) UnPackTo(t *SentencePieceTokenizerOptionsT) {
	sentencePieceModelLength := rcv.SentencePieceModelLength()
	t.SentencePieceModel = make([]*AssociatedFileT, sentencePieceModelLength)
	for j := 0; j < sentencePieceModelLength; j++ {
		x := AssociatedFile{}
		rcv.SentencePieceModel(&x, j)
		t.SentencePieceModel[j] = x.UnPack()
	}
	vocabFileLength := rcv.VocabFileLength()
	t.VocabFile = make([]*AssociatedFileT, vocabFileLength)
	for j := 0; j < vocabFileLength; j++ {
		x := AssociatedFile{}
		rcv.VocabFile(&x, j)
		t.VocabFile[j] = x.UnPack()
	}
}

func (rcv *SentencePieceTokenizerOptions) UnPack() *SentencePieceTokenizerOptionsT {
	if rcv == nil {
		return nil
	}
	t := &SentencePieceTokenizerOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type SentencePieceTokenizerOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsSentencePieceTokenizerOptions(buf []byte, offset flatbuffers.UOffsetT) *SentencePieceTokenizerOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SentencePieceTokenizerOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSentencePieceTokenizerOptions(buf []byte, offset flatbuffers.UOffsetT) *SentencePieceTokenizerOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SentencePieceTokenizerOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SentencePieceTokenizerOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SentencePieceTokenizerOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SentencePieceTokenizerOptions) SentencePieceModel(obj *AssociatedFile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SentencePieceTokenizerOptions) SentencePieceModelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SentencePieceTokenizerOptions) VocabFile(obj *AssociatedFile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SentencePieceTokenizerOptions) VocabFileLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SentencePieceTokenizerOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SentencePieceTokenizerOptionsAddSentencePieceModel(builder *flatbuffers.Builder, sentencePieceModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sentencePieceModel), 0)
}
func SentencePieceTokenizerOptionsStartSentencePieceModelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SentencePieceTokenizerOptionsAddVocabFile(builder *flatbuffers.Builder, vocabFile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(vocabFile), 0)
}
func SentencePieceTokenizerOptionsStartVocabFileVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SentencePieceTokenizerOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
