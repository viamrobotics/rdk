/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * source: proto/api/v1/robot.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./../../../google/protobuf/struct";
import * as dependency_2 from "./../../../google/protobuf/duration";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./../../../google/api/httpbody";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace proto.api.v1 {
    export enum DirectionRelative {
        DIRECTION_RELATIVE_UNSPECIFIED = 0,
        DIRECTION_RELATIVE_FORWARD = 1,
        DIRECTION_RELATIVE_BACKWARD = 2
    }
    export class StatusRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusRequest {
            return StatusRequest.deserialize(bytes);
        }
    }
    export class StatusStreamRequest extends pb_1.Message {
        constructor(data?: any[] | {
            every?: dependency_2.google.protobuf.Duration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("every" in data && data.every != undefined) {
                    this.every = data.every;
                }
            }
        }
        get every() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 1) as dependency_2.google.protobuf.Duration;
        }
        set every(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                every?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            } = {};
            if (this.every != null) {
                data.every = this.every.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.every !== undefined)
                writer.writeMessage(1, this.every, () => this.every.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.every, () => message.every = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusStreamRequest {
            return StatusStreamRequest.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status?: Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 1) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof Status.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status !== undefined)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    export class StatusStreamResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status?: Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 1) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof Status.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status !== undefined)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusStreamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusStreamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusStreamResponse {
            return StatusStreamResponse.deserialize(bytes);
        }
    }
    export class Status extends pb_1.Message {
        constructor(data?: any[] | {
            arms?: Map<string, ArmStatus>;
            bases?: Map<string, boolean>;
            grippers?: Map<string, boolean>;
            boards?: Map<string, BoardStatus>;
            cameras?: Map<string, boolean>;
            lidars?: Map<string, boolean>;
            sensors?: Map<string, SensorStatus>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("arms" in data && data.arms != undefined) {
                    this.arms = data.arms;
                }
                if ("bases" in data && data.bases != undefined) {
                    this.bases = data.bases;
                }
                if ("grippers" in data && data.grippers != undefined) {
                    this.grippers = data.grippers;
                }
                if ("boards" in data && data.boards != undefined) {
                    this.boards = data.boards;
                }
                if ("cameras" in data && data.cameras != undefined) {
                    this.cameras = data.cameras;
                }
                if ("lidars" in data && data.lidars != undefined) {
                    this.lidars = data.lidars;
                }
                if ("sensors" in data && data.sensors != undefined) {
                    this.sensors = data.sensors;
                }
            }
            if (!this.arms)
                this.arms = new Map()
            if (!this.bases)
                this.bases = new Map()
            if (!this.grippers)
                this.grippers = new Map()
            if (!this.boards)
                this.boards = new Map()
            if (!this.cameras)
                this.cameras = new Map()
            if (!this.lidars)
                this.lidars = new Map()
            if (!this.sensors)
                this.sensors = new Map()
        }
        get arms() {
            return pb_1.Message.getField(this, 1) as any as Map<string, ArmStatus>;
        }
        set arms(value: Map<string, ArmStatus>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get bases() {
            return pb_1.Message.getField(this, 2) as any as Map<string, boolean>;
        }
        set bases(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get grippers() {
            return pb_1.Message.getField(this, 3) as any as Map<string, boolean>;
        }
        set grippers(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get boards() {
            return pb_1.Message.getField(this, 4) as any as Map<string, BoardStatus>;
        }
        set boards(value: Map<string, BoardStatus>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get cameras() {
            return pb_1.Message.getField(this, 5) as any as Map<string, boolean>;
        }
        set cameras(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get lidars() {
            return pb_1.Message.getField(this, 6) as any as Map<string, boolean>;
        }
        set lidars(value: Map<string, boolean>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get sensors() {
            return pb_1.Message.getField(this, 7) as any as Map<string, SensorStatus>;
        }
        set sensors(value: Map<string, SensorStatus>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        toObject() {
            const data: {
                arms?: {
                    [key: string]: ReturnType<typeof ArmStatus.prototype.toObject>;
                };
                bases?: {
                    [key: string]: boolean;
                };
                grippers?: {
                    [key: string]: boolean;
                };
                boards?: {
                    [key: string]: ReturnType<typeof BoardStatus.prototype.toObject>;
                };
                cameras?: {
                    [key: string]: boolean;
                };
                lidars?: {
                    [key: string]: boolean;
                };
                sensors?: {
                    [key: string]: ReturnType<typeof SensorStatus.prototype.toObject>;
                };
            } = {};
            if (this.arms.size > 0) {
                data.arms = Object.fromEntries(Array.from(this.arms).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.bases.size > 0) {
                data.bases = Object.fromEntries(this.bases);
            }
            if (this.grippers.size > 0) {
                data.grippers = Object.fromEntries(this.grippers);
            }
            if (this.boards.size > 0) {
                data.boards = Object.fromEntries(Array.from(this.boards).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.cameras.size > 0) {
                data.cameras = Object.fromEntries(this.cameras);
            }
            if (this.lidars.size > 0) {
                data.lidars = Object.fromEntries(this.lidars);
            }
            if (this.sensors.size > 0) {
                data.sensors = Object.fromEntries(Array.from(this.sensors).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.arms) {
                writer.writeMessage(1, this.arms, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            for (const [key, value] of this.bases) {
                writer.writeMessage(2, this.bases, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                })
            }
            for (const [key, value] of this.grippers) {
                writer.writeMessage(3, this.grippers, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                })
            }
            for (const [key, value] of this.boards) {
                writer.writeMessage(4, this.boards, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            for (const [key, value] of this.cameras) {
                writer.writeMessage(5, this.cameras, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                })
            }
            for (const [key, value] of this.lidars) {
                writer.writeMessage(6, this.lidars, () => {
                    writer.writeString(1, key);
                    writer.writeBool(2, value);
                })
            }
            for (const [key, value] of this.sensors) {
                writer.writeMessage(7, this.sensors, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.arms, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ArmStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.bases, reader, reader.readString, reader.readBool));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.grippers, reader, reader.readString, reader.readBool));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.boards, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = BoardStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cameras, reader, reader.readString, reader.readBool));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.lidars, reader, reader.readString, reader.readBool));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.sensors, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = SensorStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Status {
            return Status.deserialize(bytes);
        }
    }
    export class ComponentConfig extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            type?: string;
            parent?: string;
            translation?: ArmPosition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("translation" in data && data.translation != undefined) {
                    this.translation = data.translation;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get parent() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get translation() {
            return pb_1.Message.getWrapperField(this, ArmPosition, 4) as ArmPosition;
        }
        set translation(value: ArmPosition) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            const data: {
                name?: string;
                type?: string;
                parent?: string;
                translation?: ReturnType<typeof ArmPosition.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.translation != null) {
                data.translation = this.translation.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(2, this.type);
            if (typeof this.parent === "string" && this.parent.length)
                writer.writeString(3, this.parent);
            if (this.translation !== undefined)
                writer.writeMessage(4, this.translation, () => this.translation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComponentConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComponentConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.parent = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.translation, () => message.translation = ArmPosition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComponentConfig {
            return ComponentConfig.deserialize(bytes);
        }
    }
    export class ConfigRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigRequest {
            return ConfigRequest.deserialize(bytes);
        }
    }
    export class ConfigResponse extends pb_1.Message {
        constructor(data?: any[] | {
            components?: ComponentConfig[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("components" in data && data.components != undefined) {
                    this.components = data.components;
                }
            }
        }
        get components() {
            return pb_1.Message.getRepeatedWrapperField(this, ComponentConfig, 1) as ComponentConfig[];
        }
        set components(value: ComponentConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                components?: ReturnType<typeof ComponentConfig.prototype.toObject>[];
            } = {};
            if (this.components != null) {
                data.components = this.components.map((item: ComponentConfig) => item.toObject());
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.components !== undefined)
                writer.writeRepeatedMessage(1, this.components, (item: ComponentConfig) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.components, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ComponentConfig.deserialize(reader), ComponentConfig));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigResponse {
            return ConfigResponse.deserialize(bytes);
        }
    }
    export class DoActionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoActionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoActionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoActionRequest {
            return DoActionRequest.deserialize(bytes);
        }
    }
    export class DoActionResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoActionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoActionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoActionResponse {
            return DoActionResponse.deserialize(bytes);
        }
    }
    export class ArmStatus extends pb_1.Message {
        constructor(data?: any[] | {
            grid_position?: ArmPosition;
            joint_positions?: JointPositions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grid_position" in data && data.grid_position != undefined) {
                    this.grid_position = data.grid_position;
                }
                if ("joint_positions" in data && data.joint_positions != undefined) {
                    this.joint_positions = data.joint_positions;
                }
            }
        }
        get grid_position() {
            return pb_1.Message.getWrapperField(this, ArmPosition, 1) as ArmPosition;
        }
        set grid_position(value: ArmPosition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get joint_positions() {
            return pb_1.Message.getWrapperField(this, JointPositions, 2) as JointPositions;
        }
        set joint_positions(value: JointPositions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        toObject() {
            const data: {
                grid_position?: ReturnType<typeof ArmPosition.prototype.toObject>;
                joint_positions?: ReturnType<typeof JointPositions.prototype.toObject>;
            } = {};
            if (this.grid_position != null) {
                data.grid_position = this.grid_position.toObject();
            }
            if (this.joint_positions != null) {
                data.joint_positions = this.joint_positions.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grid_position !== undefined)
                writer.writeMessage(1, this.grid_position, () => this.grid_position.serialize(writer));
            if (this.joint_positions !== undefined)
                writer.writeMessage(2, this.joint_positions, () => this.joint_positions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.grid_position, () => message.grid_position = ArmPosition.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.joint_positions, () => message.joint_positions = JointPositions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmStatus {
            return ArmStatus.deserialize(bytes);
        }
    }
    export class ArmPosition extends pb_1.Message {
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
            o_x?: number;
            o_y?: number;
            o_z?: number;
            theta?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("o_x" in data && data.o_x != undefined) {
                    this.o_x = data.o_x;
                }
                if ("o_y" in data && data.o_y != undefined) {
                    this.o_y = data.o_y;
                }
                if ("o_z" in data && data.o_z != undefined) {
                    this.o_z = data.o_z;
                }
                if ("theta" in data && data.theta != undefined) {
                    this.theta = data.theta;
                }
            }
        }
        get x() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get z() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get o_x() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set o_x(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get o_y() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set o_y(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get o_z() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set o_z(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get theta() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set theta(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
                o_x?: number;
                o_y?: number;
                o_z?: number;
                theta?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.o_x != null) {
                data.o_x = this.o_x;
            }
            if (this.o_y != null) {
                data.o_y = this.o_y;
            }
            if (this.o_z != null) {
                data.o_z = this.o_z;
            }
            if (this.theta != null) {
                data.theta = this.theta;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x !== undefined)
                writer.writeDouble(1, this.x);
            if (this.y !== undefined)
                writer.writeDouble(2, this.y);
            if (this.z !== undefined)
                writer.writeDouble(3, this.z);
            if (this.o_x !== undefined)
                writer.writeDouble(4, this.o_x);
            if (this.o_y !== undefined)
                writer.writeDouble(5, this.o_y);
            if (this.o_z !== undefined)
                writer.writeDouble(6, this.o_z);
            if (this.theta !== undefined)
                writer.writeDouble(7, this.theta);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmPosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readDouble();
                        break;
                    case 2:
                        message.y = reader.readDouble();
                        break;
                    case 3:
                        message.z = reader.readDouble();
                        break;
                    case 4:
                        message.o_x = reader.readDouble();
                        break;
                    case 5:
                        message.o_y = reader.readDouble();
                        break;
                    case 6:
                        message.o_z = reader.readDouble();
                        break;
                    case 7:
                        message.theta = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmPosition {
            return ArmPosition.deserialize(bytes);
        }
    }
    export class JointPositions extends pb_1.Message {
        constructor(data?: any[] | {
            degrees?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("degrees" in data && data.degrees != undefined) {
                    this.degrees = data.degrees;
                }
            }
        }
        get degrees() {
            return pb_1.Message.getField(this, 1) as number[];
        }
        set degrees(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                degrees?: number[];
            } = {};
            if (this.degrees != null) {
                data.degrees = this.degrees;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.degrees !== undefined)
                writer.writePackedDouble(1, this.degrees);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JointPositions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JointPositions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.degrees = reader.readPackedDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JointPositions {
            return JointPositions.deserialize(bytes);
        }
    }
    export class ArmCurrentPositionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmCurrentPositionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmCurrentPositionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmCurrentPositionRequest {
            return ArmCurrentPositionRequest.deserialize(bytes);
        }
    }
    export class ArmCurrentPositionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            position?: ArmPosition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get position() {
            return pb_1.Message.getWrapperField(this, ArmPosition, 1) as ArmPosition;
        }
        set position(value: ArmPosition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                position?: ReturnType<typeof ArmPosition.prototype.toObject>;
            } = {};
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.position !== undefined)
                writer.writeMessage(1, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmCurrentPositionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmCurrentPositionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.position, () => message.position = ArmPosition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmCurrentPositionResponse {
            return ArmCurrentPositionResponse.deserialize(bytes);
        }
    }
    export class ArmCurrentJointPositionsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmCurrentJointPositionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmCurrentJointPositionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmCurrentJointPositionsRequest {
            return ArmCurrentJointPositionsRequest.deserialize(bytes);
        }
    }
    export class ArmCurrentJointPositionsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            positions?: JointPositions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("positions" in data && data.positions != undefined) {
                    this.positions = data.positions;
                }
            }
        }
        get positions() {
            return pb_1.Message.getWrapperField(this, JointPositions, 1) as JointPositions;
        }
        set positions(value: JointPositions) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                positions?: ReturnType<typeof JointPositions.prototype.toObject>;
            } = {};
            if (this.positions != null) {
                data.positions = this.positions.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.positions !== undefined)
                writer.writeMessage(1, this.positions, () => this.positions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmCurrentJointPositionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmCurrentJointPositionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.positions, () => message.positions = JointPositions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmCurrentJointPositionsResponse {
            return ArmCurrentJointPositionsResponse.deserialize(bytes);
        }
    }
    export class ArmMoveToPositionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            to?: ArmPosition;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getWrapperField(this, ArmPosition, 2) as ArmPosition;
        }
        set to(value: ArmPosition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        toObject() {
            const data: {
                name?: string;
                to?: ReturnType<typeof ArmPosition.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.to !== undefined)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmMoveToPositionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmMoveToPositionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = ArmPosition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmMoveToPositionRequest {
            return ArmMoveToPositionRequest.deserialize(bytes);
        }
    }
    export class ArmMoveToPositionResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmMoveToPositionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmMoveToPositionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmMoveToPositionResponse {
            return ArmMoveToPositionResponse.deserialize(bytes);
        }
    }
    export class ArmMoveToJointPositionsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            to?: JointPositions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getWrapperField(this, JointPositions, 2) as JointPositions;
        }
        set to(value: JointPositions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        toObject() {
            const data: {
                name?: string;
                to?: ReturnType<typeof JointPositions.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.to !== undefined)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmMoveToJointPositionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmMoveToJointPositionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = JointPositions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmMoveToJointPositionsRequest {
            return ArmMoveToJointPositionsRequest.deserialize(bytes);
        }
    }
    export class ArmMoveToJointPositionsResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArmMoveToJointPositionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArmMoveToJointPositionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArmMoveToJointPositionsResponse {
            return ArmMoveToJointPositionsResponse.deserialize(bytes);
        }
    }
    export class BaseMoveStraightRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            distance_millis?: number;
            millis_per_sec?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("distance_millis" in data && data.distance_millis != undefined) {
                    this.distance_millis = data.distance_millis;
                }
                if ("millis_per_sec" in data && data.millis_per_sec != undefined) {
                    this.millis_per_sec = data.millis_per_sec;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get distance_millis() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set distance_millis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get millis_per_sec() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set millis_per_sec(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                name?: string;
                distance_millis?: number;
                millis_per_sec?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.distance_millis != null) {
                data.distance_millis = this.distance_millis;
            }
            if (this.millis_per_sec != null) {
                data.millis_per_sec = this.millis_per_sec;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.distance_millis !== undefined)
                writer.writeInt64(2, this.distance_millis);
            if (this.millis_per_sec !== undefined)
                writer.writeDouble(3, this.millis_per_sec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseMoveStraightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseMoveStraightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.distance_millis = reader.readInt64();
                        break;
                    case 3:
                        message.millis_per_sec = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseMoveStraightRequest {
            return BaseMoveStraightRequest.deserialize(bytes);
        }
    }
    export class BaseMoveStraightResponse extends pb_1.Message {
        constructor(data?: any[] | {
            success?: boolean;
            error?: string;
            distance_millis?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("distance_millis" in data && data.distance_millis != undefined) {
                    this.distance_millis = data.distance_millis;
                }
            }
        }
        get success() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get distance_millis() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set distance_millis(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                success?: boolean;
                error?: string;
                distance_millis?: number;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.distance_millis != null) {
                data.distance_millis = this.distance_millis;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success !== undefined)
                writer.writeBool(1, this.success);
            if (typeof this.error === "string" && this.error.length)
                writer.writeString(2, this.error);
            if (this.distance_millis !== undefined)
                writer.writeInt64(3, this.distance_millis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseMoveStraightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseMoveStraightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        message.distance_millis = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseMoveStraightResponse {
            return BaseMoveStraightResponse.deserialize(bytes);
        }
    }
    export class BaseSpinRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            angle_deg?: number;
            degs_per_sec?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("angle_deg" in data && data.angle_deg != undefined) {
                    this.angle_deg = data.angle_deg;
                }
                if ("degs_per_sec" in data && data.degs_per_sec != undefined) {
                    this.degs_per_sec = data.degs_per_sec;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get angle_deg() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set angle_deg(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get degs_per_sec() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set degs_per_sec(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                name?: string;
                angle_deg?: number;
                degs_per_sec?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.angle_deg != null) {
                data.angle_deg = this.angle_deg;
            }
            if (this.degs_per_sec != null) {
                data.degs_per_sec = this.degs_per_sec;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.angle_deg !== undefined)
                writer.writeDouble(2, this.angle_deg);
            if (this.degs_per_sec !== undefined)
                writer.writeDouble(3, this.degs_per_sec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseSpinRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseSpinRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.angle_deg = reader.readDouble();
                        break;
                    case 3:
                        message.degs_per_sec = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseSpinRequest {
            return BaseSpinRequest.deserialize(bytes);
        }
    }
    export class BaseSpinResponse extends pb_1.Message {
        constructor(data?: any[] | {
            success?: boolean;
            error?: string;
            angle_deg?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("angle_deg" in data && data.angle_deg != undefined) {
                    this.angle_deg = data.angle_deg;
                }
            }
        }
        get success() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get angle_deg() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set angle_deg(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                success?: boolean;
                error?: string;
                angle_deg?: number;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.angle_deg != null) {
                data.angle_deg = this.angle_deg;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success !== undefined)
                writer.writeBool(1, this.success);
            if (typeof this.error === "string" && this.error.length)
                writer.writeString(2, this.error);
            if (this.angle_deg !== undefined)
                writer.writeDouble(3, this.angle_deg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseSpinResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseSpinResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        message.angle_deg = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseSpinResponse {
            return BaseSpinResponse.deserialize(bytes);
        }
    }
    export class BaseStopRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseStopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseStopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseStopRequest {
            return BaseStopRequest.deserialize(bytes);
        }
    }
    export class BaseStopResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseStopResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseStopResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BaseStopResponse {
            return BaseStopResponse.deserialize(bytes);
        }
    }
    export class GripperOpenRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GripperOpenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GripperOpenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GripperOpenRequest {
            return GripperOpenRequest.deserialize(bytes);
        }
    }
    export class GripperOpenResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GripperOpenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GripperOpenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GripperOpenResponse {
            return GripperOpenResponse.deserialize(bytes);
        }
    }
    export class GripperGrabRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GripperGrabRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GripperGrabRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GripperGrabRequest {
            return GripperGrabRequest.deserialize(bytes);
        }
    }
    export class GripperGrabResponse extends pb_1.Message {
        constructor(data?: any[] | {
            grabbed?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grabbed" in data && data.grabbed != undefined) {
                    this.grabbed = data.grabbed;
                }
            }
        }
        get grabbed() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set grabbed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                grabbed?: boolean;
            } = {};
            if (this.grabbed != null) {
                data.grabbed = this.grabbed;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grabbed !== undefined)
                writer.writeBool(1, this.grabbed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GripperGrabResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GripperGrabResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.grabbed = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GripperGrabResponse {
            return GripperGrabResponse.deserialize(bytes);
        }
    }
    export class CameraFrameRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            mime_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mime_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                name?: string;
                mime_type?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(2, this.mime_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraFrameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraFrameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mime_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraFrameRequest {
            return CameraFrameRequest.deserialize(bytes);
        }
    }
    export class CameraRenderFrameRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            mime_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mime_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                name?: string;
                mime_type?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(2, this.mime_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraRenderFrameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraRenderFrameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mime_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraRenderFrameRequest {
            return CameraRenderFrameRequest.deserialize(bytes);
        }
    }
    export class CameraFrameResponse extends pb_1.Message {
        constructor(data?: any[] | {
            mime_type?: string;
            frame?: Uint8Array;
            dim_x?: number;
            dim_y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
                if ("dim_x" in data && data.dim_x != undefined) {
                    this.dim_x = data.dim_x;
                }
                if ("dim_y" in data && data.dim_y != undefined) {
                    this.dim_y = data.dim_y;
                }
            }
        }
        get mime_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set frame(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get dim_x() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set dim_x(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get dim_y() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set dim_y(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            const data: {
                mime_type?: string;
                frame?: Uint8Array;
                dim_x?: number;
                dim_y?: number;
            } = {};
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.frame != null) {
                data.frame = this.frame;
            }
            if (this.dim_x != null) {
                data.dim_x = this.dim_x;
            }
            if (this.dim_y != null) {
                data.dim_y = this.dim_y;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(1, this.mime_type);
            if (this.frame !== undefined)
                writer.writeBytes(2, this.frame);
            if (this.dim_x !== undefined)
                writer.writeInt64(3, this.dim_x);
            if (this.dim_y !== undefined)
                writer.writeInt64(4, this.dim_y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraFrameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraFrameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime_type = reader.readString();
                        break;
                    case 2:
                        message.frame = reader.readBytes();
                        break;
                    case 3:
                        message.dim_x = reader.readInt64();
                        break;
                    case 4:
                        message.dim_y = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraFrameResponse {
            return CameraFrameResponse.deserialize(bytes);
        }
    }
    export class PointCloudRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            mime_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mime_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                name?: string;
                mime_type?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(2, this.mime_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointCloudRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PointCloudRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mime_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PointCloudRequest {
            return PointCloudRequest.deserialize(bytes);
        }
    }
    export class PointCloudResponse extends pb_1.Message {
        constructor(data?: any[] | {
            mime_type?: string;
            frame?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get mime_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set frame(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                mime_type?: string;
                frame?: Uint8Array;
            } = {};
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.frame != null) {
                data.frame = this.frame;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(1, this.mime_type);
            if (this.frame !== undefined)
                writer.writeBytes(2, this.frame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointCloudResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PointCloudResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime_type = reader.readString();
                        break;
                    case 2:
                        message.frame = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PointCloudResponse {
            return PointCloudResponse.deserialize(bytes);
        }
    }
    export class PointCloudSegmentRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            mime_type?: string;
            min_points_in_plane?: number;
            min_points_in_segment?: number;
            clustering_radius?: number;
            x?: number;
            y?: number;
            z?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("min_points_in_plane" in data && data.min_points_in_plane != undefined) {
                    this.min_points_in_plane = data.min_points_in_plane;
                }
                if ("min_points_in_segment" in data && data.min_points_in_segment != undefined) {
                    this.min_points_in_segment = data.min_points_in_segment;
                }
                if ("clustering_radius" in data && data.clustering_radius != undefined) {
                    this.clustering_radius = data.clustering_radius;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mime_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get min_points_in_plane() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set min_points_in_plane(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_points_in_segment() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set min_points_in_segment(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get clustering_radius() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set clustering_radius(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get x() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get y() {
            return pb_1.Message.getField(this, 7) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get z() {
            return pb_1.Message.getField(this, 8) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        toObject() {
            const data: {
                name?: string;
                mime_type?: string;
                min_points_in_plane?: number;
                min_points_in_segment?: number;
                clustering_radius?: number;
                x?: number;
                y?: number;
                z?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.min_points_in_plane != null) {
                data.min_points_in_plane = this.min_points_in_plane;
            }
            if (this.min_points_in_segment != null) {
                data.min_points_in_segment = this.min_points_in_segment;
            }
            if (this.clustering_radius != null) {
                data.clustering_radius = this.clustering_radius;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(2, this.mime_type);
            if (this.min_points_in_plane !== undefined)
                writer.writeInt64(3, this.min_points_in_plane);
            if (this.min_points_in_segment !== undefined)
                writer.writeInt64(4, this.min_points_in_segment);
            if (this.clustering_radius !== undefined)
                writer.writeDouble(5, this.clustering_radius);
            if (this.x !== undefined)
                writer.writeDouble(6, this.x);
            if (this.y !== undefined)
                writer.writeDouble(7, this.y);
            if (this.z !== undefined)
                writer.writeDouble(8, this.z);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointCloudSegmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PointCloudSegmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mime_type = reader.readString();
                        break;
                    case 3:
                        message.min_points_in_plane = reader.readInt64();
                        break;
                    case 4:
                        message.min_points_in_segment = reader.readInt64();
                        break;
                    case 5:
                        message.clustering_radius = reader.readDouble();
                        break;
                    case 6:
                        message.x = reader.readDouble();
                        break;
                    case 7:
                        message.y = reader.readDouble();
                        break;
                    case 8:
                        message.z = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PointCloudSegmentRequest {
            return PointCloudSegmentRequest.deserialize(bytes);
        }
    }
    export class PointCloudSegmentResponse extends pb_1.Message {
        constructor(data?: any[] | {
            mime_type?: string;
            frame?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get mime_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set frame(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                mime_type?: string;
                frame?: Uint8Array;
            } = {};
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.frame != null) {
                data.frame = this.frame;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.mime_type === "string" && this.mime_type.length)
                writer.writeString(1, this.mime_type);
            if (this.frame !== undefined)
                writer.writeBytes(2, this.frame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointCloudSegmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PointCloudSegmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime_type = reader.readString();
                        break;
                    case 2:
                        message.frame = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PointCloudSegmentResponse {
            return PointCloudSegmentResponse.deserialize(bytes);
        }
    }
    export class LidarMeasurement extends pb_1.Message {
        constructor(data?: any[] | {
            angle?: number;
            angle_deg?: number;
            distance?: number;
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("angle" in data && data.angle != undefined) {
                    this.angle = data.angle;
                }
                if ("angle_deg" in data && data.angle_deg != undefined) {
                    this.angle_deg = data.angle_deg;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get angle() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set angle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get angle_deg() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set angle_deg(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get distance() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set distance(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get x() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get y() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            const data: {
                angle?: number;
                angle_deg?: number;
                distance?: number;
                x?: number;
                y?: number;
            } = {};
            if (this.angle != null) {
                data.angle = this.angle;
            }
            if (this.angle_deg != null) {
                data.angle_deg = this.angle_deg;
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.angle !== undefined)
                writer.writeDouble(1, this.angle);
            if (this.angle_deg !== undefined)
                writer.writeDouble(2, this.angle_deg);
            if (this.distance !== undefined)
                writer.writeDouble(3, this.distance);
            if (this.x !== undefined)
                writer.writeDouble(4, this.x);
            if (this.y !== undefined)
                writer.writeDouble(5, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarMeasurement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarMeasurement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.angle = reader.readDouble();
                        break;
                    case 2:
                        message.angle_deg = reader.readDouble();
                        break;
                    case 3:
                        message.distance = reader.readDouble();
                        break;
                    case 4:
                        message.x = reader.readDouble();
                        break;
                    case 5:
                        message.y = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarMeasurement {
            return LidarMeasurement.deserialize(bytes);
        }
    }
    export class LidarInfoRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarInfoRequest {
            return LidarInfoRequest.deserialize(bytes);
        }
    }
    export class LidarInfoResponse extends pb_1.Message {
        constructor(data?: any[] | {
            info?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get info() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 1) as dependency_1.google.protobuf.Struct;
        }
        set info(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                info?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info !== undefined)
                writer.writeMessage(1, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.info, () => message.info = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarInfoResponse {
            return LidarInfoResponse.deserialize(bytes);
        }
    }
    export class LidarStartRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarStartRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarStartRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarStartRequest {
            return LidarStartRequest.deserialize(bytes);
        }
    }
    export class LidarStartResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarStartResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarStartResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarStartResponse {
            return LidarStartResponse.deserialize(bytes);
        }
    }
    export class LidarStopRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarStopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarStopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarStopRequest {
            return LidarStopRequest.deserialize(bytes);
        }
    }
    export class LidarStopResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarStopResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarStopResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarStopResponse {
            return LidarStopResponse.deserialize(bytes);
        }
    }
    export class LidarScanRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            count?: number;
            no_filter?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("no_filter" in data && data.no_filter != undefined) {
                    this.no_filter = data.no_filter;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get no_filter() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set no_filter(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                name?: string;
                count?: number;
                no_filter?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.no_filter != null) {
                data.no_filter = this.no_filter;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.count !== undefined)
                writer.writeInt32(2, this.count);
            if (this.no_filter !== undefined)
                writer.writeBool(3, this.no_filter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarScanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarScanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.no_filter = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarScanRequest {
            return LidarScanRequest.deserialize(bytes);
        }
    }
    export class LidarScanResponse extends pb_1.Message {
        constructor(data?: any[] | {
            measurements?: LidarMeasurement[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("measurements" in data && data.measurements != undefined) {
                    this.measurements = data.measurements;
                }
            }
        }
        get measurements() {
            return pb_1.Message.getRepeatedWrapperField(this, LidarMeasurement, 1) as LidarMeasurement[];
        }
        set measurements(value: LidarMeasurement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                measurements?: ReturnType<typeof LidarMeasurement.prototype.toObject>[];
            } = {};
            if (this.measurements != null) {
                data.measurements = this.measurements.map((item: LidarMeasurement) => item.toObject());
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.measurements !== undefined)
                writer.writeRepeatedMessage(1, this.measurements, (item: LidarMeasurement) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarScanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarScanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.measurements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LidarMeasurement.deserialize(reader), LidarMeasurement));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarScanResponse {
            return LidarScanResponse.deserialize(bytes);
        }
    }
    export class LidarRangeRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarRangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarRangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarRangeRequest {
            return LidarRangeRequest.deserialize(bytes);
        }
    }
    export class LidarRangeResponse extends pb_1.Message {
        constructor(data?: any[] | {
            range?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
            }
        }
        get range() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set range(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                range?: number;
            } = {};
            if (this.range != null) {
                data.range = this.range;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.range !== undefined)
                writer.writeInt64(1, this.range);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarRangeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarRangeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.range = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarRangeResponse {
            return LidarRangeResponse.deserialize(bytes);
        }
    }
    export class LidarBoundsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarBoundsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarBoundsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarBoundsRequest {
            return LidarBoundsRequest.deserialize(bytes);
        }
    }
    export class LidarBoundsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x !== undefined)
                writer.writeInt64(1, this.x);
            if (this.y !== undefined)
                writer.writeInt64(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarBoundsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarBoundsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readInt64();
                        break;
                    case 2:
                        message.y = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarBoundsResponse {
            return LidarBoundsResponse.deserialize(bytes);
        }
    }
    export class LidarAngularResolutionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarAngularResolutionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarAngularResolutionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarAngularResolutionRequest {
            return LidarAngularResolutionRequest.deserialize(bytes);
        }
    }
    export class LidarAngularResolutionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            angular_resolution?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("angular_resolution" in data && data.angular_resolution != undefined) {
                    this.angular_resolution = data.angular_resolution;
                }
            }
        }
        get angular_resolution() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set angular_resolution(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                angular_resolution?: number;
            } = {};
            if (this.angular_resolution != null) {
                data.angular_resolution = this.angular_resolution;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.angular_resolution !== undefined)
                writer.writeDouble(1, this.angular_resolution);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LidarAngularResolutionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LidarAngularResolutionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.angular_resolution = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LidarAngularResolutionResponse {
            return LidarAngularResolutionResponse.deserialize(bytes);
        }
    }
    export class BoardStatus extends pb_1.Message {
        constructor(data?: any[] | {
            motors?: Map<string, MotorStatus>;
            servos?: Map<string, ServoStatus>;
            analogs?: Map<string, AnalogStatus>;
            digital_interrupts?: Map<string, DigitalInterruptStatus>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("motors" in data && data.motors != undefined) {
                    this.motors = data.motors;
                }
                if ("servos" in data && data.servos != undefined) {
                    this.servos = data.servos;
                }
                if ("analogs" in data && data.analogs != undefined) {
                    this.analogs = data.analogs;
                }
                if ("digital_interrupts" in data && data.digital_interrupts != undefined) {
                    this.digital_interrupts = data.digital_interrupts;
                }
            }
            if (!this.motors)
                this.motors = new Map()
            if (!this.servos)
                this.servos = new Map()
            if (!this.analogs)
                this.analogs = new Map()
            if (!this.digital_interrupts)
                this.digital_interrupts = new Map()
        }
        get motors() {
            return pb_1.Message.getField(this, 1) as any as Map<string, MotorStatus>;
        }
        set motors(value: Map<string, MotorStatus>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get servos() {
            return pb_1.Message.getField(this, 2) as any as Map<string, ServoStatus>;
        }
        set servos(value: Map<string, ServoStatus>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get analogs() {
            return pb_1.Message.getField(this, 3) as any as Map<string, AnalogStatus>;
        }
        set analogs(value: Map<string, AnalogStatus>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get digital_interrupts() {
            return pb_1.Message.getField(this, 4) as any as Map<string, DigitalInterruptStatus>;
        }
        set digital_interrupts(value: Map<string, DigitalInterruptStatus>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        toObject() {
            const data: {
                motors?: {
                    [key: string]: ReturnType<typeof MotorStatus.prototype.toObject>;
                };
                servos?: {
                    [key: string]: ReturnType<typeof ServoStatus.prototype.toObject>;
                };
                analogs?: {
                    [key: string]: ReturnType<typeof AnalogStatus.prototype.toObject>;
                };
                digital_interrupts?: {
                    [key: string]: ReturnType<typeof DigitalInterruptStatus.prototype.toObject>;
                };
            } = {};
            if (this.motors.size > 0) {
                data.motors = Object.fromEntries(Array.from(this.motors).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.servos.size > 0) {
                data.servos = Object.fromEntries(Array.from(this.servos).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.analogs.size > 0) {
                data.analogs = Object.fromEntries(Array.from(this.analogs).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.digital_interrupts.size > 0) {
                data.digital_interrupts = Object.fromEntries(Array.from(this.digital_interrupts).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.motors) {
                writer.writeMessage(1, this.motors, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            for (const [key, value] of this.servos) {
                writer.writeMessage(2, this.servos, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            for (const [key, value] of this.analogs) {
                writer.writeMessage(3, this.analogs, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            for (const [key, value] of this.digital_interrupts) {
                writer.writeMessage(4, this.digital_interrupts, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                })
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.motors, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = MotorStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.servos, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ServoStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.analogs, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = AnalogStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.digital_interrupts, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = DigitalInterruptStatus.deserialize(reader))
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardStatus {
            return BoardStatus.deserialize(bytes);
        }
    }
    export class MotorStatus extends pb_1.Message {
        constructor(data?: any[] | {
            on?: boolean;
            position_supported?: boolean;
            position?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("on" in data && data.on != undefined) {
                    this.on = data.on;
                }
                if ("position_supported" in data && data.position_supported != undefined) {
                    this.position_supported = data.position_supported;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get on() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set on(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get position_supported() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set position_supported(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get position() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                on?: boolean;
                position_supported?: boolean;
                position?: number;
            } = {};
            if (this.on != null) {
                data.on = this.on;
            }
            if (this.position_supported != null) {
                data.position_supported = this.position_supported;
            }
            if (this.position != null) {
                data.position = this.position;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.on !== undefined)
                writer.writeBool(1, this.on);
            if (this.position_supported !== undefined)
                writer.writeBool(2, this.position_supported);
            if (this.position !== undefined)
                writer.writeDouble(3, this.position);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MotorStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MotorStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.on = reader.readBool();
                        break;
                    case 2:
                        message.position_supported = reader.readBool();
                        break;
                    case 3:
                        message.position = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MotorStatus {
            return MotorStatus.deserialize(bytes);
        }
    }
    export class ServoStatus extends pb_1.Message {
        constructor(data?: any[] | {
            angle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("angle" in data && data.angle != undefined) {
                    this.angle = data.angle;
                }
            }
        }
        get angle() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set angle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                angle?: number;
            } = {};
            if (this.angle != null) {
                data.angle = this.angle;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.angle !== undefined)
                writer.writeUint32(1, this.angle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServoStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServoStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.angle = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServoStatus {
            return ServoStatus.deserialize(bytes);
        }
    }
    export class AnalogStatus extends pb_1.Message {
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value !== undefined)
                writer.writeInt32(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalogStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalogStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnalogStatus {
            return AnalogStatus.deserialize(bytes);
        }
    }
    export class DigitalInterruptStatus extends pb_1.Message {
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value !== undefined)
                writer.writeInt64(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DigitalInterruptStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DigitalInterruptStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DigitalInterruptStatus {
            return DigitalInterruptStatus.deserialize(bytes);
        }
    }
    export class SensorStatus extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                type?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SensorStatus {
            return SensorStatus.deserialize(bytes);
        }
    }
    export class BoardStatusRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardStatusRequest {
            return BoardStatusRequest.deserialize(bytes);
        }
    }
    export class BoardStatusResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status?: BoardStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, BoardStatus, 1) as BoardStatus;
        }
        set status(value: BoardStatus) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof BoardStatus.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status !== undefined)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = BoardStatus.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardStatusResponse {
            return BoardStatusResponse.deserialize(bytes);
        }
    }
    export class BoardMotorGoRequest extends pb_1.Message {
        constructor(data?: any[] | {
            board_name?: string;
            motor_name?: string;
            direction?: DirectionRelative;
            power_pct?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("board_name" in data && data.board_name != undefined) {
                    this.board_name = data.board_name;
                }
                if ("motor_name" in data && data.motor_name != undefined) {
                    this.motor_name = data.motor_name;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
                if ("power_pct" in data && data.power_pct != undefined) {
                    this.power_pct = data.power_pct;
                }
            }
        }
        get board_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set board_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get motor_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set motor_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get direction() {
            return pb_1.Message.getField(this, 3) as DirectionRelative;
        }
        set direction(value: DirectionRelative) {
            pb_1.Message.setField(this, 3, value);
        }
        get power_pct() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set power_pct(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            const data: {
                board_name?: string;
                motor_name?: string;
                direction?: DirectionRelative;
                power_pct?: number;
            } = {};
            if (this.board_name != null) {
                data.board_name = this.board_name;
            }
            if (this.motor_name != null) {
                data.motor_name = this.motor_name;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            if (this.power_pct != null) {
                data.power_pct = this.power_pct;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.board_name === "string" && this.board_name.length)
                writer.writeString(1, this.board_name);
            if (typeof this.motor_name === "string" && this.motor_name.length)
                writer.writeString(2, this.motor_name);
            if (this.direction !== undefined)
                writer.writeEnum(3, this.direction);
            if (this.power_pct !== undefined)
                writer.writeFloat(4, this.power_pct);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardMotorGoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardMotorGoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.board_name = reader.readString();
                        break;
                    case 2:
                        message.motor_name = reader.readString();
                        break;
                    case 3:
                        message.direction = reader.readEnum();
                        break;
                    case 4:
                        message.power_pct = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardMotorGoRequest {
            return BoardMotorGoRequest.deserialize(bytes);
        }
    }
    export class BoardMotorGoResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardMotorGoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardMotorGoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardMotorGoResponse {
            return BoardMotorGoResponse.deserialize(bytes);
        }
    }
    export class BoardMotorGoForRequest extends pb_1.Message {
        constructor(data?: any[] | {
            board_name?: string;
            motor_name?: string;
            direction?: DirectionRelative;
            rpm?: number;
            revolutions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("board_name" in data && data.board_name != undefined) {
                    this.board_name = data.board_name;
                }
                if ("motor_name" in data && data.motor_name != undefined) {
                    this.motor_name = data.motor_name;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
                if ("rpm" in data && data.rpm != undefined) {
                    this.rpm = data.rpm;
                }
                if ("revolutions" in data && data.revolutions != undefined) {
                    this.revolutions = data.revolutions;
                }
            }
        }
        get board_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set board_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get motor_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set motor_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get direction() {
            return pb_1.Message.getField(this, 3) as DirectionRelative;
        }
        set direction(value: DirectionRelative) {
            pb_1.Message.setField(this, 3, value);
        }
        get rpm() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set rpm(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get revolutions() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set revolutions(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            const data: {
                board_name?: string;
                motor_name?: string;
                direction?: DirectionRelative;
                rpm?: number;
                revolutions?: number;
            } = {};
            if (this.board_name != null) {
                data.board_name = this.board_name;
            }
            if (this.motor_name != null) {
                data.motor_name = this.motor_name;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            if (this.rpm != null) {
                data.rpm = this.rpm;
            }
            if (this.revolutions != null) {
                data.revolutions = this.revolutions;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.board_name === "string" && this.board_name.length)
                writer.writeString(1, this.board_name);
            if (typeof this.motor_name === "string" && this.motor_name.length)
                writer.writeString(2, this.motor_name);
            if (this.direction !== undefined)
                writer.writeEnum(3, this.direction);
            if (this.rpm !== undefined)
                writer.writeDouble(4, this.rpm);
            if (this.revolutions !== undefined)
                writer.writeDouble(5, this.revolutions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardMotorGoForRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardMotorGoForRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.board_name = reader.readString();
                        break;
                    case 2:
                        message.motor_name = reader.readString();
                        break;
                    case 3:
                        message.direction = reader.readEnum();
                        break;
                    case 4:
                        message.rpm = reader.readDouble();
                        break;
                    case 5:
                        message.revolutions = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardMotorGoForRequest {
            return BoardMotorGoForRequest.deserialize(bytes);
        }
    }
    export class BoardMotorGoForResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardMotorGoForResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardMotorGoForResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardMotorGoForResponse {
            return BoardMotorGoForResponse.deserialize(bytes);
        }
    }
    export class BoardServoMoveRequest extends pb_1.Message {
        constructor(data?: any[] | {
            board_name?: string;
            servo_name?: string;
            angle_deg?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("board_name" in data && data.board_name != undefined) {
                    this.board_name = data.board_name;
                }
                if ("servo_name" in data && data.servo_name != undefined) {
                    this.servo_name = data.servo_name;
                }
                if ("angle_deg" in data && data.angle_deg != undefined) {
                    this.angle_deg = data.angle_deg;
                }
            }
        }
        get board_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set board_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get servo_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set servo_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get angle_deg() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set angle_deg(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                board_name?: string;
                servo_name?: string;
                angle_deg?: number;
            } = {};
            if (this.board_name != null) {
                data.board_name = this.board_name;
            }
            if (this.servo_name != null) {
                data.servo_name = this.servo_name;
            }
            if (this.angle_deg != null) {
                data.angle_deg = this.angle_deg;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.board_name === "string" && this.board_name.length)
                writer.writeString(1, this.board_name);
            if (typeof this.servo_name === "string" && this.servo_name.length)
                writer.writeString(2, this.servo_name);
            if (this.angle_deg !== undefined)
                writer.writeUint32(3, this.angle_deg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardServoMoveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardServoMoveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.board_name = reader.readString();
                        break;
                    case 2:
                        message.servo_name = reader.readString();
                        break;
                    case 3:
                        message.angle_deg = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardServoMoveRequest {
            return BoardServoMoveRequest.deserialize(bytes);
        }
    }
    export class BoardServoMoveResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardServoMoveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardServoMoveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardServoMoveResponse {
            return BoardServoMoveResponse.deserialize(bytes);
        }
    }
    export class SensorReadingsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorReadingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorReadingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SensorReadingsRequest {
            return SensorReadingsRequest.deserialize(bytes);
        }
    }
    export class SensorReadingsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            readings?: dependency_1.google.protobuf.Value[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("readings" in data && data.readings != undefined) {
                    this.readings = data.readings;
                }
            }
        }
        get readings() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Value, 1) as dependency_1.google.protobuf.Value[];
        }
        set readings(value: dependency_1.google.protobuf.Value[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            const data: {
                readings?: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>[];
            } = {};
            if (this.readings != null) {
                data.readings = this.readings.map((item: dependency_1.google.protobuf.Value) => item.toObject());
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.readings !== undefined)
                writer.writeRepeatedMessage(1, this.readings, (item: dependency_1.google.protobuf.Value) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorReadingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorReadingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.readings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.google.protobuf.Value.deserialize(reader), dependency_1.google.protobuf.Value));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SensorReadingsResponse {
            return SensorReadingsResponse.deserialize(bytes);
        }
    }
    export class CompassHeadingRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassHeadingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassHeadingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassHeadingRequest {
            return CompassHeadingRequest.deserialize(bytes);
        }
    }
    export class CompassHeadingResponse extends pb_1.Message {
        constructor(data?: any[] | {
            heading?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("heading" in data && data.heading != undefined) {
                    this.heading = data.heading;
                }
            }
        }
        get heading() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set heading(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                heading?: number;
            } = {};
            if (this.heading != null) {
                data.heading = this.heading;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.heading !== undefined)
                writer.writeDouble(1, this.heading);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassHeadingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassHeadingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.heading = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassHeadingResponse {
            return CompassHeadingResponse.deserialize(bytes);
        }
    }
    export class CompassStartCalibrationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassStartCalibrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassStartCalibrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassStartCalibrationRequest {
            return CompassStartCalibrationRequest.deserialize(bytes);
        }
    }
    export class CompassStartCalibrationResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassStartCalibrationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassStartCalibrationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassStartCalibrationResponse {
            return CompassStartCalibrationResponse.deserialize(bytes);
        }
    }
    export class CompassStopCalibrationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassStopCalibrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassStopCalibrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassStopCalibrationRequest {
            return CompassStopCalibrationRequest.deserialize(bytes);
        }
    }
    export class CompassStopCalibrationResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassStopCalibrationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassStopCalibrationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassStopCalibrationResponse {
            return CompassStopCalibrationResponse.deserialize(bytes);
        }
    }
    export class CompassMarkRequest extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassMarkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassMarkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassMarkRequest {
            return CompassMarkRequest.deserialize(bytes);
        }
    }
    export class CompassMarkResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompassMarkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompassMarkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompassMarkResponse {
            return CompassMarkResponse.deserialize(bytes);
        }
    }
    export interface IRobotServiceService extends grpc_1.ServiceDefinition<grpc_1.UntypedServiceImplementation> {
        Status: grpc_1.MethodDefinition<StatusRequest, StatusResponse>;
        StatusStream: grpc_1.MethodDefinition<StatusStreamRequest, StatusStreamResponse>;
        Config: grpc_1.MethodDefinition<ConfigRequest, ConfigResponse>;
        DoAction: grpc_1.MethodDefinition<DoActionRequest, DoActionResponse>;
        ArmCurrentPosition: grpc_1.MethodDefinition<ArmCurrentPositionRequest, ArmCurrentPositionResponse>;
        ArmMoveToPosition: grpc_1.MethodDefinition<ArmMoveToPositionRequest, ArmMoveToPositionResponse>;
        ArmCurrentJointPositions: grpc_1.MethodDefinition<ArmCurrentJointPositionsRequest, ArmCurrentJointPositionsResponse>;
        ArmMoveToJointPositions: grpc_1.MethodDefinition<ArmMoveToJointPositionsRequest, ArmMoveToJointPositionsResponse>;
        BaseMoveStraight: grpc_1.MethodDefinition<BaseMoveStraightRequest, BaseMoveStraightResponse>;
        BaseSpin: grpc_1.MethodDefinition<BaseSpinRequest, BaseSpinResponse>;
        BaseStop: grpc_1.MethodDefinition<BaseStopRequest, BaseStopResponse>;
        GripperOpen: grpc_1.MethodDefinition<GripperOpenRequest, GripperOpenResponse>;
        GripperGrab: grpc_1.MethodDefinition<GripperGrabRequest, GripperGrabResponse>;
        CameraFrame: grpc_1.MethodDefinition<CameraFrameRequest, CameraFrameResponse>;
        CameraRenderFrame: grpc_1.MethodDefinition<CameraRenderFrameRequest, dependency_4.google.api.HttpBody>;
        PointCloud: grpc_1.MethodDefinition<PointCloudRequest, PointCloudResponse>;
        PointCloudSegment: grpc_1.MethodDefinition<PointCloudSegmentRequest, PointCloudSegmentResponse>;
        LidarInfo: grpc_1.MethodDefinition<LidarInfoRequest, LidarInfoResponse>;
        LidarStart: grpc_1.MethodDefinition<LidarStartRequest, LidarStartResponse>;
        LidarStop: grpc_1.MethodDefinition<LidarStopRequest, LidarStopResponse>;
        LidarScan: grpc_1.MethodDefinition<LidarScanRequest, LidarScanResponse>;
        LidarRange: grpc_1.MethodDefinition<LidarRangeRequest, LidarRangeResponse>;
        LidarBounds: grpc_1.MethodDefinition<LidarBoundsRequest, LidarBoundsResponse>;
        LidarAngularResolution: grpc_1.MethodDefinition<LidarAngularResolutionRequest, LidarAngularResolutionResponse>;
        BoardStatus: grpc_1.MethodDefinition<BoardStatusRequest, BoardStatusResponse>;
        BoardMotorGo: grpc_1.MethodDefinition<BoardMotorGoRequest, BoardMotorGoResponse>;
        BoardMotorGoFor: grpc_1.MethodDefinition<BoardMotorGoForRequest, BoardMotorGoForResponse>;
        BoardServoMove: grpc_1.MethodDefinition<BoardServoMoveRequest, BoardServoMoveResponse>;
        SensorReadings: grpc_1.MethodDefinition<SensorReadingsRequest, SensorReadingsResponse>;
        CompassHeading: grpc_1.MethodDefinition<CompassHeadingRequest, CompassHeadingResponse>;
        CompassStartCalibration: grpc_1.MethodDefinition<CompassStartCalibrationRequest, CompassStartCalibrationResponse>;
        CompassStopCalibration: grpc_1.MethodDefinition<CompassStopCalibrationRequest, CompassStopCalibrationResponse>;
        CompassMark: grpc_1.MethodDefinition<CompassMarkRequest, CompassMarkResponse>;
    }
    export interface IRobotServiceServer extends grpc_1.UntypedServiceImplementation {
        Status: grpc_1.handleUnaryCall<StatusRequest, StatusResponse>;
        StatusStream: grpc_1.handleUnaryCall<StatusStreamRequest, StatusStreamResponse>;
        Config: grpc_1.handleUnaryCall<ConfigRequest, ConfigResponse>;
        DoAction: grpc_1.handleUnaryCall<DoActionRequest, DoActionResponse>;
        ArmCurrentPosition: grpc_1.handleUnaryCall<ArmCurrentPositionRequest, ArmCurrentPositionResponse>;
        ArmMoveToPosition: grpc_1.handleUnaryCall<ArmMoveToPositionRequest, ArmMoveToPositionResponse>;
        ArmCurrentJointPositions: grpc_1.handleUnaryCall<ArmCurrentJointPositionsRequest, ArmCurrentJointPositionsResponse>;
        ArmMoveToJointPositions: grpc_1.handleUnaryCall<ArmMoveToJointPositionsRequest, ArmMoveToJointPositionsResponse>;
        BaseMoveStraight: grpc_1.handleUnaryCall<BaseMoveStraightRequest, BaseMoveStraightResponse>;
        BaseSpin: grpc_1.handleUnaryCall<BaseSpinRequest, BaseSpinResponse>;
        BaseStop: grpc_1.handleUnaryCall<BaseStopRequest, BaseStopResponse>;
        GripperOpen: grpc_1.handleUnaryCall<GripperOpenRequest, GripperOpenResponse>;
        GripperGrab: grpc_1.handleUnaryCall<GripperGrabRequest, GripperGrabResponse>;
        CameraFrame: grpc_1.handleUnaryCall<CameraFrameRequest, CameraFrameResponse>;
        CameraRenderFrame: grpc_1.handleUnaryCall<CameraRenderFrameRequest, dependency_4.google.api.HttpBody>;
        PointCloud: grpc_1.handleUnaryCall<PointCloudRequest, PointCloudResponse>;
        PointCloudSegment: grpc_1.handleUnaryCall<PointCloudSegmentRequest, PointCloudSegmentResponse>;
        LidarInfo: grpc_1.handleUnaryCall<LidarInfoRequest, LidarInfoResponse>;
        LidarStart: grpc_1.handleUnaryCall<LidarStartRequest, LidarStartResponse>;
        LidarStop: grpc_1.handleUnaryCall<LidarStopRequest, LidarStopResponse>;
        LidarScan: grpc_1.handleUnaryCall<LidarScanRequest, LidarScanResponse>;
        LidarRange: grpc_1.handleUnaryCall<LidarRangeRequest, LidarRangeResponse>;
        LidarBounds: grpc_1.handleUnaryCall<LidarBoundsRequest, LidarBoundsResponse>;
        LidarAngularResolution: grpc_1.handleUnaryCall<LidarAngularResolutionRequest, LidarAngularResolutionResponse>;
        BoardStatus: grpc_1.handleUnaryCall<BoardStatusRequest, BoardStatusResponse>;
        BoardMotorGo: grpc_1.handleUnaryCall<BoardMotorGoRequest, BoardMotorGoResponse>;
        BoardMotorGoFor: grpc_1.handleUnaryCall<BoardMotorGoForRequest, BoardMotorGoForResponse>;
        BoardServoMove: grpc_1.handleUnaryCall<BoardServoMoveRequest, BoardServoMoveResponse>;
        SensorReadings: grpc_1.handleUnaryCall<SensorReadingsRequest, SensorReadingsResponse>;
        CompassHeading: grpc_1.handleUnaryCall<CompassHeadingRequest, CompassHeadingResponse>;
        CompassStartCalibration: grpc_1.handleUnaryCall<CompassStartCalibrationRequest, CompassStartCalibrationResponse>;
        CompassStopCalibration: grpc_1.handleUnaryCall<CompassStopCalibrationRequest, CompassStopCalibrationResponse>;
        CompassMark: grpc_1.handleUnaryCall<CompassMarkRequest, CompassMarkResponse>;
    }
    export const RobotService = {
        Status: {
            path: "/proto.api.v1.RobotService/Status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        StatusStream: {
            path: "/proto.api.v1.RobotService/StatusStream",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: StatusStreamRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StatusStreamRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusStreamResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusStreamResponse.deserialize(new Uint8Array(bytes))
        },
        Config: {
            path: "/proto.api.v1.RobotService/Config",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ConfigRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ConfigRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ConfigResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ConfigResponse.deserialize(new Uint8Array(bytes))
        },
        DoAction: {
            path: "/proto.api.v1.RobotService/DoAction",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DoActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DoActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DoActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DoActionResponse.deserialize(new Uint8Array(bytes))
        },
        ArmCurrentPosition: {
            path: "/proto.api.v1.RobotService/ArmCurrentPosition",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ArmCurrentPositionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ArmCurrentPositionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ArmCurrentPositionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ArmCurrentPositionResponse.deserialize(new Uint8Array(bytes))
        },
        ArmMoveToPosition: {
            path: "/proto.api.v1.RobotService/ArmMoveToPosition",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ArmMoveToPositionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ArmMoveToPositionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ArmMoveToPositionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ArmMoveToPositionResponse.deserialize(new Uint8Array(bytes))
        },
        ArmCurrentJointPositions: {
            path: "/proto.api.v1.RobotService/ArmCurrentJointPositions",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ArmCurrentJointPositionsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ArmCurrentJointPositionsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ArmCurrentJointPositionsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ArmCurrentJointPositionsResponse.deserialize(new Uint8Array(bytes))
        },
        ArmMoveToJointPositions: {
            path: "/proto.api.v1.RobotService/ArmMoveToJointPositions",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ArmMoveToJointPositionsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ArmMoveToJointPositionsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ArmMoveToJointPositionsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ArmMoveToJointPositionsResponse.deserialize(new Uint8Array(bytes))
        },
        BaseMoveStraight: {
            path: "/proto.api.v1.RobotService/BaseMoveStraight",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BaseMoveStraightRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BaseMoveStraightRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BaseMoveStraightResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BaseMoveStraightResponse.deserialize(new Uint8Array(bytes))
        },
        BaseSpin: {
            path: "/proto.api.v1.RobotService/BaseSpin",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BaseSpinRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BaseSpinRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BaseSpinResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BaseSpinResponse.deserialize(new Uint8Array(bytes))
        },
        BaseStop: {
            path: "/proto.api.v1.RobotService/BaseStop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BaseStopRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BaseStopRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BaseStopResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BaseStopResponse.deserialize(new Uint8Array(bytes))
        },
        GripperOpen: {
            path: "/proto.api.v1.RobotService/GripperOpen",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GripperOpenRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GripperOpenRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GripperOpenResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GripperOpenResponse.deserialize(new Uint8Array(bytes))
        },
        GripperGrab: {
            path: "/proto.api.v1.RobotService/GripperGrab",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GripperGrabRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GripperGrabRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GripperGrabResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GripperGrabResponse.deserialize(new Uint8Array(bytes))
        },
        CameraFrame: {
            path: "/proto.api.v1.RobotService/CameraFrame",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CameraFrameRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CameraFrameRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CameraFrameResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CameraFrameResponse.deserialize(new Uint8Array(bytes))
        },
        CameraRenderFrame: {
            path: "/proto.api.v1.RobotService/CameraRenderFrame",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CameraRenderFrameRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CameraRenderFrameRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_4.google.api.HttpBody) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_4.google.api.HttpBody.deserialize(new Uint8Array(bytes))
        },
        PointCloud: {
            path: "/proto.api.v1.RobotService/PointCloud",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PointCloudRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PointCloudRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PointCloudResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PointCloudResponse.deserialize(new Uint8Array(bytes))
        },
        PointCloudSegment: {
            path: "/proto.api.v1.RobotService/PointCloudSegment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PointCloudSegmentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PointCloudSegmentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PointCloudSegmentResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PointCloudSegmentResponse.deserialize(new Uint8Array(bytes))
        },
        LidarInfo: {
            path: "/proto.api.v1.RobotService/LidarInfo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarInfoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarInfoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarInfoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarInfoResponse.deserialize(new Uint8Array(bytes))
        },
        LidarStart: {
            path: "/proto.api.v1.RobotService/LidarStart",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarStartRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarStartRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarStartResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarStartResponse.deserialize(new Uint8Array(bytes))
        },
        LidarStop: {
            path: "/proto.api.v1.RobotService/LidarStop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarStopRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarStopRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarStopResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarStopResponse.deserialize(new Uint8Array(bytes))
        },
        LidarScan: {
            path: "/proto.api.v1.RobotService/LidarScan",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarScanRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarScanRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarScanResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarScanResponse.deserialize(new Uint8Array(bytes))
        },
        LidarRange: {
            path: "/proto.api.v1.RobotService/LidarRange",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarRangeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarRangeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarRangeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarRangeResponse.deserialize(new Uint8Array(bytes))
        },
        LidarBounds: {
            path: "/proto.api.v1.RobotService/LidarBounds",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarBoundsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarBoundsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarBoundsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarBoundsResponse.deserialize(new Uint8Array(bytes))
        },
        LidarAngularResolution: {
            path: "/proto.api.v1.RobotService/LidarAngularResolution",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LidarAngularResolutionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LidarAngularResolutionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LidarAngularResolutionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LidarAngularResolutionResponse.deserialize(new Uint8Array(bytes))
        },
        BoardStatus: {
            path: "/proto.api.v1.RobotService/BoardStatus",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BoardStatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BoardStatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BoardStatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BoardStatusResponse.deserialize(new Uint8Array(bytes))
        },
        BoardMotorGo: {
            path: "/proto.api.v1.RobotService/BoardMotorGo",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BoardMotorGoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BoardMotorGoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BoardMotorGoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BoardMotorGoResponse.deserialize(new Uint8Array(bytes))
        },
        BoardMotorGoFor: {
            path: "/proto.api.v1.RobotService/BoardMotorGoFor",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BoardMotorGoForRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BoardMotorGoForRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BoardMotorGoForResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BoardMotorGoForResponse.deserialize(new Uint8Array(bytes))
        },
        BoardServoMove: {
            path: "/proto.api.v1.RobotService/BoardServoMove",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BoardServoMoveRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BoardServoMoveRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BoardServoMoveResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BoardServoMoveResponse.deserialize(new Uint8Array(bytes))
        },
        SensorReadings: {
            path: "/proto.api.v1.RobotService/SensorReadings",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SensorReadingsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SensorReadingsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SensorReadingsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SensorReadingsResponse.deserialize(new Uint8Array(bytes))
        },
        CompassHeading: {
            path: "/proto.api.v1.RobotService/CompassHeading",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompassHeadingRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompassHeadingRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompassHeadingResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompassHeadingResponse.deserialize(new Uint8Array(bytes))
        },
        CompassStartCalibration: {
            path: "/proto.api.v1.RobotService/CompassStartCalibration",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompassStartCalibrationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompassStartCalibrationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompassStartCalibrationResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompassStartCalibrationResponse.deserialize(new Uint8Array(bytes))
        },
        CompassStopCalibration: {
            path: "/proto.api.v1.RobotService/CompassStopCalibration",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompassStopCalibrationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompassStopCalibrationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompassStopCalibrationResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompassStopCalibrationResponse.deserialize(new Uint8Array(bytes))
        },
        CompassMark: {
            path: "/proto.api.v1.RobotService/CompassMark",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompassMarkRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompassMarkRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompassMarkResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompassMarkResponse.deserialize(new Uint8Array(bytes))
        }
    };
    export class RobotServiceClient extends grpc_1.makeGenericClientConstructor(RobotService, "RobotService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
    }
}
