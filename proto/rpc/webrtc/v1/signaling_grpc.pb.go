// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignalingServiceClient is the client API for SignalingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalingServiceClient interface {
	// Call makes an offer to a client that it expects an answer to. It is
	// assumed that the service is hosted solely for a specific client. That is,
	// every client has its own signaling service identified by its hostname
	// and in the case of TLS being used, SNI.
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Answer sets up an answering service where the caller answers call offers
	// and responds with answers.
	Answer(ctx context.Context, opts ...grpc.CallOption) (SignalingService_AnswerClient, error)
}

type signalingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingServiceClient(cc grpc.ClientConnInterface) SignalingServiceClient {
	return &signalingServiceClient{cc}
}

func (c *signalingServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.webrtc.v1.SignalingService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) Answer(ctx context.Context, opts ...grpc.CallOption) (SignalingService_AnswerClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignalingService_ServiceDesc.Streams[0], "/proto.rpc.webrtc.v1.SignalingService/Answer", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalingServiceAnswerClient{stream}
	return x, nil
}

type SignalingService_AnswerClient interface {
	Send(*AnswerResponse) error
	Recv() (*AnswerRequest, error)
	grpc.ClientStream
}

type signalingServiceAnswerClient struct {
	grpc.ClientStream
}

func (x *signalingServiceAnswerClient) Send(m *AnswerResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalingServiceAnswerClient) Recv() (*AnswerRequest, error) {
	m := new(AnswerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalingServiceServer is the server API for SignalingService service.
// All implementations must embed UnimplementedSignalingServiceServer
// for forward compatibility
type SignalingServiceServer interface {
	// Call makes an offer to a client that it expects an answer to. It is
	// assumed that the service is hosted solely for a specific client. That is,
	// every client has its own signaling service identified by its hostname
	// and in the case of TLS being used, SNI.
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Answer sets up an answering service where the caller answers call offers
	// and responds with answers.
	Answer(SignalingService_AnswerServer) error
	mustEmbedUnimplementedSignalingServiceServer()
}

// UnimplementedSignalingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignalingServiceServer struct {
}

func (UnimplementedSignalingServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSignalingServiceServer) Answer(SignalingService_AnswerServer) error {
	return status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedSignalingServiceServer) mustEmbedUnimplementedSignalingServiceServer() {}

// UnsafeSignalingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalingServiceServer will
// result in compilation errors.
type UnsafeSignalingServiceServer interface {
	mustEmbedUnimplementedSignalingServiceServer()
}

func RegisterSignalingServiceServer(s grpc.ServiceRegistrar, srv SignalingServiceServer) {
	s.RegisterService(&SignalingService_ServiceDesc, srv)
}

func _SignalingService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.webrtc.v1.SignalingService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_Answer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalingServiceServer).Answer(&signalingServiceAnswerServer{stream})
}

type SignalingService_AnswerServer interface {
	Send(*AnswerRequest) error
	Recv() (*AnswerResponse, error)
	grpc.ServerStream
}

type signalingServiceAnswerServer struct {
	grpc.ServerStream
}

func (x *signalingServiceAnswerServer) Send(m *AnswerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalingServiceAnswerServer) Recv() (*AnswerResponse, error) {
	m := new(AnswerResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalingService_ServiceDesc is the grpc.ServiceDesc for SignalingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.webrtc.v1.SignalingService",
	HandlerType: (*SignalingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _SignalingService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Answer",
			Handler:       _SignalingService_Answer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rpc/webrtc/v1/signaling.proto",
}
