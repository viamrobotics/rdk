syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/robot/v1";
option java_package = "com.viam.rdk.proto.api.robot.v1";

package proto.api.robot.v1;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "proto/api/common/v1/common.proto";


// A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
service RobotService {
  // Config gets the config from a server
  // It is only partial a config, including the pieces relevant to remote robots,
  // And not the pieces relevant to local configuration (pins, security keys, etc...)
  rpc Config(ConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/config"
    };  
  }

  // DoAction runs an action on the underlying robot.
  rpc DoAction(DoActionRequest) returns (DoActionResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/do_action"
    };  
  }

  // TODO(RDK-40): refactor to functions service
  rpc ExecuteFunction(ExecuteFunctionRequest) returns (ExecuteFunctionResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/functions/by_name/{name}/execute"
    }; 
  }

  rpc ExecuteSource(ExecuteSourceRequest) returns (ExecuteSourceResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/functions/execute_code"
    }; 
  }

  // ResourceRunCommand runs an arbitrary command on a resource if it supports it.
  rpc ResourceRunCommand(ResourceRunCommandRequest) returns (ResourceRunCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/resource/{resource_name}/run_command"
    };
  }

}

message ComponentConfig {
  string name = 1;
  string type = 2;
  string parent = 3;
  Pose pose = 4;
}

message ConfigRequest {}

message ConfigResponse {
  repeated ComponentConfig components = 1;  
}

message DoActionRequest {
  string name = 1;
}

message DoActionResponse {}

message Pose {
  // millimeters of the end effector from the base
  double x = 1;
  double y = 2;
  double z = 3;

  // ox, oy, oz, theta represents an orientation vector
  // Structured similarly to an angle axis, an orientation vector works differently. Rather than representing an orientation
  // with an arbitrary axis and a rotation around it from an origin, an orientation vector represents orientation
  // such that the ox/oy/oz components represent the point on the cartesian unit sphere at which your end effector is pointing
  // from the origin, and that unit vector forms an axis around which theta rotates. This means that incrementing/decrementing
  // theta will perform an in-line rotation of the end effector.
  // Theta is defined as rotation between two planes: the plane defined by the origin, the point (0,0,1), and the rx,ry,rz
  // point, and the plane defined by the origin, the rx,ry,rz point, and the new local Z axis. So if theta is kept at
  // zero as the north/south pole is circled, the Roll will correct itself to remain in-line.
  // Theta in pb.Pose should be degrees. It will be converted to radians in the internal OrientationVec.
  double o_x = 4;
  double o_y = 5;
  double o_z = 6;
  double theta = 7;
}

message ExecuteFunctionRequest {
  string name = 1;
  // TODO(RDK-39): arguments
}

message ExecuteFunctionResponse {
  repeated google.protobuf.Value results = 1;
  string std_out = 2;
  string std_err = 3;
}

message ExecuteSourceRequest {
  string source = 1;
  string engine = 2;
}

message ExecuteSourceResponse {
  repeated google.protobuf.Value results = 1;
  string std_out = 2;
  string std_err = 3;
}

message ResourceRunCommandRequest {
  // Note(erd): okay in v1 because names are unique. v2 should be a VRN
  string resource_name = 1;
  string command_name = 2;
  google.protobuf.Struct args = 3;
}

message ResourceRunCommandResponse {
  google.protobuf.Struct result = 1;
}
