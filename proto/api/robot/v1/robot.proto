syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/robot/v1";
option java_package = "com.viam.rdk.proto.api.robot.v1";

package proto.api.robot.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "proto/api/common/v1/common.proto";


// A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
service RobotService {
  // Status returns the robot's underlying status.
  rpc Status(StatusRequest) returns (StatusResponse) {
      option (google.api.http) = {
        get: "/api/v1/status"
    };
  }

  // StatusStream periodically sends the robot's status.
  rpc StatusStream(StatusStreamRequest) returns (stream StatusStreamResponse) {
      option (google.api.http) = {
        get: "/api/v1/status_stream"
    };
  }

  // Config gets the config from a server
  // It is only partial a config, including the pieces relevant to remote robots,
  // And not the pieces relevant to local configuration (pins, security keys, etc...)
  rpc Config(ConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/config"
    };  
  }

  // DoAction runs an action on the underlying robot.
  rpc DoAction(DoActionRequest) returns (DoActionResponse) {
    option (google.api.http) = {
      post: "/api/v1/do_action"
    };  
  }

  // TODO(https://github.com/viamrobotics/rdk/issues/407): refactor to functions service
  rpc ExecuteFunction(ExecuteFunctionRequest) returns (ExecuteFunctionResponse) {
    option (google.api.http) = {
      post: "/api/v1/functions/by_name/{name}/execute"
    }; 
  }

  rpc ExecuteSource(ExecuteSourceRequest) returns (ExecuteSourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/functions/execute_code"
    }; 
  }

  // ResourceRunCommand runs an arbitrary command on a resource if it supports it.
  rpc ResourceRunCommand(ResourceRunCommandRequest) returns (ResourceRunCommandResponse) {
    option (google.api.http) = {
      post: "/api/v1/resource/{resource_name}/run_command"
    };
  }
  
  // Navigation Service
  rpc NavigationServiceMode(NavigationServiceModeRequest) returns (NavigationServiceModeResponse) {
    option (google.api.http) = {
      get: "/api/v1/services/navigation/mode"
    };
  }

  rpc NavigationServiceSetMode(NavigationServiceSetModeRequest) returns (NavigationServiceSetModeResponse) {
    option (google.api.http) = {
      put: "/api/v1/services/navigation/mode"
    };
  }

  rpc NavigationServiceLocation(NavigationServiceLocationRequest) returns (NavigationServiceLocationResponse) {
    option (google.api.http) = {
      get: "/api/v1/services/navigation/location"
    };
  }

  rpc NavigationServiceWaypoints(NavigationServiceWaypointsRequest) returns (NavigationServiceWaypointsResponse) {
    option (google.api.http) = {
      get: "/api/v1/services/navigation/waypoints"
    };
  }

  rpc NavigationServiceAddWaypoint(NavigationServiceAddWaypointRequest) returns (NavigationServiceAddWaypointResponse) {
    option (google.api.http) = {
      post: "/api/v1/services/navigation/waypoints"
    };
  }

  rpc NavigationServiceRemoveWaypoint(NavigationServiceRemoveWaypointRequest) returns (NavigationServiceRemoveWaypointResponse) {
    option (google.api.http) = {
      delete: "/api/v1/services/navigation/waypoints/{id}"
    };
  }

}

message StatusRequest {}

message StatusStreamRequest {
  google.protobuf.Duration every = 1; // how often to send a new status.
}

message StatusResponse {
  Status status = 1;
}

message StatusStreamResponse {
  Status status = 1;
}

message Status {
  map<string, ArmStatus> arms = 1;
  map<string, bool> bases = 2;
  map<string, bool> grippers = 3;
  map<string, common.v1.BoardStatus> boards = 4;
  map<string, bool> cameras = 5;
  map<string, SensorStatus> sensors = 6;
  map<string, bool> functions = 7;
  map<string, ServoStatus> servos = 8;
  map<string, MotorStatus> motors = 9;
  map<string, bool> services = 10;
  map<string, InputControllerStatus> input_controllers = 11;
  map<string, GantryStatus> gantries = 12;
}

message ComponentConfig {
  string name = 1;
  string type = 2;
  string parent = 3;
  Pose pose = 4;
}

message ConfigRequest {}

message ConfigResponse {
  repeated ComponentConfig components = 1;  
}

message DoActionRequest {
  string name = 1;
}

message DoActionResponse {}

message GantryStatus {
  repeated double positions = 1;
  repeated double lengths = 2;
}

// Arm

message ArmStatus {
  Pose   grid_position = 1;
  JointPositions joint_positions = 2;
}

message Pose {
  // millimeters of the end effector from the base
  double x = 1;
  double y = 2;
  double z = 3;

  // ox, oy, oz, theta represents an orientation vector
  // Structured similarly to an angle axis, an orientation vector works differently. Rather than representing an orientation
  // with an arbitrary axis and a rotation around it from an origin, an orientation vector represents orientation
  // such that the ox/oy/oz components represent the point on the cartesian unit sphere at which your end effector is pointing
  // from the origin, and that unit vector forms an axis around which theta rotates. This means that incrementing/decrementing
  // theta will perform an in-line rotation of the end effector.
  // Theta is defined as rotation between two planes: the plane defined by the origin, the point (0,0,1), and the rx,ry,rz
  // point, and the plane defined by the origin, the rx,ry,rz point, and the new local Z axis. So if theta is kept at
  // zero as the north/south pole is circled, the Roll will correct itself to remain in-line.
  // Theta in pb.Pose should be degrees. It will be converted to radians in the internal OrientationVec.
  double o_x = 4;
  double o_y = 5;
  double o_z = 6;
  double theta = 7;
}

message JointPositions {
  repeated double degrees = 1;
}

// Sensor

message SensorStatus {
  string type = 1;
}

message ExecuteFunctionRequest {
  string name = 1;
  // TODO(https://github.com/viamrobotics/rdk/issues/408): arguments
}

message ExecuteFunctionResponse {
  repeated google.protobuf.Value results = 1;
  string std_out = 2;
  string std_err = 3;
}

message ExecuteSourceRequest {
  string source = 1;
  string engine = 2;
}

message ExecuteSourceResponse {
  repeated google.protobuf.Value results = 1;
  string std_out = 2;
  string std_err = 3;
}


message MotorStatus {
  // To D0 (FA): Delete this field
  bool on = 1;
  // Returns true if the motor has position support
  bool position_supported = 2;
  // Returns current position of the motor relative to its home
  double position = 3;
  // To Do (FA): Delete this field 
  optional google.protobuf.Struct pid_config = 4;
}

message ServoStatus {
  uint32 angle = 1;
}

message ResourceRunCommandRequest {
  // Note(erd): okay in v1 because names are unique. v2 should be a VRN
  string resource_name = 1;
  string command_name = 2;
  google.protobuf.Struct args = 3;
}

message ResourceRunCommandResponse {
  google.protobuf.Struct result = 1;
}

enum NavigationServiceMode {
  NAVIGATION_SERVICE_MODE_UNSPECIFIED = 0;
  NAVIGATION_SERVICE_MODE_MANUAL = 1;
  NAVIGATION_SERVICE_MODE_WAYPOINT = 2;
}

message NavigationServiceModeRequest {

}

message NavigationServiceModeResponse {
  NavigationServiceMode mode = 1;
}

message NavigationServiceSetModeRequest {
  NavigationServiceMode mode = 1;
}

message NavigationServiceSetModeResponse {
}

message NavigationServiceWaypoint {
  string id = 1;
  common.v1.GeoPoint location = 2;
}

message NavigationServiceLocationRequest {

}

message NavigationServiceLocationResponse {
  common.v1.GeoPoint location = 1;
}

message NavigationServiceWaypointsRequest {

}

message NavigationServiceWaypointsResponse {
  repeated NavigationServiceWaypoint waypoints = 1;
}

message NavigationServiceAddWaypointRequest {
  common.v1.GeoPoint location = 1;
}

message NavigationServiceAddWaypointResponse {
}

message NavigationServiceRemoveWaypointRequest {
  string id = 1;
}

message NavigationServiceRemoveWaypointResponse {
}

message InputControllerEvent {
  google.protobuf.Timestamp time = 1;
  // An event type (eg: ButtonPress, ButtonRelease)
  string event = 2;
  // A control, can be a button (eg: ButtonSouth) or an axis (eg: AbsoluteX)
  string control = 3;
  // 0 or 1 for buttons, -1.0 to +1.0 for axes
  double value = 4;
}

message InputControllerStatus {
  repeated InputControllerEvent events = 1;
}
