syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/service/slam/v1";
option java_package = "com.viam.rdk.proto.api.service.slam.v1";

package proto.api.service.slam.v1;

import "google/api/annotations.proto";
import "proto/api/common/v1/common.proto";

// A SlamService declares the gRPC contract for a slam service
service SLAMService {
  // GetPosition returns the current estimated position of the robot with 
  // respect to the "origin" of the map.
  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/slam/{name}/position"
    };
  }

  // GetMap returns the latest map image or point cloud generated by the 
  // SLAM library
  rpc GetMap(GetMapRequest) returns (GetMapResponse) {
    option (google.api.http) = {
        get: "/viam/api/v1/service/slam/{name}/map"
    };
  }
}

message GetPositionRequest {
  // Name of slam service
  string name = 1;
}

message GetPositionResponse {
  // Current position of the robot within the World frame.
  common.v1.PoseInFrame pose = 1;
}

message GetMapRequest {
  // Name of slam service
  string name = 1;
  // Requested MIME type of response (image/jpeg or image/pcd)
  string mime_type = 2;
  // Optional parameter for image/jpeg mime_type, used to project point
  // cloud into a 2D image.
  common.v1.Pose camera_position = 3;
  // Optional parameter for image/jpeg mime_type, defaults to false.    
  // Tells us whether to include the robot position on the 2D image.
  bool include_robot_marker = 4;
}

message GetMapResponse {
  // Image or point cloud of mime_type.
  oneof map {
    common.v1.PointCloudObject point_cloud = 1; 
    bytes image = 2; 
  }
  // Actual MIME type of response (image/jpeg or image/pcd)
  string mime_type = 3;
}
