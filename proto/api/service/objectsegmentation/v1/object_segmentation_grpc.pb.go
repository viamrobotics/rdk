// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectSegmentationServiceClient is the client API for ObjectSegmentationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectSegmentationServiceClient interface {
	// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
	// as well as the 3-vector center of each of the found objects.
	// A specific MIME type can be requested but may not necessarily be the same one returned.
	GetObjectPointClouds(ctx context.Context, in *GetObjectPointCloudsRequest, opts ...grpc.CallOption) (*GetObjectPointCloudsResponse, error)
	// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
	GetSegmenterParameters(ctx context.Context, in *GetSegmenterParametersRequest, opts ...grpc.CallOption) (*GetSegmenterParametersResponse, error)
}

type objectSegmentationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectSegmentationServiceClient(cc grpc.ClientConnInterface) ObjectSegmentationServiceClient {
	return &objectSegmentationServiceClient{cc}
}

func (c *objectSegmentationServiceClient) GetObjectPointClouds(ctx context.Context, in *GetObjectPointCloudsRequest, opts ...grpc.CallOption) (*GetObjectPointCloudsResponse, error) {
	out := new(GetObjectPointCloudsResponse)
	err := c.cc.Invoke(ctx, "/proto.api.service.objectsegmentation.v1.ObjectSegmentationService/GetObjectPointClouds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectSegmentationServiceClient) GetSegmenterParameters(ctx context.Context, in *GetSegmenterParametersRequest, opts ...grpc.CallOption) (*GetSegmenterParametersResponse, error) {
	out := new(GetSegmenterParametersResponse)
	err := c.cc.Invoke(ctx, "/proto.api.service.objectsegmentation.v1.ObjectSegmentationService/GetSegmenterParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectSegmentationServiceServer is the server API for ObjectSegmentationService service.
// All implementations must embed UnimplementedObjectSegmentationServiceServer
// for forward compatibility
type ObjectSegmentationServiceServer interface {
	// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
	// as well as the 3-vector center of each of the found objects.
	// A specific MIME type can be requested but may not necessarily be the same one returned.
	GetObjectPointClouds(context.Context, *GetObjectPointCloudsRequest) (*GetObjectPointCloudsResponse, error)
	// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
	GetSegmenterParameters(context.Context, *GetSegmenterParametersRequest) (*GetSegmenterParametersResponse, error)
	mustEmbedUnimplementedObjectSegmentationServiceServer()
}

// UnimplementedObjectSegmentationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectSegmentationServiceServer struct {
}

func (UnimplementedObjectSegmentationServiceServer) GetObjectPointClouds(context.Context, *GetObjectPointCloudsRequest) (*GetObjectPointCloudsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectPointClouds not implemented")
}
func (UnimplementedObjectSegmentationServiceServer) GetSegmenterParameters(context.Context, *GetSegmenterParametersRequest) (*GetSegmenterParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmenterParameters not implemented")
}
func (UnimplementedObjectSegmentationServiceServer) mustEmbedUnimplementedObjectSegmentationServiceServer() {
}

// UnsafeObjectSegmentationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectSegmentationServiceServer will
// result in compilation errors.
type UnsafeObjectSegmentationServiceServer interface {
	mustEmbedUnimplementedObjectSegmentationServiceServer()
}

func RegisterObjectSegmentationServiceServer(s grpc.ServiceRegistrar, srv ObjectSegmentationServiceServer) {
	s.RegisterService(&ObjectSegmentationService_ServiceDesc, srv)
}

func _ObjectSegmentationService_GetObjectPointClouds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectPointCloudsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectSegmentationServiceServer).GetObjectPointClouds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.service.objectsegmentation.v1.ObjectSegmentationService/GetObjectPointClouds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectSegmentationServiceServer).GetObjectPointClouds(ctx, req.(*GetObjectPointCloudsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectSegmentationService_GetSegmenterParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmenterParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectSegmentationServiceServer).GetSegmenterParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.service.objectsegmentation.v1.ObjectSegmentationService/GetSegmenterParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectSegmentationServiceServer).GetSegmenterParameters(ctx, req.(*GetSegmenterParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectSegmentationService_ServiceDesc is the grpc.ServiceDesc for ObjectSegmentationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectSegmentationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.service.objectsegmentation.v1.ObjectSegmentationService",
	HandlerType: (*ObjectSegmentationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjectPointClouds",
			Handler:    _ObjectSegmentationService_GetObjectPointClouds_Handler,
		},
		{
			MethodName: "GetSegmenterParameters",
			Handler:    _ObjectSegmentationService_GetSegmenterParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/service/objectsegmentation/v1/object_segmentation.proto",
}
