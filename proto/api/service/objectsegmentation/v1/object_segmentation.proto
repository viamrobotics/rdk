syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/service/objectsegmentation/v1";
option java_package = "com.viam.rdk.proto.api.service.objectsegmentation.v1";

package proto.api.service.objectsegmentation.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "proto/api/common/v1/common.proto";

// A ObjectSegmentationService declares the gRPC contract for an object segmentation service
service ObjectSegmentationService {

  // GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
  // as well as the 3-vector center of each of the found objects.
  // A specific MIME type can be requested but may not necessarily be the same one returned.
  rpc GetObjectPointClouds(GetObjectPointCloudsRequest) returns (GetObjectPointCloudsResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/object_segmentation/object_point_clouds"
    };
  }
  // GetSegmenterParameters returns the parameter fields needed for the given segmenter.
  rpc GetSegmenterParameters(GetSegmenterParametersRequest) returns (GetSegmenterParametersResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/object_segmentation/segmenter_parameters"
    };
  }
  // GetSegmenters returns the list of segmenters in the registry.
  rpc GetSegmenters(GetSegmentersRequest) returns (GetSegmentersResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/object_segmentation/segmenters"
    };
  }
}

message GetObjectPointCloudsRequest {
  // Name of a camera
  string camera_name = 1;
  // Name of the segmentation algorithm
  string segmenter_name = 2;
  // Requested MIME type of response
  string mime_type = 3;
  // parameters for the chosen segmenter
  google.protobuf.Struct parameters = 4;
}

message GetObjectPointCloudsResponse {
  // Actual MIME type of response
  string mime_type = 1;
  // List of objects in the scene
  repeated common.v1.PointCloudObject objects = 2;
}

message GetSegmenterParametersRequest {
  // Name of the segmentation algo
  string segmenter_name = 1;
}

message TypedParameter {
   string name = 1;
   string type = 2;
}

message GetSegmenterParametersResponse {
  // parameter names of the segmenter in the request
  repeated TypedParameter parameters = 1;
}

message GetSegmentersRequest {}

message GetSegmentersResponse {
  // segmenters in the registry
  repeated string segmenters = 1;
}
