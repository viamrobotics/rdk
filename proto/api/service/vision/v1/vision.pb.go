// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: proto/api/service/vision/v1/vision.proto

package v1

import (
	v1 "go.viam.com/rdk/proto/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDetectorNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDetectorNamesRequest) Reset() {
	*x = GetDetectorNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectorNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectorNamesRequest) ProtoMessage() {}

func (x *GetDetectorNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectorNamesRequest.ProtoReflect.Descriptor instead.
func (*GetDetectorNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{0}
}

func (x *GetDetectorNamesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDetectorNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// detectors in the registry
	DetectorNames []string `protobuf:"bytes,1,rep,name=detector_names,json=detectorNames,proto3" json:"detector_names,omitempty"`
}

func (x *GetDetectorNamesResponse) Reset() {
	*x = GetDetectorNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectorNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectorNamesResponse) ProtoMessage() {}

func (x *GetDetectorNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectorNamesResponse.ProtoReflect.Descriptor instead.
func (*GetDetectorNamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{1}
}

func (x *GetDetectorNamesResponse) GetDetectorNames() []string {
	if x != nil {
		return x.DetectorNames
	}
	return nil
}

type AddDetectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DetectorName       string           `protobuf:"bytes,2,opt,name=detector_name,json=detectorName,proto3" json:"detector_name,omitempty"`
	DetectorModelType  string           `protobuf:"bytes,3,opt,name=detector_model_type,json=detectorModelType,proto3" json:"detector_model_type,omitempty"`
	DetectorParameters *structpb.Struct `protobuf:"bytes,4,opt,name=detector_parameters,json=detectorParameters,proto3" json:"detector_parameters,omitempty"`
}

func (x *AddDetectorRequest) Reset() {
	*x = AddDetectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDetectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDetectorRequest) ProtoMessage() {}

func (x *AddDetectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDetectorRequest.ProtoReflect.Descriptor instead.
func (*AddDetectorRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{2}
}

func (x *AddDetectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDetectorRequest) GetDetectorName() string {
	if x != nil {
		return x.DetectorName
	}
	return ""
}

func (x *AddDetectorRequest) GetDetectorModelType() string {
	if x != nil {
		return x.DetectorModelType
	}
	return ""
}

func (x *AddDetectorRequest) GetDetectorParameters() *structpb.Struct {
	if x != nil {
		return x.DetectorParameters
	}
	return nil
}

type AddDetectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDetectorResponse) Reset() {
	*x = AddDetectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDetectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDetectorResponse) ProtoMessage() {}

func (x *AddDetectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDetectorResponse.ProtoReflect.Descriptor instead.
func (*AddDetectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{3}
}

type RemoveDetectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name of detector in registry
	DetectorName string `protobuf:"bytes,2,opt,name=detector_name,json=detectorName,proto3" json:"detector_name,omitempty"`
}

func (x *RemoveDetectorRequest) Reset() {
	*x = RemoveDetectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDetectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDetectorRequest) ProtoMessage() {}

func (x *RemoveDetectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDetectorRequest.ProtoReflect.Descriptor instead.
func (*RemoveDetectorRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveDetectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveDetectorRequest) GetDetectorName() string {
	if x != nil {
		return x.DetectorName
	}
	return ""
}

type RemoveDetectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDetectorResponse) Reset() {
	*x = RemoveDetectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDetectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDetectorResponse) ProtoMessage() {}

func (x *RemoveDetectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDetectorResponse.ProtoReflect.Descriptor instead.
func (*RemoveDetectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{5}
}

type GetDetectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the image, encoded as bytes
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// the width of the image
	Width int64 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// the height of the image
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// the actual MIME type of image
	MimeType string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// name of the registered detector to use
	DetectorName string `protobuf:"bytes,6,opt,name=detector_name,json=detectorName,proto3" json:"detector_name,omitempty"`
}

func (x *GetDetectionsRequest) Reset() {
	*x = GetDetectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectionsRequest) ProtoMessage() {}

func (x *GetDetectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectionsRequest.ProtoReflect.Descriptor instead.
func (*GetDetectionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{6}
}

func (x *GetDetectionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetectionsRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GetDetectionsRequest) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetDetectionsRequest) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetDetectionsRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetDetectionsRequest) GetDetectorName() string {
	if x != nil {
		return x.DetectorName
	}
	return ""
}

type GetDetectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the bounding boxes and labels
	Detections []*Detection `protobuf:"bytes,1,rep,name=detections,proto3" json:"detections,omitempty"`
}

func (x *GetDetectionsResponse) Reset() {
	*x = GetDetectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectionsResponse) ProtoMessage() {}

func (x *GetDetectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectionsResponse.ProtoReflect.Descriptor instead.
func (*GetDetectionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{7}
}

func (x *GetDetectionsResponse) GetDetections() []*Detection {
	if x != nil {
		return x.Detections
	}
	return nil
}

type GetDetectionsFromCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name of camera source to use as input
	CameraName string `protobuf:"bytes,2,opt,name=camera_name,json=cameraName,proto3" json:"camera_name,omitempty"`
	// name of the registered detector to use
	DetectorName string `protobuf:"bytes,3,opt,name=detector_name,json=detectorName,proto3" json:"detector_name,omitempty"`
}

func (x *GetDetectionsFromCameraRequest) Reset() {
	*x = GetDetectionsFromCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectionsFromCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectionsFromCameraRequest) ProtoMessage() {}

func (x *GetDetectionsFromCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectionsFromCameraRequest.ProtoReflect.Descriptor instead.
func (*GetDetectionsFromCameraRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{8}
}

func (x *GetDetectionsFromCameraRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetectionsFromCameraRequest) GetCameraName() string {
	if x != nil {
		return x.CameraName
	}
	return ""
}

func (x *GetDetectionsFromCameraRequest) GetDetectorName() string {
	if x != nil {
		return x.DetectorName
	}
	return ""
}

type GetDetectionsFromCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the bounding boxes and labels
	Detections []*Detection `protobuf:"bytes,1,rep,name=detections,proto3" json:"detections,omitempty"`
}

func (x *GetDetectionsFromCameraResponse) Reset() {
	*x = GetDetectionsFromCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetectionsFromCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetectionsFromCameraResponse) ProtoMessage() {}

func (x *GetDetectionsFromCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetectionsFromCameraResponse.ProtoReflect.Descriptor instead.
func (*GetDetectionsFromCameraResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{9}
}

func (x *GetDetectionsFromCameraResponse) GetDetections() []*Detection {
	if x != nil {
		return x.Detections
	}
	return nil
}

type Detection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the four corners of the box
	XMin *int64 `protobuf:"varint,1,opt,name=x_min,json=xMin,proto3,oneof" json:"x_min,omitempty"`
	YMin *int64 `protobuf:"varint,2,opt,name=y_min,json=yMin,proto3,oneof" json:"y_min,omitempty"`
	XMax *int64 `protobuf:"varint,3,opt,name=x_max,json=xMax,proto3,oneof" json:"x_max,omitempty"`
	YMax *int64 `protobuf:"varint,4,opt,name=y_max,json=yMax,proto3,oneof" json:"y_max,omitempty"`
	// the confidence of the detection
	Confidence float64 `protobuf:"fixed64,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// label associated with the detected object
	ClassName string `protobuf:"bytes,6,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (x *Detection) Reset() {
	*x = Detection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection) ProtoMessage() {}

func (x *Detection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection.ProtoReflect.Descriptor instead.
func (*Detection) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{10}
}

func (x *Detection) GetXMin() int64 {
	if x != nil && x.XMin != nil {
		return *x.XMin
	}
	return 0
}

func (x *Detection) GetYMin() int64 {
	if x != nil && x.YMin != nil {
		return *x.YMin
	}
	return 0
}

func (x *Detection) GetXMax() int64 {
	if x != nil && x.XMax != nil {
		return *x.XMax
	}
	return 0
}

func (x *Detection) GetYMax() int64 {
	if x != nil && x.YMax != nil {
		return *x.YMax
	}
	return 0
}

func (x *Detection) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Detection) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

type GetClassifierNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetClassifierNamesRequest) Reset() {
	*x = GetClassifierNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassifierNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassifierNamesRequest) ProtoMessage() {}

func (x *GetClassifierNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassifierNamesRequest.ProtoReflect.Descriptor instead.
func (*GetClassifierNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{11}
}

func (x *GetClassifierNamesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetClassifierNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifierNames []string `protobuf:"bytes,1,rep,name=classifier_names,json=classifierNames,proto3" json:"classifier_names,omitempty"`
}

func (x *GetClassifierNamesResponse) Reset() {
	*x = GetClassifierNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassifierNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassifierNamesResponse) ProtoMessage() {}

func (x *GetClassifierNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassifierNamesResponse.ProtoReflect.Descriptor instead.
func (*GetClassifierNamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{12}
}

func (x *GetClassifierNamesResponse) GetClassifierNames() []string {
	if x != nil {
		return x.ClassifierNames
	}
	return nil
}

type AddClassifierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name of classifier to add to registry
	ClassifierName string `protobuf:"bytes,2,opt,name=classifier_name,json=classifierName,proto3" json:"classifier_name,omitempty"`
	// the type of classifier
	ClassifierModelType string `protobuf:"bytes,3,opt,name=classifier_model_type,json=classifierModelType,proto3" json:"classifier_model_type,omitempty"`
	// additional parameters
	ClassifierParameters *structpb.Struct `protobuf:"bytes,4,opt,name=classifier_parameters,json=classifierParameters,proto3" json:"classifier_parameters,omitempty"`
}

func (x *AddClassifierRequest) Reset() {
	*x = AddClassifierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClassifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClassifierRequest) ProtoMessage() {}

func (x *AddClassifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClassifierRequest.ProtoReflect.Descriptor instead.
func (*AddClassifierRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{13}
}

func (x *AddClassifierRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddClassifierRequest) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *AddClassifierRequest) GetClassifierModelType() string {
	if x != nil {
		return x.ClassifierModelType
	}
	return ""
}

func (x *AddClassifierRequest) GetClassifierParameters() *structpb.Struct {
	if x != nil {
		return x.ClassifierParameters
	}
	return nil
}

type AddClassifierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddClassifierResponse) Reset() {
	*x = AddClassifierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClassifierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClassifierResponse) ProtoMessage() {}

func (x *AddClassifierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClassifierResponse.ProtoReflect.Descriptor instead.
func (*AddClassifierResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{14}
}

type RemoveClassifierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name of the classifier in registry
	ClassifierName string `protobuf:"bytes,2,opt,name=classifier_name,json=classifierName,proto3" json:"classifier_name,omitempty"`
}

func (x *RemoveClassifierRequest) Reset() {
	*x = RemoveClassifierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClassifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClassifierRequest) ProtoMessage() {}

func (x *RemoveClassifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClassifierRequest.ProtoReflect.Descriptor instead.
func (*RemoveClassifierRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveClassifierRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveClassifierRequest) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

type RemoveClassifierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveClassifierResponse) Reset() {
	*x = RemoveClassifierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClassifierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClassifierResponse) ProtoMessage() {}

func (x *RemoveClassifierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClassifierResponse.ProtoReflect.Descriptor instead.
func (*RemoveClassifierResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{16}
}

type GetClassificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the image encoded as bytes
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// the width of the image
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// the height of the image
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// the actual MIME type of image
	MimeType string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// the name of the registered classifier
	ClassifierName string `protobuf:"bytes,6,opt,name=classifier_name,json=classifierName,proto3" json:"classifier_name,omitempty"`
	// the number of classifications desired
	N int32 `protobuf:"varint,7,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *GetClassificationsRequest) Reset() {
	*x = GetClassificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassificationsRequest) ProtoMessage() {}

func (x *GetClassificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassificationsRequest.ProtoReflect.Descriptor instead.
func (*GetClassificationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{17}
}

func (x *GetClassificationsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetClassificationsRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GetClassificationsRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetClassificationsRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetClassificationsRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetClassificationsRequest) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *GetClassificationsRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type GetClassificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifications []*Classification `protobuf:"bytes,1,rep,name=classifications,proto3" json:"classifications,omitempty"`
}

func (x *GetClassificationsResponse) Reset() {
	*x = GetClassificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassificationsResponse) ProtoMessage() {}

func (x *GetClassificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassificationsResponse.ProtoReflect.Descriptor instead.
func (*GetClassificationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{18}
}

func (x *GetClassificationsResponse) GetClassifications() []*Classification {
	if x != nil {
		return x.Classifications
	}
	return nil
}

type GetClassificationsFromCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the vision service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the image encoded as bytes
	CameraName string `protobuf:"bytes,2,opt,name=camera_name,json=cameraName,proto3" json:"camera_name,omitempty"`
	// the name of the registered classifier
	ClassifierName string `protobuf:"bytes,3,opt,name=classifier_name,json=classifierName,proto3" json:"classifier_name,omitempty"`
	// the number of classifications desired
	N int32 `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *GetClassificationsFromCameraRequest) Reset() {
	*x = GetClassificationsFromCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassificationsFromCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassificationsFromCameraRequest) ProtoMessage() {}

func (x *GetClassificationsFromCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassificationsFromCameraRequest.ProtoReflect.Descriptor instead.
func (*GetClassificationsFromCameraRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{19}
}

func (x *GetClassificationsFromCameraRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetClassificationsFromCameraRequest) GetCameraName() string {
	if x != nil {
		return x.CameraName
	}
	return ""
}

func (x *GetClassificationsFromCameraRequest) GetClassifierName() string {
	if x != nil {
		return x.ClassifierName
	}
	return ""
}

func (x *GetClassificationsFromCameraRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type GetClassificationsFromCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classifications []*Classification `protobuf:"bytes,1,rep,name=classifications,proto3" json:"classifications,omitempty"`
}

func (x *GetClassificationsFromCameraResponse) Reset() {
	*x = GetClassificationsFromCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassificationsFromCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassificationsFromCameraResponse) ProtoMessage() {}

func (x *GetClassificationsFromCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassificationsFromCameraResponse.ProtoReflect.Descriptor instead.
func (*GetClassificationsFromCameraResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{20}
}

func (x *GetClassificationsFromCameraResponse) GetClassifications() []*Classification {
	if x != nil {
		return x.Classifications
	}
	return nil
}

// the general form of the output from a classifier
type Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the class name
	ClassName string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// the confidence score of the classification
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *Classification) Reset() {
	*x = Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classification) ProtoMessage() {}

func (x *Classification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classification.ProtoReflect.Descriptor instead.
func (*Classification) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{21}
}

func (x *Classification) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Classification) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type GetSegmenterNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSegmenterNamesRequest) Reset() {
	*x = GetSegmenterNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmenterNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmenterNamesRequest) ProtoMessage() {}

func (x *GetSegmenterNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmenterNamesRequest.ProtoReflect.Descriptor instead.
func (*GetSegmenterNamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{22}
}

func (x *GetSegmenterNamesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSegmenterNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// segmenters in the registry
	SegmenterNames []string `protobuf:"bytes,1,rep,name=segmenter_names,json=segmenterNames,proto3" json:"segmenter_names,omitempty"`
}

func (x *GetSegmenterNamesResponse) Reset() {
	*x = GetSegmenterNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmenterNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmenterNamesResponse) ProtoMessage() {}

func (x *GetSegmenterNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmenterNamesResponse.ProtoReflect.Descriptor instead.
func (*GetSegmenterNamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{23}
}

func (x *GetSegmenterNamesResponse) GetSegmenterNames() []string {
	if x != nil {
		return x.SegmenterNames
	}
	return nil
}

type GetSegmenterParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the segmentation algo
	SegmenterName string `protobuf:"bytes,2,opt,name=segmenter_name,json=segmenterName,proto3" json:"segmenter_name,omitempty"`
}

func (x *GetSegmenterParametersRequest) Reset() {
	*x = GetSegmenterParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmenterParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmenterParametersRequest) ProtoMessage() {}

func (x *GetSegmenterParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmenterParametersRequest.ProtoReflect.Descriptor instead.
func (*GetSegmenterParametersRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{24}
}

func (x *GetSegmenterParametersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSegmenterParametersRequest) GetSegmenterName() string {
	if x != nil {
		return x.SegmenterName
	}
	return ""
}

type TypedParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TypedParameter) Reset() {
	*x = TypedParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedParameter) ProtoMessage() {}

func (x *TypedParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedParameter.ProtoReflect.Descriptor instead.
func (*TypedParameter) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{25}
}

func (x *TypedParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypedParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetSegmenterParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameter names of the segmenter in the request
	SegmenterParameters []*TypedParameter `protobuf:"bytes,1,rep,name=segmenter_parameters,json=segmenterParameters,proto3" json:"segmenter_parameters,omitempty"`
}

func (x *GetSegmenterParametersResponse) Reset() {
	*x = GetSegmenterParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmenterParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmenterParametersResponse) ProtoMessage() {}

func (x *GetSegmenterParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmenterParametersResponse.ProtoReflect.Descriptor instead.
func (*GetSegmenterParametersResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{26}
}

func (x *GetSegmenterParametersResponse) GetSegmenterParameters() []*TypedParameter {
	if x != nil {
		return x.SegmenterParameters
	}
	return nil
}

type GetObjectPointCloudsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of a camera
	CameraName string `protobuf:"bytes,2,opt,name=camera_name,json=cameraName,proto3" json:"camera_name,omitempty"`
	// Name of the segmentation algorithm
	SegmenterName string `protobuf:"bytes,3,opt,name=segmenter_name,json=segmenterName,proto3" json:"segmenter_name,omitempty"`
	// Requested MIME type of response
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// parameters for the chosen segmenter
	Parameters *structpb.Struct `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *GetObjectPointCloudsRequest) Reset() {
	*x = GetObjectPointCloudsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectPointCloudsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectPointCloudsRequest) ProtoMessage() {}

func (x *GetObjectPointCloudsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectPointCloudsRequest.ProtoReflect.Descriptor instead.
func (*GetObjectPointCloudsRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{27}
}

func (x *GetObjectPointCloudsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetObjectPointCloudsRequest) GetCameraName() string {
	if x != nil {
		return x.CameraName
	}
	return ""
}

func (x *GetObjectPointCloudsRequest) GetSegmenterName() string {
	if x != nil {
		return x.SegmenterName
	}
	return ""
}

func (x *GetObjectPointCloudsRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetObjectPointCloudsRequest) GetParameters() *structpb.Struct {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type GetObjectPointCloudsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual MIME type of response
	MimeType string `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// List of objects in the scene
	Objects []*v1.PointCloudObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *GetObjectPointCloudsResponse) Reset() {
	*x = GetObjectPointCloudsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectPointCloudsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectPointCloudsResponse) ProtoMessage() {}

func (x *GetObjectPointCloudsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_service_vision_v1_vision_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectPointCloudsResponse.ProtoReflect.Descriptor instead.
func (*GetObjectPointCloudsResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_service_vision_v1_vision_proto_rawDescGZIP(), []int{28}
}

func (x *GetObjectPointCloudsResponse) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetObjectPointCloudsResponse) GetObjects() []*v1.PointCloudObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

var File_proto_api_service_vision_v1_vision_proto protoreflect.FileDescriptor

var file_proto_api_service_vision_v1_vision_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xda, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x05, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04,
	0x78, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x79, 0x4d, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x04, 0x78, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x79,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x79, 0x4d,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x78, 0x5f, 0x6d,
	0x61, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x2f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x6e, 0x22, 0x73, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x22, 0x7d,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a,
	0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x2e,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x38, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xcf, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0xff, 0x13,
	0x0a, 0x0d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xba, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2f, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0xd2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x3b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22,
	0x34, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xbd,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x34, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xe6,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xd2, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xcb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x42,
	0x57, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x64, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x5a, 0x2b, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_service_vision_v1_vision_proto_rawDescOnce sync.Once
	file_proto_api_service_vision_v1_vision_proto_rawDescData = file_proto_api_service_vision_v1_vision_proto_rawDesc
)

func file_proto_api_service_vision_v1_vision_proto_rawDescGZIP() []byte {
	file_proto_api_service_vision_v1_vision_proto_rawDescOnce.Do(func() {
		file_proto_api_service_vision_v1_vision_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_service_vision_v1_vision_proto_rawDescData)
	})
	return file_proto_api_service_vision_v1_vision_proto_rawDescData
}

var file_proto_api_service_vision_v1_vision_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_proto_api_service_vision_v1_vision_proto_goTypes = []interface{}{
	(*GetDetectorNamesRequest)(nil),              // 0: proto.api.service.vision.v1.GetDetectorNamesRequest
	(*GetDetectorNamesResponse)(nil),             // 1: proto.api.service.vision.v1.GetDetectorNamesResponse
	(*AddDetectorRequest)(nil),                   // 2: proto.api.service.vision.v1.AddDetectorRequest
	(*AddDetectorResponse)(nil),                  // 3: proto.api.service.vision.v1.AddDetectorResponse
	(*RemoveDetectorRequest)(nil),                // 4: proto.api.service.vision.v1.RemoveDetectorRequest
	(*RemoveDetectorResponse)(nil),               // 5: proto.api.service.vision.v1.RemoveDetectorResponse
	(*GetDetectionsRequest)(nil),                 // 6: proto.api.service.vision.v1.GetDetectionsRequest
	(*GetDetectionsResponse)(nil),                // 7: proto.api.service.vision.v1.GetDetectionsResponse
	(*GetDetectionsFromCameraRequest)(nil),       // 8: proto.api.service.vision.v1.GetDetectionsFromCameraRequest
	(*GetDetectionsFromCameraResponse)(nil),      // 9: proto.api.service.vision.v1.GetDetectionsFromCameraResponse
	(*Detection)(nil),                            // 10: proto.api.service.vision.v1.Detection
	(*GetClassifierNamesRequest)(nil),            // 11: proto.api.service.vision.v1.GetClassifierNamesRequest
	(*GetClassifierNamesResponse)(nil),           // 12: proto.api.service.vision.v1.GetClassifierNamesResponse
	(*AddClassifierRequest)(nil),                 // 13: proto.api.service.vision.v1.AddClassifierRequest
	(*AddClassifierResponse)(nil),                // 14: proto.api.service.vision.v1.AddClassifierResponse
	(*RemoveClassifierRequest)(nil),              // 15: proto.api.service.vision.v1.RemoveClassifierRequest
	(*RemoveClassifierResponse)(nil),             // 16: proto.api.service.vision.v1.RemoveClassifierResponse
	(*GetClassificationsRequest)(nil),            // 17: proto.api.service.vision.v1.GetClassificationsRequest
	(*GetClassificationsResponse)(nil),           // 18: proto.api.service.vision.v1.GetClassificationsResponse
	(*GetClassificationsFromCameraRequest)(nil),  // 19: proto.api.service.vision.v1.GetClassificationsFromCameraRequest
	(*GetClassificationsFromCameraResponse)(nil), // 20: proto.api.service.vision.v1.GetClassificationsFromCameraResponse
	(*Classification)(nil),                       // 21: proto.api.service.vision.v1.Classification
	(*GetSegmenterNamesRequest)(nil),             // 22: proto.api.service.vision.v1.GetSegmenterNamesRequest
	(*GetSegmenterNamesResponse)(nil),            // 23: proto.api.service.vision.v1.GetSegmenterNamesResponse
	(*GetSegmenterParametersRequest)(nil),        // 24: proto.api.service.vision.v1.GetSegmenterParametersRequest
	(*TypedParameter)(nil),                       // 25: proto.api.service.vision.v1.TypedParameter
	(*GetSegmenterParametersResponse)(nil),       // 26: proto.api.service.vision.v1.GetSegmenterParametersResponse
	(*GetObjectPointCloudsRequest)(nil),          // 27: proto.api.service.vision.v1.GetObjectPointCloudsRequest
	(*GetObjectPointCloudsResponse)(nil),         // 28: proto.api.service.vision.v1.GetObjectPointCloudsResponse
	(*structpb.Struct)(nil),                      // 29: google.protobuf.Struct
	(*v1.PointCloudObject)(nil),                  // 30: proto.api.common.v1.PointCloudObject
}
var file_proto_api_service_vision_v1_vision_proto_depIdxs = []int32{
	29, // 0: proto.api.service.vision.v1.AddDetectorRequest.detector_parameters:type_name -> google.protobuf.Struct
	10, // 1: proto.api.service.vision.v1.GetDetectionsResponse.detections:type_name -> proto.api.service.vision.v1.Detection
	10, // 2: proto.api.service.vision.v1.GetDetectionsFromCameraResponse.detections:type_name -> proto.api.service.vision.v1.Detection
	29, // 3: proto.api.service.vision.v1.AddClassifierRequest.classifier_parameters:type_name -> google.protobuf.Struct
	21, // 4: proto.api.service.vision.v1.GetClassificationsResponse.classifications:type_name -> proto.api.service.vision.v1.Classification
	21, // 5: proto.api.service.vision.v1.GetClassificationsFromCameraResponse.classifications:type_name -> proto.api.service.vision.v1.Classification
	25, // 6: proto.api.service.vision.v1.GetSegmenterParametersResponse.segmenter_parameters:type_name -> proto.api.service.vision.v1.TypedParameter
	29, // 7: proto.api.service.vision.v1.GetObjectPointCloudsRequest.parameters:type_name -> google.protobuf.Struct
	30, // 8: proto.api.service.vision.v1.GetObjectPointCloudsResponse.objects:type_name -> proto.api.common.v1.PointCloudObject
	0,  // 9: proto.api.service.vision.v1.VisionService.GetDetectorNames:input_type -> proto.api.service.vision.v1.GetDetectorNamesRequest
	2,  // 10: proto.api.service.vision.v1.VisionService.AddDetector:input_type -> proto.api.service.vision.v1.AddDetectorRequest
	4,  // 11: proto.api.service.vision.v1.VisionService.RemoveDetector:input_type -> proto.api.service.vision.v1.RemoveDetectorRequest
	8,  // 12: proto.api.service.vision.v1.VisionService.GetDetectionsFromCamera:input_type -> proto.api.service.vision.v1.GetDetectionsFromCameraRequest
	6,  // 13: proto.api.service.vision.v1.VisionService.GetDetections:input_type -> proto.api.service.vision.v1.GetDetectionsRequest
	11, // 14: proto.api.service.vision.v1.VisionService.GetClassifierNames:input_type -> proto.api.service.vision.v1.GetClassifierNamesRequest
	13, // 15: proto.api.service.vision.v1.VisionService.AddClassifier:input_type -> proto.api.service.vision.v1.AddClassifierRequest
	15, // 16: proto.api.service.vision.v1.VisionService.RemoveClassifier:input_type -> proto.api.service.vision.v1.RemoveClassifierRequest
	19, // 17: proto.api.service.vision.v1.VisionService.GetClassificationsFromCamera:input_type -> proto.api.service.vision.v1.GetClassificationsFromCameraRequest
	17, // 18: proto.api.service.vision.v1.VisionService.GetClassifications:input_type -> proto.api.service.vision.v1.GetClassificationsRequest
	22, // 19: proto.api.service.vision.v1.VisionService.GetSegmenterNames:input_type -> proto.api.service.vision.v1.GetSegmenterNamesRequest
	24, // 20: proto.api.service.vision.v1.VisionService.GetSegmenterParameters:input_type -> proto.api.service.vision.v1.GetSegmenterParametersRequest
	27, // 21: proto.api.service.vision.v1.VisionService.GetObjectPointClouds:input_type -> proto.api.service.vision.v1.GetObjectPointCloudsRequest
	1,  // 22: proto.api.service.vision.v1.VisionService.GetDetectorNames:output_type -> proto.api.service.vision.v1.GetDetectorNamesResponse
	3,  // 23: proto.api.service.vision.v1.VisionService.AddDetector:output_type -> proto.api.service.vision.v1.AddDetectorResponse
	5,  // 24: proto.api.service.vision.v1.VisionService.RemoveDetector:output_type -> proto.api.service.vision.v1.RemoveDetectorResponse
	9,  // 25: proto.api.service.vision.v1.VisionService.GetDetectionsFromCamera:output_type -> proto.api.service.vision.v1.GetDetectionsFromCameraResponse
	7,  // 26: proto.api.service.vision.v1.VisionService.GetDetections:output_type -> proto.api.service.vision.v1.GetDetectionsResponse
	12, // 27: proto.api.service.vision.v1.VisionService.GetClassifierNames:output_type -> proto.api.service.vision.v1.GetClassifierNamesResponse
	14, // 28: proto.api.service.vision.v1.VisionService.AddClassifier:output_type -> proto.api.service.vision.v1.AddClassifierResponse
	16, // 29: proto.api.service.vision.v1.VisionService.RemoveClassifier:output_type -> proto.api.service.vision.v1.RemoveClassifierResponse
	20, // 30: proto.api.service.vision.v1.VisionService.GetClassificationsFromCamera:output_type -> proto.api.service.vision.v1.GetClassificationsFromCameraResponse
	18, // 31: proto.api.service.vision.v1.VisionService.GetClassifications:output_type -> proto.api.service.vision.v1.GetClassificationsResponse
	23, // 32: proto.api.service.vision.v1.VisionService.GetSegmenterNames:output_type -> proto.api.service.vision.v1.GetSegmenterNamesResponse
	26, // 33: proto.api.service.vision.v1.VisionService.GetSegmenterParameters:output_type -> proto.api.service.vision.v1.GetSegmenterParametersResponse
	28, // 34: proto.api.service.vision.v1.VisionService.GetObjectPointClouds:output_type -> proto.api.service.vision.v1.GetObjectPointCloudsResponse
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_api_service_vision_v1_vision_proto_init() }
func file_proto_api_service_vision_v1_vision_proto_init() {
	if File_proto_api_service_vision_v1_vision_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_service_vision_v1_vision_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectorNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectorNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDetectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDetectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDetectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDetectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectionsFromCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDetectionsFromCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassifierNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassifierNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClassifierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClassifierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClassifierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClassifierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassificationsFromCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassificationsFromCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmenterNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmenterNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmenterParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmenterParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectPointCloudsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_service_vision_v1_vision_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectPointCloudsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_api_service_vision_v1_vision_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_service_vision_v1_vision_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_api_service_vision_v1_vision_proto_goTypes,
		DependencyIndexes: file_proto_api_service_vision_v1_vision_proto_depIdxs,
		MessageInfos:      file_proto_api_service_vision_v1_vision_proto_msgTypes,
	}.Build()
	File_proto_api_service_vision_v1_vision_proto = out.File
	file_proto_api_service_vision_v1_vision_proto_rawDesc = nil
	file_proto_api_service_vision_v1_vision_proto_goTypes = nil
	file_proto_api_service_vision_v1_vision_proto_depIdxs = nil
}
