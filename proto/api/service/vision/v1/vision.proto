syntax = "proto3";

package proto.api.service.vision.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "proto/api/common/v1/common.proto";

option go_package = "go.viam.com/rdk/proto/api/service/vision/v1";
option java_package = "com.viam.rdk.proto.api.service.vision.v1";

// VisionService declares the gRPC contract for a vision service
service VisionService {
  // GetModelParameterSchema takes the model name and returns the parameters needed to add one to the vision registry.
  rpc GetModelParameterSchema(GetModelParameterSchemaRequest) returns (GetModelParameterSchemaResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/vision/{name}/model_parameter_schema"
    };
  }
  // Detection methods


  // GetDetectorNames returns the list of detectors in the registry.
  rpc GetDetectorNames(GetDetectorNamesRequest) returns (GetDetectorNamesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/vision/{name}/detector_names"
    };
  }
  // AddDetector adds a new detector to the registry.
  rpc AddDetector(AddDetectorRequest) returns (AddDetectorResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/add_detector"
    };
  }

  // RemoveDetector removes a detector from the registry.
  rpc RemoveDetector(RemoveDetectorRequest) returns (RemoveDetectorResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/remove_detector"
    };
  }

  // GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
  rpc GetDetectionsFromCamera(GetDetectionsFromCameraRequest) returns (GetDetectionsFromCameraResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/camera_detections"
    };
  }

  // GetDetections will return a list of detections in the next image given the image bytes and a detector
  rpc GetDetections(GetDetectionsRequest) returns (GetDetectionsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/detections"
    };
  }

  // Classification methods

  // GetClassifierNames returns the list of classifiers in the registry.
  rpc GetClassifierNames(GetClassifierNamesRequest) returns (GetClassifierNamesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/vision/{name}/classifier_names"
    };
  }

  // AddClassifier adds a new classifier to the registry.
  rpc AddClassifier(AddClassifierRequest) returns (AddClassifierResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/add_classifier"
    };
  }

  // RemoveClassifier adds a new classifier to the registry.
  rpc RemoveClassifier(RemoveClassifierRequest) returns (RemoveClassifierResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/remove_classifier"
    };
  }

  // GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
  rpc GetClassificationsFromCamera(GetClassificationsFromCameraRequest) returns (GetClassificationsFromCameraResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/camera_classifications"
    };
  }

  // GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
  rpc GetClassifications(GetClassificationsRequest) returns (GetClassificationsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/classifications"
    };
  }

  // Segmentation methods

  // GetSegmenterNames returns the list of segmenters in the registry.
  rpc GetSegmenterNames(GetSegmenterNamesRequest) returns (GetSegmenterNamesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/service/vision/{name}/segmenter_names"
    };
  }

  // AddSegmenter adds a new segmenter to the registry.
  rpc AddSegmenter(AddSegmenterRequest) returns (AddSegmenterResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/add_segmenter"
    };
  }

  // RemoveSegmenter removes a segmenter from the registry.
  rpc RemoveSegmenter(RemoveSegmenterRequest) returns (RemoveSegmenterResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/remove_segmenter"
    };
  }

  // GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
  // as well as the 3-vector center of each of the found objects.
  // A specific MIME type can be requested but may not necessarily be the same one returned.
  rpc GetObjectPointClouds(GetObjectPointCloudsRequest) returns (GetObjectPointCloudsResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/service/vision/{name}/object_point_clouds"
    };
  }
}

message GetModelParameterSchemaRequest {
  // name of the vision service
  string name = 1;
  // name of the type of vision model
  string model_type = 2;
}

message GetModelParameterSchemaResponse {
  // the parameters as JSON bytes of a jsonschema.Schema
  bytes model_parameter_schema = 1;
}

message GetDetectorNamesRequest {
  string name = 1;
}

message GetDetectorNamesResponse {
  // detectors in the registry
  repeated string detector_names = 1;
}

message AddDetectorRequest {
  string name = 1;
  string detector_name = 2;
  string detector_model_type = 3;
  google.protobuf.Struct detector_parameters = 4;
}

message AddDetectorResponse {}

message RemoveDetectorRequest {
  // name of the vision service
  string name = 1;
  // name of detector in registry
  string detector_name = 2;
}

message RemoveDetectorResponse {}

message GetDetectionsRequest {
  // name of the vision service
  string name = 1;
  // the image, encoded as bytes
  bytes image = 2;
  // the width of the image
  int64 width = 3;
  // the height of the image
  int64 height = 4;
  // the actual MIME type of image
  string mime_type = 5;
  // name of the registered detector to use
  string detector_name = 6;
}

message GetDetectionsResponse {
  // the bounding boxes and labels
  repeated Detection detections = 1;
}

message GetDetectionsFromCameraRequest {
  // name of the vision service
  string name = 1;
  // name of camera source to use as input
  string camera_name = 2;
  // name of the registered detector to use
  string detector_name = 3;
}

message GetDetectionsFromCameraResponse {
  // the bounding boxes and labels
  repeated Detection detections = 1;
}

message Detection {
  // the four corners of the box
  optional int64 x_min = 1;
  optional int64 y_min = 2;
  optional int64 x_max = 3;
  optional int64 y_max = 4;
  // the confidence of the detection
  double confidence = 5;
  // label associated with the detected object
  string class_name = 6;
}

message GetClassifierNamesRequest {
  // name of the vision service
  string name = 1;
}

message GetClassifierNamesResponse {
  repeated string classifier_names = 1;
}

message AddClassifierRequest {
  // name of the vision service
  string name = 1;
  // name of classifier to add to registry
  string classifier_name = 2;
  // the type of classifier
  string classifier_model_type = 3;
  // additional parameters
  google.protobuf.Struct classifier_parameters = 4;
}

message AddClassifierResponse {}

message RemoveClassifierRequest {
  // name of the vision service
  string name = 1;
  // name of the classifier in registry
  string classifier_name = 2;
}

message RemoveClassifierResponse {}

message GetClassificationsRequest {
  // name of the vision service
  string name = 1;
  // the image encoded as bytes
  bytes image = 2;
  // the width of the image
  int32 width = 3;
  // the height of the image
  int32 height = 4;
  // the actual MIME type of image
  string mime_type = 5;
  // the name of the registered classifier
  string classifier_name = 6;
  // the number of classifications desired
  int32 n = 7;
}

message GetClassificationsResponse {
  repeated Classification classifications = 1;
}

message GetClassificationsFromCameraRequest {
  // name of the vision service
  string name = 1;
  // the image encoded as bytes
  string camera_name = 2;
  // the name of the registered classifier
  string classifier_name = 3;
  // the number of classifications desired
  int32 n = 4;
}

message GetClassificationsFromCameraResponse {
  repeated Classification classifications = 1;
}

// the general form of the output from a classifier
message Classification {
  // the class name
  string class_name = 1;
  // the confidence score of the classification
  double confidence = 2;
}

message GetSegmenterNamesRequest {
  string name = 1;
}

message GetSegmenterNamesResponse {
  // segmenters in the registry
  repeated string segmenter_names = 1;
}

message AddSegmenterRequest {
  // name of the vision service
  string name = 1;
  // name of the segmenter
  string segmenter_name = 2;
  // name of the segmenter model
  string segmenter_model_type = 3;
  // parameters of the segmenter model
  google.protobuf.Struct segmenter_parameters = 4;
}

message AddSegmenterResponse {}

message RemoveSegmenterRequest {
  // name of the vision service
  string name = 1;
  // name of segmenter in registry
  string segmenter_name = 2;
}

message RemoveSegmenterResponse {}

message GetObjectPointCloudsRequest {
  string name = 1;
  // Name of a camera
  string camera_name = 2;
  // Name of the segmentation algorithm
  string segmenter_name = 3;
  // Requested MIME type of response
  string mime_type = 4;
}

message GetObjectPointCloudsResponse {
  // Actual MIME type of response
  string mime_type = 1;
  // List of objects in the scene
  repeated common.v1.PointCloudObject objects = 2;
}
