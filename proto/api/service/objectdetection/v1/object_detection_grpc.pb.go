// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectDetectionServiceClient is the client API for ObjectDetectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectDetectionServiceClient interface {
	// DetectorNames returns the list of detectors in the registry.
	DetectorNames(ctx context.Context, in *DetectorNamesRequest, opts ...grpc.CallOption) (*DetectorNamesResponse, error)
	// AddDetector adds a new detector to the registry.
	AddDetector(ctx context.Context, in *AddDetectorRequest, opts ...grpc.CallOption) (*AddDetectorResponse, error)
}

type objectDetectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectDetectionServiceClient(cc grpc.ClientConnInterface) ObjectDetectionServiceClient {
	return &objectDetectionServiceClient{cc}
}

func (c *objectDetectionServiceClient) DetectorNames(ctx context.Context, in *DetectorNamesRequest, opts ...grpc.CallOption) (*DetectorNamesResponse, error) {
	out := new(DetectorNamesResponse)
	err := c.cc.Invoke(ctx, "/proto.api.service.objectdetection.v1.ObjectDetectionService/DetectorNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectDetectionServiceClient) AddDetector(ctx context.Context, in *AddDetectorRequest, opts ...grpc.CallOption) (*AddDetectorResponse, error) {
	out := new(AddDetectorResponse)
	err := c.cc.Invoke(ctx, "/proto.api.service.objectdetection.v1.ObjectDetectionService/AddDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectDetectionServiceServer is the server API for ObjectDetectionService service.
// All implementations must embed UnimplementedObjectDetectionServiceServer
// for forward compatibility
type ObjectDetectionServiceServer interface {
	// DetectorNames returns the list of detectors in the registry.
	DetectorNames(context.Context, *DetectorNamesRequest) (*DetectorNamesResponse, error)
	// AddDetector adds a new detector to the registry.
	AddDetector(context.Context, *AddDetectorRequest) (*AddDetectorResponse, error)
	mustEmbedUnimplementedObjectDetectionServiceServer()
}

// UnimplementedObjectDetectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectDetectionServiceServer struct {
}

func (UnimplementedObjectDetectionServiceServer) DetectorNames(context.Context, *DetectorNamesRequest) (*DetectorNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectorNames not implemented")
}
func (UnimplementedObjectDetectionServiceServer) AddDetector(context.Context, *AddDetectorRequest) (*AddDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDetector not implemented")
}
func (UnimplementedObjectDetectionServiceServer) mustEmbedUnimplementedObjectDetectionServiceServer() {
}

// UnsafeObjectDetectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectDetectionServiceServer will
// result in compilation errors.
type UnsafeObjectDetectionServiceServer interface {
	mustEmbedUnimplementedObjectDetectionServiceServer()
}

func RegisterObjectDetectionServiceServer(s grpc.ServiceRegistrar, srv ObjectDetectionServiceServer) {
	s.RegisterService(&ObjectDetectionService_ServiceDesc, srv)
}

func _ObjectDetectionService_DetectorNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectorNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetectionServiceServer).DetectorNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.service.objectdetection.v1.ObjectDetectionService/DetectorNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetectionServiceServer).DetectorNames(ctx, req.(*DetectorNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectDetectionService_AddDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectDetectionServiceServer).AddDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.service.objectdetection.v1.ObjectDetectionService/AddDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectDetectionServiceServer).AddDetector(ctx, req.(*AddDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectDetectionService_ServiceDesc is the grpc.ServiceDesc for ObjectDetectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectDetectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.service.objectdetection.v1.ObjectDetectionService",
	HandlerType: (*ObjectDetectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectorNames",
			Handler:    _ObjectDetectionService_DetectorNames_Handler,
		},
		{
			MethodName: "AddDetector",
			Handler:    _ObjectDetectionService_AddDetector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/service/objectdetection/v1/object_detection.proto",
}
