// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/api/service/datamanager/v1/data_manager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataManagerServiceClient is the client API for DataManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManagerServiceClient interface {
	// Sync performs a sync of the non-synced files for the specified service name,
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type dataManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManagerServiceClient(cc grpc.ClientConnInterface) DataManagerServiceClient {
	return &dataManagerServiceClient{cc}
}

func (c *dataManagerServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/proto.api.service.datamanager.v1.DataManagerService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagerServiceServer is the server API for DataManagerService service.
// All implementations must embed UnimplementedDataManagerServiceServer
// for forward compatibility
type DataManagerServiceServer interface {
	// Sync performs a sync of the non-synced files for the specified service name,
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedDataManagerServiceServer()
}

// UnimplementedDataManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataManagerServiceServer struct {
}

func (UnimplementedDataManagerServiceServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDataManagerServiceServer) mustEmbedUnimplementedDataManagerServiceServer() {}

// UnsafeDataManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManagerServiceServer will
// result in compilation errors.
type UnsafeDataManagerServiceServer interface {
	mustEmbedUnimplementedDataManagerServiceServer()
}

func RegisterDataManagerServiceServer(s grpc.ServiceRegistrar, srv DataManagerServiceServer) {
	s.RegisterService(&DataManagerService_ServiceDesc, srv)
}

func _DataManagerService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.service.datamanager.v1.DataManagerService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManagerService_ServiceDesc is the grpc.ServiceDesc for DataManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.service.datamanager.v1.DataManagerService",
	HandlerType: (*DataManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _DataManagerService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/service/datamanager/v1/data_manager.proto",
}
