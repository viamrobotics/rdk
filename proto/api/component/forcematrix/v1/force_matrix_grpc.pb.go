// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForceMatrixServiceClient is the client API for ForceMatrixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForceMatrixServiceClient interface {
	// ReadMatrix returns the matrix of force readings from the force matrix sensor
	ReadMatrix(ctx context.Context, in *ReadMatrixRequest, opts ...grpc.CallOption) (*ReadMatrixResponse, error)
	// DetectSlip returns whether or not slip is occurring
	DetectSlip(ctx context.Context, in *DetectSlipRequest, opts ...grpc.CallOption) (*DetectSlipResponse, error)
}

type forceMatrixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForceMatrixServiceClient(cc grpc.ClientConnInterface) ForceMatrixServiceClient {
	return &forceMatrixServiceClient{cc}
}

func (c *forceMatrixServiceClient) ReadMatrix(ctx context.Context, in *ReadMatrixRequest, opts ...grpc.CallOption) (*ReadMatrixResponse, error) {
	out := new(ReadMatrixResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.forcematrix.v1.ForceMatrixService/ReadMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forceMatrixServiceClient) DetectSlip(ctx context.Context, in *DetectSlipRequest, opts ...grpc.CallOption) (*DetectSlipResponse, error) {
	out := new(DetectSlipResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.forcematrix.v1.ForceMatrixService/DetectSlip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForceMatrixServiceServer is the server API for ForceMatrixService service.
// All implementations must embed UnimplementedForceMatrixServiceServer
// for forward compatibility
type ForceMatrixServiceServer interface {
	// ReadMatrix returns the matrix of force readings from the force matrix sensor
	ReadMatrix(context.Context, *ReadMatrixRequest) (*ReadMatrixResponse, error)
	// DetectSlip returns whether or not slip is occurring
	DetectSlip(context.Context, *DetectSlipRequest) (*DetectSlipResponse, error)
	mustEmbedUnimplementedForceMatrixServiceServer()
}

// UnimplementedForceMatrixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForceMatrixServiceServer struct {
}

func (UnimplementedForceMatrixServiceServer) ReadMatrix(context.Context, *ReadMatrixRequest) (*ReadMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMatrix not implemented")
}
func (UnimplementedForceMatrixServiceServer) DetectSlip(context.Context, *DetectSlipRequest) (*DetectSlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectSlip not implemented")
}
func (UnimplementedForceMatrixServiceServer) mustEmbedUnimplementedForceMatrixServiceServer() {}

// UnsafeForceMatrixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForceMatrixServiceServer will
// result in compilation errors.
type UnsafeForceMatrixServiceServer interface {
	mustEmbedUnimplementedForceMatrixServiceServer()
}

func RegisterForceMatrixServiceServer(s grpc.ServiceRegistrar, srv ForceMatrixServiceServer) {
	s.RegisterService(&ForceMatrixService_ServiceDesc, srv)
}

func _ForceMatrixService_ReadMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForceMatrixServiceServer).ReadMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.forcematrix.v1.ForceMatrixService/ReadMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForceMatrixServiceServer).ReadMatrix(ctx, req.(*ReadMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForceMatrixService_DetectSlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectSlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForceMatrixServiceServer).DetectSlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.forcematrix.v1.ForceMatrixService/DetectSlip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForceMatrixServiceServer).DetectSlip(ctx, req.(*DetectSlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForceMatrixService_ServiceDesc is the grpc.ServiceDesc for ForceMatrixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForceMatrixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.forcematrix.v1.ForceMatrixService",
	HandlerType: (*ForceMatrixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadMatrix",
			Handler:    _ForceMatrixService_ReadMatrix_Handler,
		},
		{
			MethodName: "DetectSlip",
			Handler:    _ForceMatrixService_DetectSlip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/forcematrix/v1/force_matrix.proto",
}
