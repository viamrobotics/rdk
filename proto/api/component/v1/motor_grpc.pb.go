// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MotorServiceClient is the client API for MotorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotorServiceClient interface {
	// SetPower sets the percentage of the motor's total power that should be employed
	// expressed a value between -1 and 1 where negative values indicate a backwards
	// direction and positive values a forward direction
	SetPower(ctx context.Context, in *MotorServiceSetPowerRequest, opts ...grpc.CallOption) (*MotorServiceSetPowerResponse, error)
	// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
	// for a specified number of rotations relative to its starting position
	// This method will return an error if position reporting is not supported
	GoFor(ctx context.Context, in *MotorServiceGoForRequest, opts ...grpc.CallOption) (*MotorServiceGoForResponse, error)
	// GoTo requests the robot's motor to move to a specific position that
	// is relative to its home position at a specified speed which is expressed in RPM
	// This method will return an error if position reporting is not supported
	GoTo(ctx context.Context, in *MotorServiceGoToRequest, opts ...grpc.CallOption) (*MotorServiceGoToResponse, error)
	// ResetZeroPosition sets the current position of the motor as the new zero position
	// This method will return an error if position reporting is not supported
	ResetZeroPosition(ctx context.Context, in *MotorServiceResetZeroPositionRequest, opts ...grpc.CallOption) (*MotorServiceResetZeroPositionResponse, error)
	// Position reports the position of the robot's motor relative to its zero position
	// This method will return an error if position reporting is not supported
	GetPosition(ctx context.Context, in *MotorServiceGetPositionRequest, opts ...grpc.CallOption) (*MotorServiceGetPositionResponse, error)
	// GetFeatures returns a message of booleans indicating which optional features the robot's motor supports
	GetFeatures(ctx context.Context, in *MotorServiceGetFeaturesRequest, opts ...grpc.CallOption) (*MotorServiceGetFeaturesResponse, error)
	// Stop turns the robot's motor off
	// To Do (FA): This will be deprecated
	Stop(ctx context.Context, in *MotorServiceStopRequest, opts ...grpc.CallOption) (*MotorServiceStopResponse, error)
	// IsPowered returns true if the robot's motor off
	// To Do (FA): This will be deprecated
	IsPowered(ctx context.Context, in *MotorServiceIsPoweredRequest, opts ...grpc.CallOption) (*MotorServiceIsPoweredResponse, error)
}

type motorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorServiceClient(cc grpc.ClientConnInterface) MotorServiceClient {
	return &motorServiceClient{cc}
}

func (c *motorServiceClient) SetPower(ctx context.Context, in *MotorServiceSetPowerRequest, opts ...grpc.CallOption) (*MotorServiceSetPowerResponse, error) {
	out := new(MotorServiceSetPowerResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/SetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GoFor(ctx context.Context, in *MotorServiceGoForRequest, opts ...grpc.CallOption) (*MotorServiceGoForResponse, error) {
	out := new(MotorServiceGoForResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/GoFor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GoTo(ctx context.Context, in *MotorServiceGoToRequest, opts ...grpc.CallOption) (*MotorServiceGoToResponse, error) {
	out := new(MotorServiceGoToResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/GoTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) ResetZeroPosition(ctx context.Context, in *MotorServiceResetZeroPositionRequest, opts ...grpc.CallOption) (*MotorServiceResetZeroPositionResponse, error) {
	out := new(MotorServiceResetZeroPositionResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/ResetZeroPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetPosition(ctx context.Context, in *MotorServiceGetPositionRequest, opts ...grpc.CallOption) (*MotorServiceGetPositionResponse, error) {
	out := new(MotorServiceGetPositionResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) GetFeatures(ctx context.Context, in *MotorServiceGetFeaturesRequest, opts ...grpc.CallOption) (*MotorServiceGetFeaturesResponse, error) {
	out := new(MotorServiceGetFeaturesResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) Stop(ctx context.Context, in *MotorServiceStopRequest, opts ...grpc.CallOption) (*MotorServiceStopResponse, error) {
	out := new(MotorServiceStopResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorServiceClient) IsPowered(ctx context.Context, in *MotorServiceIsPoweredRequest, opts ...grpc.CallOption) (*MotorServiceIsPoweredResponse, error) {
	out := new(MotorServiceIsPoweredResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.MotorService/IsPowered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotorServiceServer is the server API for MotorService service.
// All implementations must embed UnimplementedMotorServiceServer
// for forward compatibility
type MotorServiceServer interface {
	// SetPower sets the percentage of the motor's total power that should be employed
	// expressed a value between -1 and 1 where negative values indicate a backwards
	// direction and positive values a forward direction
	SetPower(context.Context, *MotorServiceSetPowerRequest) (*MotorServiceSetPowerResponse, error)
	// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
	// for a specified number of rotations relative to its starting position
	// This method will return an error if position reporting is not supported
	GoFor(context.Context, *MotorServiceGoForRequest) (*MotorServiceGoForResponse, error)
	// GoTo requests the robot's motor to move to a specific position that
	// is relative to its home position at a specified speed which is expressed in RPM
	// This method will return an error if position reporting is not supported
	GoTo(context.Context, *MotorServiceGoToRequest) (*MotorServiceGoToResponse, error)
	// ResetZeroPosition sets the current position of the motor as the new zero position
	// This method will return an error if position reporting is not supported
	ResetZeroPosition(context.Context, *MotorServiceResetZeroPositionRequest) (*MotorServiceResetZeroPositionResponse, error)
	// Position reports the position of the robot's motor relative to its zero position
	// This method will return an error if position reporting is not supported
	GetPosition(context.Context, *MotorServiceGetPositionRequest) (*MotorServiceGetPositionResponse, error)
	// GetFeatures returns a message of booleans indicating which optional features the robot's motor supports
	GetFeatures(context.Context, *MotorServiceGetFeaturesRequest) (*MotorServiceGetFeaturesResponse, error)
	// Stop turns the robot's motor off
	// To Do (FA): This will be deprecated
	Stop(context.Context, *MotorServiceStopRequest) (*MotorServiceStopResponse, error)
	// IsPowered returns true if the robot's motor off
	// To Do (FA): This will be deprecated
	IsPowered(context.Context, *MotorServiceIsPoweredRequest) (*MotorServiceIsPoweredResponse, error)
	mustEmbedUnimplementedMotorServiceServer()
}

// UnimplementedMotorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMotorServiceServer struct {
}

func (UnimplementedMotorServiceServer) SetPower(context.Context, *MotorServiceSetPowerRequest) (*MotorServiceSetPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}
func (UnimplementedMotorServiceServer) GoFor(context.Context, *MotorServiceGoForRequest) (*MotorServiceGoForResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoFor not implemented")
}
func (UnimplementedMotorServiceServer) GoTo(context.Context, *MotorServiceGoToRequest) (*MotorServiceGoToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoTo not implemented")
}
func (UnimplementedMotorServiceServer) ResetZeroPosition(context.Context, *MotorServiceResetZeroPositionRequest) (*MotorServiceResetZeroPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetZeroPosition not implemented")
}
func (UnimplementedMotorServiceServer) GetPosition(context.Context, *MotorServiceGetPositionRequest) (*MotorServiceGetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedMotorServiceServer) GetFeatures(context.Context, *MotorServiceGetFeaturesRequest) (*MotorServiceGetFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedMotorServiceServer) Stop(context.Context, *MotorServiceStopRequest) (*MotorServiceStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedMotorServiceServer) IsPowered(context.Context, *MotorServiceIsPoweredRequest) (*MotorServiceIsPoweredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPowered not implemented")
}
func (UnimplementedMotorServiceServer) mustEmbedUnimplementedMotorServiceServer() {}

// UnsafeMotorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorServiceServer will
// result in compilation errors.
type UnsafeMotorServiceServer interface {
	mustEmbedUnimplementedMotorServiceServer()
}

func RegisterMotorServiceServer(s grpc.ServiceRegistrar, srv MotorServiceServer) {
	s.RegisterService(&MotorService_ServiceDesc, srv)
}

func _MotorService_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceSetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/SetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).SetPower(ctx, req.(*MotorServiceSetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GoFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceGoForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GoFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/GoFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GoFor(ctx, req.(*MotorServiceGoForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GoTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceGoToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GoTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/GoTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GoTo(ctx, req.(*MotorServiceGoToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_ResetZeroPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceResetZeroPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).ResetZeroPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/ResetZeroPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).ResetZeroPosition(ctx, req.(*MotorServiceResetZeroPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceGetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetPosition(ctx, req.(*MotorServiceGetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceGetFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).GetFeatures(ctx, req.(*MotorServiceGetFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).Stop(ctx, req.(*MotorServiceStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorService_IsPowered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MotorServiceIsPoweredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorServiceServer).IsPowered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.MotorService/IsPowered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorServiceServer).IsPowered(ctx, req.(*MotorServiceIsPoweredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotorService_ServiceDesc is the grpc.ServiceDesc for MotorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.MotorService",
	HandlerType: (*MotorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPower",
			Handler:    _MotorService_SetPower_Handler,
		},
		{
			MethodName: "GoFor",
			Handler:    _MotorService_GoFor_Handler,
		},
		{
			MethodName: "GoTo",
			Handler:    _MotorService_GoTo_Handler,
		},
		{
			MethodName: "ResetZeroPosition",
			Handler:    _MotorService_ResetZeroPosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _MotorService_GetPosition_Handler,
		},
		{
			MethodName: "GetFeatures",
			Handler:    _MotorService_GetFeatures_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _MotorService_Stop_Handler,
		},
		{
			MethodName: "IsPowered",
			Handler:    _MotorService_IsPowered_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/motor.proto",
}
