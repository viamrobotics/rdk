// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForceMatrixServiceClient is the client API for ForceMatrixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForceMatrixServiceClient interface {
	// Matrix returns the matrix of force readings from the force matrix sensor
	Matrix(ctx context.Context, in *ForceMatrixServiceMatrixRequest, opts ...grpc.CallOption) (*ForceMatrixServiceMatrixResponse, error)
	// SlipDetection returns whether or not slip is occurring
	SlipDetection(ctx context.Context, in *ForceMatrixServiceSlipDetectionRequest, opts ...grpc.CallOption) (*ForceMatrixServiceSlipDetectionResponse, error)
}

type forceMatrixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForceMatrixServiceClient(cc grpc.ClientConnInterface) ForceMatrixServiceClient {
	return &forceMatrixServiceClient{cc}
}

func (c *forceMatrixServiceClient) Matrix(ctx context.Context, in *ForceMatrixServiceMatrixRequest, opts ...grpc.CallOption) (*ForceMatrixServiceMatrixResponse, error) {
	out := new(ForceMatrixServiceMatrixResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.ForceMatrixService/Matrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forceMatrixServiceClient) SlipDetection(ctx context.Context, in *ForceMatrixServiceSlipDetectionRequest, opts ...grpc.CallOption) (*ForceMatrixServiceSlipDetectionResponse, error) {
	out := new(ForceMatrixServiceSlipDetectionResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.ForceMatrixService/SlipDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForceMatrixServiceServer is the server API for ForceMatrixService service.
// All implementations must embed UnimplementedForceMatrixServiceServer
// for forward compatibility
type ForceMatrixServiceServer interface {
	// Matrix returns the matrix of force readings from the force matrix sensor
	Matrix(context.Context, *ForceMatrixServiceMatrixRequest) (*ForceMatrixServiceMatrixResponse, error)
	// SlipDetection returns whether or not slip is occurring
	SlipDetection(context.Context, *ForceMatrixServiceSlipDetectionRequest) (*ForceMatrixServiceSlipDetectionResponse, error)
	mustEmbedUnimplementedForceMatrixServiceServer()
}

// UnimplementedForceMatrixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForceMatrixServiceServer struct {
}

func (UnimplementedForceMatrixServiceServer) Matrix(context.Context, *ForceMatrixServiceMatrixRequest) (*ForceMatrixServiceMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Matrix not implemented")
}
func (UnimplementedForceMatrixServiceServer) SlipDetection(context.Context, *ForceMatrixServiceSlipDetectionRequest) (*ForceMatrixServiceSlipDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlipDetection not implemented")
}
func (UnimplementedForceMatrixServiceServer) mustEmbedUnimplementedForceMatrixServiceServer() {}

// UnsafeForceMatrixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForceMatrixServiceServer will
// result in compilation errors.
type UnsafeForceMatrixServiceServer interface {
	mustEmbedUnimplementedForceMatrixServiceServer()
}

func RegisterForceMatrixServiceServer(s grpc.ServiceRegistrar, srv ForceMatrixServiceServer) {
	s.RegisterService(&ForceMatrixService_ServiceDesc, srv)
}

func _ForceMatrixService_Matrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMatrixServiceMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForceMatrixServiceServer).Matrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.ForceMatrixService/Matrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForceMatrixServiceServer).Matrix(ctx, req.(*ForceMatrixServiceMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForceMatrixService_SlipDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMatrixServiceSlipDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForceMatrixServiceServer).SlipDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.ForceMatrixService/SlipDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForceMatrixServiceServer).SlipDetection(ctx, req.(*ForceMatrixServiceSlipDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForceMatrixService_ServiceDesc is the grpc.ServiceDesc for ForceMatrixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForceMatrixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.ForceMatrixService",
	HandlerType: (*ForceMatrixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Matrix",
			Handler:    _ForceMatrixService_Matrix_Handler,
		},
		{
			MethodName: "SlipDetection",
			Handler:    _ForceMatrixService_SlipDetection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/forcematrix.proto",
}
