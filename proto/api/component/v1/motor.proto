syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/component/v1";
option java_package = "com.viam.rdk.proto.api.component.v1";

package proto.api.component.v1;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

// A MotorService maintains all motors associated with a robot
service MotorService {
  // SetPower sets the percentage of the motor's total power that should be employed
  // expressed a value between -1 and 1 where negative values indicate a backwards
  // direction and positive values a forward direction
  rpc SetPower(MotorServiceSetPowerRequest) returns (MotorServiceSetPowerResponse) {
    option (google.api.http) = {
      put: "/api/v1/component/motor/{name}/power"
    };
  }

  // GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
  // for a specified number of rotations relative to its starting position
  // This method will return an error if position reporting is not supported
  rpc GoFor(MotorServiceGoForRequest) returns (MotorServiceGoForResponse) {
    option (google.api.http) = {
      put: "/api/v1/component/motor/{name}/go_for"
    };
  }

  // GoTo requests the robot's motor to move to a specific position that
  // is relative to its home position at a specified speed which is expressed in RPM
  // This method will return an error if position reporting is not supported
  rpc GoTo(MotorServiceGoToRequest) returns (MotorServiceGoToResponse) {
    option (google.api.http) = {
      put: "/api/v1/component/motor/{name}/go_to"
    };
  }

  // ResetZeroPosition sets the current position of the motor as the new zero position
  // This method will return an error if position reporting is not supported
  rpc ResetZeroPosition(MotorServiceResetZeroPositionRequest) returns (MotorServiceResetZeroPositionResponse) {
    option (google.api.http) = {
      put: "/api/v1/component/motor/{name}/zero"
    };
  }

  // Position reports the position of the robot's motor relative to its zero position
  // This method will return an error if position reporting is not supported
  rpc GetPosition(MotorServiceGetPositionRequest) returns (MotorServiceGetPositionResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/motor/{name}/position"
    };
  }

  // GetFeatures returns a message of booleans indicating which optional features the robot's motor supports
  rpc GetFeatures(MotorServiceGetFeaturesRequest) returns (MotorServiceGetFeaturesResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/motor/{name}/features"
    };
  }

  // Stop turns the robot's motor off
  // To Do (FA): This will be deprecated
  rpc Stop(MotorServiceStopRequest) returns (MotorServiceStopResponse) {
    option (google.api.http) = {
      put: "/api/v1/component/motor/{name}/stop"
    };
  }

  // IsPowered returns true if the robot's motor off
  // To Do (FA): This will be deprecated
  rpc IsPowered(MotorServiceIsPoweredRequest) returns (MotorServiceIsPoweredResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/motor/{name}/powered"
    };
  }
}

message MotorServiceSetPowerRequest {
  // Name of a motor
  string name = 1;
  // Percentage of motor's power, between -1 and 1
  double power_pct = 2;
}

message MotorServiceSetPowerResponse {}

message MotorServiceGoForRequest {
  // Name of a motor
  string name = 1;
  // Speed of motor travel in rotations per minute
  double rpm = 2;
  // Number of revolutions relative to motor's start position
  double revolutions = 3;
}

message MotorServiceGoForResponse {}

message MotorServiceGoToRequest {
  // Name of a motor
  string name = 1;
  // Speed of motor travel in rotations per minute
  double rpm = 2;
  // Number of revolutions relative to motor's home home/zero
  double position_revolutions = 3;
}

message MotorServiceGoToResponse {}

message MotorServiceResetZeroPositionRequest {
  // Name of a motor
  string name = 1;
  // Motor position
  double offset = 2;
}

message MotorServiceResetZeroPositionResponse {}

message MotorServiceGetPositionRequest {
  // Name of a motor
  string name = 1;
}

message MotorServiceGetPositionResponse {
  // Current position of the motor relative to its home
  double position = 1;
}

message MotorServiceStopRequest {
  // Name of a motor
  string name = 1;
}

message MotorServiceStopResponse {}

message MotorServiceIsPoweredRequest {
  // Name of a motor
  string name = 1;
}

message MotorServiceIsPoweredResponse {
  // Returns true if the motor is on
  bool is_on = 1;
}

message MotorServiceGetFeaturesRequest {
  // Name of a motor
  string name = 1;
}

message MotorServiceGetFeaturesResponse {
  // Returns true if the motor supports reporting its position
  bool position_reporting = 1;
}
