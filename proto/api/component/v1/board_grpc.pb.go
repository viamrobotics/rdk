// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	Status(ctx context.Context, in *BoardServiceStatusRequest, opts ...grpc.CallOption) (*BoardServiceStatusResponse, error)
	GPIOSet(ctx context.Context, in *BoardServiceGPIOSetRequest, opts ...grpc.CallOption) (*BoardServiceGPIOSetResponse, error)
	// GPIOGet gets the high/low state of the given pin of a board of the underlying robot.
	GPIOGet(ctx context.Context, in *BoardServiceGPIOGetRequest, opts ...grpc.CallOption) (*BoardServiceGPIOGetResponse, error)
	// PWMSet sets the given pin of a board of the underlying robot to the given duty cycle.
	PWMSet(ctx context.Context, in *BoardServicePWMSetRequest, opts ...grpc.CallOption) (*BoardServicePWMSetResponse, error)
	// PWMSetFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
	PWMSetFrequency(ctx context.Context, in *BoardServicePWMSetFrequencyRequest, opts ...grpc.CallOption) (*BoardServicePWMSetFrequencyResponse, error)
	// AnalogReaderRead reads off the current value of an analog reader of a board of the underlying robot.
	AnalogReaderRead(ctx context.Context, in *BoardServiceAnalogReaderReadRequest, opts ...grpc.CallOption) (*BoardServiceAnalogReaderReadResponse, error)
	// DigitalInterruptConfig returns the config the interrupt was created with.
	DigitalInterruptConfig(ctx context.Context, in *BoardServiceDigitalInterruptConfigRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptConfigResponse, error)
	// DigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
	DigitalInterruptValue(ctx context.Context, in *BoardServiceDigitalInterruptValueRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptValueResponse, error)
	// DigitalInterruptTick is to be called either manually if the interrupt is a proxy to some real hardware interrupt or for tests.
	DigitalInterruptTick(ctx context.Context, in *BoardServiceDigitalInterruptTickRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptTickResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) Status(ctx context.Context, in *BoardServiceStatusRequest, opts ...grpc.CallOption) (*BoardServiceStatusResponse, error) {
	out := new(BoardServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GPIOSet(ctx context.Context, in *BoardServiceGPIOSetRequest, opts ...grpc.CallOption) (*BoardServiceGPIOSetResponse, error) {
	out := new(BoardServiceGPIOSetResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/GPIOSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GPIOGet(ctx context.Context, in *BoardServiceGPIOGetRequest, opts ...grpc.CallOption) (*BoardServiceGPIOGetResponse, error) {
	out := new(BoardServiceGPIOGetResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/GPIOGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) PWMSet(ctx context.Context, in *BoardServicePWMSetRequest, opts ...grpc.CallOption) (*BoardServicePWMSetResponse, error) {
	out := new(BoardServicePWMSetResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/PWMSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) PWMSetFrequency(ctx context.Context, in *BoardServicePWMSetFrequencyRequest, opts ...grpc.CallOption) (*BoardServicePWMSetFrequencyResponse, error) {
	out := new(BoardServicePWMSetFrequencyResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/PWMSetFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) AnalogReaderRead(ctx context.Context, in *BoardServiceAnalogReaderReadRequest, opts ...grpc.CallOption) (*BoardServiceAnalogReaderReadResponse, error) {
	out := new(BoardServiceAnalogReaderReadResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/AnalogReaderRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DigitalInterruptConfig(ctx context.Context, in *BoardServiceDigitalInterruptConfigRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptConfigResponse, error) {
	out := new(BoardServiceDigitalInterruptConfigResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/DigitalInterruptConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DigitalInterruptValue(ctx context.Context, in *BoardServiceDigitalInterruptValueRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptValueResponse, error) {
	out := new(BoardServiceDigitalInterruptValueResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/DigitalInterruptValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DigitalInterruptTick(ctx context.Context, in *BoardServiceDigitalInterruptTickRequest, opts ...grpc.CallOption) (*BoardServiceDigitalInterruptTickResponse, error) {
	out := new(BoardServiceDigitalInterruptTickResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/DigitalInterruptTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	Status(context.Context, *BoardServiceStatusRequest) (*BoardServiceStatusResponse, error)
	GPIOSet(context.Context, *BoardServiceGPIOSetRequest) (*BoardServiceGPIOSetResponse, error)
	// GPIOGet gets the high/low state of the given pin of a board of the underlying robot.
	GPIOGet(context.Context, *BoardServiceGPIOGetRequest) (*BoardServiceGPIOGetResponse, error)
	// PWMSet sets the given pin of a board of the underlying robot to the given duty cycle.
	PWMSet(context.Context, *BoardServicePWMSetRequest) (*BoardServicePWMSetResponse, error)
	// PWMSetFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
	PWMSetFrequency(context.Context, *BoardServicePWMSetFrequencyRequest) (*BoardServicePWMSetFrequencyResponse, error)
	// AnalogReaderRead reads off the current value of an analog reader of a board of the underlying robot.
	AnalogReaderRead(context.Context, *BoardServiceAnalogReaderReadRequest) (*BoardServiceAnalogReaderReadResponse, error)
	// DigitalInterruptConfig returns the config the interrupt was created with.
	DigitalInterruptConfig(context.Context, *BoardServiceDigitalInterruptConfigRequest) (*BoardServiceDigitalInterruptConfigResponse, error)
	// DigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
	DigitalInterruptValue(context.Context, *BoardServiceDigitalInterruptValueRequest) (*BoardServiceDigitalInterruptValueResponse, error)
	// DigitalInterruptTick is to be called either manually if the interrupt is a proxy to some real hardware interrupt or for tests.
	DigitalInterruptTick(context.Context, *BoardServiceDigitalInterruptTickRequest) (*BoardServiceDigitalInterruptTickResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) Status(context.Context, *BoardServiceStatusRequest) (*BoardServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBoardServiceServer) GPIOSet(context.Context, *BoardServiceGPIOSetRequest) (*BoardServiceGPIOSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPIOSet not implemented")
}
func (UnimplementedBoardServiceServer) GPIOGet(context.Context, *BoardServiceGPIOGetRequest) (*BoardServiceGPIOGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GPIOGet not implemented")
}
func (UnimplementedBoardServiceServer) PWMSet(context.Context, *BoardServicePWMSetRequest) (*BoardServicePWMSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PWMSet not implemented")
}
func (UnimplementedBoardServiceServer) PWMSetFrequency(context.Context, *BoardServicePWMSetFrequencyRequest) (*BoardServicePWMSetFrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PWMSetFrequency not implemented")
}
func (UnimplementedBoardServiceServer) AnalogReaderRead(context.Context, *BoardServiceAnalogReaderReadRequest) (*BoardServiceAnalogReaderReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalogReaderRead not implemented")
}
func (UnimplementedBoardServiceServer) DigitalInterruptConfig(context.Context, *BoardServiceDigitalInterruptConfigRequest) (*BoardServiceDigitalInterruptConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigitalInterruptConfig not implemented")
}
func (UnimplementedBoardServiceServer) DigitalInterruptValue(context.Context, *BoardServiceDigitalInterruptValueRequest) (*BoardServiceDigitalInterruptValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigitalInterruptValue not implemented")
}
func (UnimplementedBoardServiceServer) DigitalInterruptTick(context.Context, *BoardServiceDigitalInterruptTickRequest) (*BoardServiceDigitalInterruptTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigitalInterruptTick not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).Status(ctx, req.(*BoardServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GPIOSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceGPIOSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GPIOSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/GPIOSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GPIOSet(ctx, req.(*BoardServiceGPIOSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GPIOGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceGPIOGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GPIOGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/GPIOGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GPIOGet(ctx, req.(*BoardServiceGPIOGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_PWMSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServicePWMSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).PWMSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/PWMSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).PWMSet(ctx, req.(*BoardServicePWMSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_PWMSetFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServicePWMSetFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).PWMSetFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/PWMSetFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).PWMSetFrequency(ctx, req.(*BoardServicePWMSetFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_AnalogReaderRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceAnalogReaderReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).AnalogReaderRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/AnalogReaderRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).AnalogReaderRead(ctx, req.(*BoardServiceAnalogReaderReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DigitalInterruptConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceDigitalInterruptConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DigitalInterruptConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/DigitalInterruptConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DigitalInterruptConfig(ctx, req.(*BoardServiceDigitalInterruptConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DigitalInterruptValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceDigitalInterruptValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DigitalInterruptValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/DigitalInterruptValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DigitalInterruptValue(ctx, req.(*BoardServiceDigitalInterruptValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DigitalInterruptTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceDigitalInterruptTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DigitalInterruptTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/DigitalInterruptTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DigitalInterruptTick(ctx, req.(*BoardServiceDigitalInterruptTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _BoardService_Status_Handler,
		},
		{
			MethodName: "GPIOSet",
			Handler:    _BoardService_GPIOSet_Handler,
		},
		{
			MethodName: "GPIOGet",
			Handler:    _BoardService_GPIOGet_Handler,
		},
		{
			MethodName: "PWMSet",
			Handler:    _BoardService_PWMSet_Handler,
		},
		{
			MethodName: "PWMSetFrequency",
			Handler:    _BoardService_PWMSetFrequency_Handler,
		},
		{
			MethodName: "AnalogReaderRead",
			Handler:    _BoardService_AnalogReaderRead_Handler,
		},
		{
			MethodName: "DigitalInterruptConfig",
			Handler:    _BoardService_DigitalInterruptConfig_Handler,
		},
		{
			MethodName: "DigitalInterruptValue",
			Handler:    _BoardService_DigitalInterruptValue_Handler,
		},
		{
			MethodName: "DigitalInterruptTick",
			Handler:    _BoardService_DigitalInterruptTick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/board.proto",
}
