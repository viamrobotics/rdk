// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/api/component/v1/camera.proto

package v1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraServiceClient interface {
	// Frame returns a frame from a camera of the underlying robot. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	Frame(ctx context.Context, in *CameraServiceFrameRequest, opts ...grpc.CallOption) (*CameraServiceFrameResponse, error)
	// RenderFrame renders a frame from a camera of the underlying robot to an HTTP response. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	RenderFrame(ctx context.Context, in *CameraServiceRenderFrameRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// PointCloud returns a point cloud from a camera of the underlying robot. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	PointCloud(ctx context.Context, in *CameraServicePointCloudRequest, opts ...grpc.CallOption) (*CameraServicePointCloudResponse, error)
	// ObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
	// as well as the 3-vector center of each of the found objects.
	// A specific MIME type can be requested but may not necessarily be the same one returned.
	ObjectPointClouds(ctx context.Context, in *CameraServiceObjectPointCloudsRequest, opts ...grpc.CallOption) (*CameraServiceObjectPointCloudsResponse, error)
}

type cameraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServiceClient(cc grpc.ClientConnInterface) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) Frame(ctx context.Context, in *CameraServiceFrameRequest, opts ...grpc.CallOption) (*CameraServiceFrameResponse, error) {
	out := new(CameraServiceFrameResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.CameraService/Frame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) RenderFrame(ctx context.Context, in *CameraServiceRenderFrameRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.CameraService/RenderFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) PointCloud(ctx context.Context, in *CameraServicePointCloudRequest, opts ...grpc.CallOption) (*CameraServicePointCloudResponse, error) {
	out := new(CameraServicePointCloudResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.CameraService/PointCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ObjectPointClouds(ctx context.Context, in *CameraServiceObjectPointCloudsRequest, opts ...grpc.CallOption) (*CameraServiceObjectPointCloudsResponse, error) {
	out := new(CameraServiceObjectPointCloudsResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.CameraService/ObjectPointClouds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
// All implementations must embed UnimplementedCameraServiceServer
// for forward compatibility
type CameraServiceServer interface {
	// Frame returns a frame from a camera of the underlying robot. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	Frame(context.Context, *CameraServiceFrameRequest) (*CameraServiceFrameResponse, error)
	// RenderFrame renders a frame from a camera of the underlying robot to an HTTP response. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	RenderFrame(context.Context, *CameraServiceRenderFrameRequest) (*httpbody.HttpBody, error)
	// PointCloud returns a point cloud from a camera of the underlying robot. A specific MIME type
	// can be requested but may not necessarily be the same one returned.
	PointCloud(context.Context, *CameraServicePointCloudRequest) (*CameraServicePointCloudResponse, error)
	// ObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
	// as well as the 3-vector center of each of the found objects.
	// A specific MIME type can be requested but may not necessarily be the same one returned.
	ObjectPointClouds(context.Context, *CameraServiceObjectPointCloudsRequest) (*CameraServiceObjectPointCloudsResponse, error)
	mustEmbedUnimplementedCameraServiceServer()
}

// UnimplementedCameraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (UnimplementedCameraServiceServer) Frame(context.Context, *CameraServiceFrameRequest) (*CameraServiceFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frame not implemented")
}
func (UnimplementedCameraServiceServer) RenderFrame(context.Context, *CameraServiceRenderFrameRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderFrame not implemented")
}
func (UnimplementedCameraServiceServer) PointCloud(context.Context, *CameraServicePointCloudRequest) (*CameraServicePointCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointCloud not implemented")
}
func (UnimplementedCameraServiceServer) ObjectPointClouds(context.Context, *CameraServiceObjectPointCloudsRequest) (*CameraServiceObjectPointCloudsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectPointClouds not implemented")
}
func (UnimplementedCameraServiceServer) mustEmbedUnimplementedCameraServiceServer() {}

// UnsafeCameraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServiceServer will
// result in compilation errors.
type UnsafeCameraServiceServer interface {
	mustEmbedUnimplementedCameraServiceServer()
}

func RegisterCameraServiceServer(s grpc.ServiceRegistrar, srv CameraServiceServer) {
	s.RegisterService(&CameraService_ServiceDesc, srv)
}

func _CameraService_Frame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraServiceFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).Frame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.CameraService/Frame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).Frame(ctx, req.(*CameraServiceFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_RenderFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraServiceRenderFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).RenderFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.CameraService/RenderFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).RenderFrame(ctx, req.(*CameraServiceRenderFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_PointCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraServicePointCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).PointCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.CameraService/PointCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).PointCloud(ctx, req.(*CameraServicePointCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ObjectPointClouds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraServiceObjectPointCloudsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ObjectPointClouds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.CameraService/ObjectPointClouds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ObjectPointClouds(ctx, req.(*CameraServiceObjectPointCloudsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraService_ServiceDesc is the grpc.ServiceDesc for CameraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Frame",
			Handler:    _CameraService_Frame_Handler,
		},
		{
			MethodName: "RenderFrame",
			Handler:    _CameraService_RenderFrame_Handler,
		},
		{
			MethodName: "PointCloud",
			Handler:    _CameraService_PointCloud_Handler,
		},
		{
			MethodName: "ObjectPointClouds",
			Handler:    _CameraService_ObjectPointClouds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/camera.proto",
}
