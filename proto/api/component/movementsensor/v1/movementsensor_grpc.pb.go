// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/api/component/movementsensor/v1/movementsensor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovementSensorServiceClient is the client API for MovementSensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovementSensorServiceClient interface {
	GetLinearVelocity(ctx context.Context, in *GetLinearVelocityRequest, opts ...grpc.CallOption) (*GetLinearVelocityResponse, error)
	GetAngularVelocity(ctx context.Context, in *GetAngularVelocityRequest, opts ...grpc.CallOption) (*GetAngularVelocityResponse, error)
	GetCompassHeading(ctx context.Context, in *GetCompassHeadingRequest, opts ...grpc.CallOption) (*GetCompassHeadingResponse, error)
	GetOrientation(ctx context.Context, in *GetOrientationRequest, opts ...grpc.CallOption) (*GetOrientationResponse, error)
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error)
	GetAccuracy(ctx context.Context, in *GetAccuracyRequest, opts ...grpc.CallOption) (*GetAccuracyResponse, error)
}

type movementSensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovementSensorServiceClient(cc grpc.ClientConnInterface) MovementSensorServiceClient {
	return &movementSensorServiceClient{cc}
}

func (c *movementSensorServiceClient) GetLinearVelocity(ctx context.Context, in *GetLinearVelocityRequest, opts ...grpc.CallOption) (*GetLinearVelocityResponse, error) {
	out := new(GetLinearVelocityResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetLinearVelocity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetAngularVelocity(ctx context.Context, in *GetAngularVelocityRequest, opts ...grpc.CallOption) (*GetAngularVelocityResponse, error) {
	out := new(GetAngularVelocityResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetAngularVelocity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetCompassHeading(ctx context.Context, in *GetCompassHeadingRequest, opts ...grpc.CallOption) (*GetCompassHeadingResponse, error) {
	out := new(GetCompassHeadingResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetCompassHeading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetOrientation(ctx context.Context, in *GetOrientationRequest, opts ...grpc.CallOption) (*GetOrientationResponse, error) {
	out := new(GetOrientationResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetOrientation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error) {
	out := new(GetPropertiesResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementSensorServiceClient) GetAccuracy(ctx context.Context, in *GetAccuracyRequest, opts ...grpc.CallOption) (*GetAccuracyResponse, error) {
	out := new(GetAccuracyResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.movementsensor.v1.MovementSensorService/GetAccuracy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovementSensorServiceServer is the server API for MovementSensorService service.
// All implementations must embed UnimplementedMovementSensorServiceServer
// for forward compatibility
type MovementSensorServiceServer interface {
	GetLinearVelocity(context.Context, *GetLinearVelocityRequest) (*GetLinearVelocityResponse, error)
	GetAngularVelocity(context.Context, *GetAngularVelocityRequest) (*GetAngularVelocityResponse, error)
	GetCompassHeading(context.Context, *GetCompassHeadingRequest) (*GetCompassHeadingResponse, error)
	GetOrientation(context.Context, *GetOrientationRequest) (*GetOrientationResponse, error)
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error)
	GetAccuracy(context.Context, *GetAccuracyRequest) (*GetAccuracyResponse, error)
	mustEmbedUnimplementedMovementSensorServiceServer()
}

// UnimplementedMovementSensorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovementSensorServiceServer struct {
}

func (UnimplementedMovementSensorServiceServer) GetLinearVelocity(context.Context, *GetLinearVelocityRequest) (*GetLinearVelocityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinearVelocity not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetAngularVelocity(context.Context, *GetAngularVelocityRequest) (*GetAngularVelocityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAngularVelocity not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetCompassHeading(context.Context, *GetCompassHeadingRequest) (*GetCompassHeadingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompassHeading not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetOrientation(context.Context, *GetOrientationRequest) (*GetOrientationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrientation not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedMovementSensorServiceServer) GetAccuracy(context.Context, *GetAccuracyRequest) (*GetAccuracyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccuracy not implemented")
}
func (UnimplementedMovementSensorServiceServer) mustEmbedUnimplementedMovementSensorServiceServer() {}

// UnsafeMovementSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovementSensorServiceServer will
// result in compilation errors.
type UnsafeMovementSensorServiceServer interface {
	mustEmbedUnimplementedMovementSensorServiceServer()
}

func RegisterMovementSensorServiceServer(s grpc.ServiceRegistrar, srv MovementSensorServiceServer) {
	s.RegisterService(&MovementSensorService_ServiceDesc, srv)
}

func _MovementSensorService_GetLinearVelocity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinearVelocityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetLinearVelocity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetLinearVelocity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetLinearVelocity(ctx, req.(*GetLinearVelocityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetAngularVelocity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAngularVelocityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetAngularVelocity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetAngularVelocity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetAngularVelocity(ctx, req.(*GetAngularVelocityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetCompassHeading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompassHeadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetCompassHeading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetCompassHeading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetCompassHeading(ctx, req.(*GetCompassHeadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetOrientation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrientationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetOrientation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetOrientation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetOrientation(ctx, req.(*GetOrientationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetProperties(ctx, req.(*GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementSensorService_GetAccuracy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccuracyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementSensorServiceServer).GetAccuracy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.movementsensor.v1.MovementSensorService/GetAccuracy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementSensorServiceServer).GetAccuracy(ctx, req.(*GetAccuracyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovementSensorService_ServiceDesc is the grpc.ServiceDesc for MovementSensorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovementSensorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.movementsensor.v1.MovementSensorService",
	HandlerType: (*MovementSensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLinearVelocity",
			Handler:    _MovementSensorService_GetLinearVelocity_Handler,
		},
		{
			MethodName: "GetAngularVelocity",
			Handler:    _MovementSensorService_GetAngularVelocity_Handler,
		},
		{
			MethodName: "GetCompassHeading",
			Handler:    _MovementSensorService_GetCompassHeading_Handler,
		},
		{
			MethodName: "GetOrientation",
			Handler:    _MovementSensorService_GetOrientation_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _MovementSensorService_GetPosition_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _MovementSensorService_GetProperties_Handler,
		},
		{
			MethodName: "GetAccuracy",
			Handler:    _MovementSensorService_GetAccuracy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/movementsensor/v1/movementsensor.proto",
}
