syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/component/v1";
option java_package = "com.viam.rdk.proto.api.component.v1";

package proto.api.component.base.v1;

import "google/api/annotations.proto";

service BaseService {
  // MoveStraight moves a robot's base in a straight line by a given distance, expressed in millimeters
  // and a given speed, expressed in millimeters per second 
  rpc MoveStraight(MoveStraightRequest) returns (MoveStraightResponse) {
    option (google.api.http) = {
      post: "/api/v1/component/base/{name}/move_straight"
    };  
  }

  // MoveArc moves the robot's base in an arc by a given distance, expressed in millimeters,
  // a given speed, expressed in millimeters per second of movement, and a given angle expressed in degrees
  rpc MoveArc(MoveArcRequest) returns (MoveArcResponse) {
    option (google.api.http) = {
      post: "/api/v1/component/base/{name}/move_arc"
    };  
  }

  // Spin spins a robot's base by an given angle, expressed in degrees, and a given 
  // angular speed, expressed in degrees per second
  rpc Spin(SpinRequest) returns (SpinResponse) {
    option (google.api.http) = {
      post: "/api/v1/component/base/{name}/spin"
    };  
  }

  // Stop stops a robot's base 
  rpc Stop(StopRequest) returns (StopResponse) {
    option (google.api.http) = {
      post: "/api/v1/component/base/{name}/stop"
    };  
  }
}

message MoveStraightRequest {
  // Name of a base
  string name = 1;
  // Desired travel distance in millimeters
  int64 distance_mm = 2;
  // Desired travel velocity in millimeters/second
  double mm_per_sec = 3;
  // Whether the movement should block all other
  // movement commands to base until this movement is complete
  bool block = 4;
}

message MoveStraightResponse {}

message MoveArcRequest {
  // Name of a base
  string name = 1;
  // Desired travel distance in millimeters
  int64 distance_mm = 2;
  // Desired speed in millimeters per second 
  double mm_per_sec = 3;
  // Desired angle in degrees
  double angle_deg = 4;
  // Whether the movement should block all other
  // movement commands to base until this movement is complete
  bool block = 5;
}

message MoveArcResponse {}

message SpinRequest {
  // Name of a base
  string name = 1;
  // Desired angle
  double angle_deg = 2;
  // Desired angular velocity
  double degs_per_sec = 3;
  // Whether the movement should block all other
  // movement commands to base until this movement is complete
  bool block = 4;
}

message SpinResponse {}

message StopRequest {
  // Name of a base
  string name = 1;
}

message StopResponse {}
