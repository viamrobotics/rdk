syntax = "proto3";

package proto.api.component.motor.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/rdk/proto/api/component/motor/v1";
option java_package = "com.viam.rdk.proto.api.component.motor.v1";

// A MotorService maintains all motors associated with a robot
service MotorService {
  // SetPower sets the percentage of the motor's total power that should be employed
  // expressed a value between -1 and 1 where negative values indicate a backwards
  // direction and positive values a forward direction
  rpc SetPower(SetPowerRequest) returns (SetPowerResponse) {
    option (google.api.http) = {
      put: "/viam/api/v1/component/motor/{name}/power"
    };
  }

  // GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
  // for a specified number of rotations relative to its starting position
  // This method will return an error if position reporting is not supported
  // If revolutions is 0, this will run the motor at rpm indefinitely
  // If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
  rpc GoFor(GoForRequest) returns (GoForResponse) {
    option (google.api.http) = {
      put: "/viam/api/v1/component/motor/{name}/go_for"
    };
  }

  // GoTo requests the robot's motor to move to a specific position that
  // is relative to its home position at a specified speed which is expressed in RPM
  // This method will return an error if position reporting is not supported
  rpc GoTo(GoToRequest) returns (GoToResponse) {
    option (google.api.http) = {
      put: "/viam/api/v1/component/motor/{name}/go_to"
    };
  }

  // ResetZeroPosition sets the current position of the motor as the new zero position
  // This method will return an error if position reporting is not supported
  rpc ResetZeroPosition(ResetZeroPositionRequest) returns (ResetZeroPositionResponse) {
    option (google.api.http) = {
      put: "/viam/api/v1/component/motor/{name}/zero"
    };
  }

  // Position reports the position of the robot's motor relative to its zero position
  // This method will return an error if position reporting is not supported
  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/motor/{name}/position"
    };
  }

  // GetProperties returns a message of booleans indicating which optional features the robot's motor supports
  rpc GetProperties(GetPropertiesRequest) returns (GetPropertiesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/motor/{name}/features"
    };
  }

  // Stop turns the robot's motor off

  rpc Stop(StopRequest) returns (StopResponse) {
    option (google.api.http) = {
      put: "/viam/api/v1/component/motor/{name}/stop"
    };
  }

  // IsPowered returns true if the robot's motor off
  // To Do (FA): This will be deprecated
  rpc IsPowered(IsPoweredRequest) returns (IsPoweredResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/motor/{name}/powered"
    };
  }
}

message SetPowerRequest {
  // Name of a motor
  string name = 1;
  // Percentage of motor's power, between -1 and 1
  double power_pct = 2;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message SetPowerResponse {}

message GoForRequest {
  // Name of a motor
  string name = 1;
  // Speed of motor travel in rotations per minute
  double rpm = 2;
  // Number of revolutions relative to motor's start position
  double revolutions = 3;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GoForResponse {}

message GoToRequest {
  // Name of a motor
  string name = 1;
  // Speed of motor travel in rotations per minute
  double rpm = 2;
  // Number of revolutions relative to motor's home home/zero
  double position_revolutions = 3;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GoToResponse {}

message ResetZeroPositionRequest {
  // Name of a motor
  string name = 1;
  // Motor position
  double offset = 2;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message ResetZeroPositionResponse {}

message GetPositionRequest {
  // Name of a motor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPositionResponse {
  // Current position of the motor relative to its home
  double position = 1;
}

message StopRequest {
  // Name of a motor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message StopResponse {}

message IsPoweredRequest {
  // Name of a motor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message IsPoweredResponse {
  // Returns true if the motor is on
  bool is_on = 1;
}

message GetPropertiesRequest {
  // Name of a motor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPropertiesResponse {
  // Returns true if the motor supports reporting its position
  bool position_reporting = 1;
}

message Status {
  // Returns true if the motor is powered
  bool is_powered = 1;
  // Returns true if the motor has position support
  bool position_reporting = 2;
  // Returns current position of the motor relative to its home
  double position = 3;
  // Returns true if the motor is moving
  bool is_moving = 4;
}
