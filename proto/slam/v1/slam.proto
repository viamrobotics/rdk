syntax = "proto3";
option go_package = "go.viam.com/core/proto/slam/v1";
option java_package = "com.viam.core.proto.slam.v1";

package proto.slam.v1;

import "google/api/annotations.proto";

message SaveRequest {
	string file = 1;
}

message SaveResponse {}

message StatsRequest {}

message StatsResponse {
	BasePosition base_position = 1;
}

message BasePosition {
	int64 x = 1;
	int64 y = 2;
}

message CalibrateRequest {}

message CalibrateResponse {}

enum Direction {
	DIRECTION_UNSPECIFIED = 0;
	DIRECTION_UP = 1;
	DIRECTION_RIGHT = 2;
	DIRECTION_DOWN = 3;
	DIRECTION_LEFT = 4;
}

message MoveRobotRequest {
	Direction direction = 1;
}

message MoveRobotResponse {
	BasePosition new_position = 1;
}

message MoveRobotForwardRequest {}

message MoveRobotForwardResponse {
	BasePosition new_position = 1;
}

message MoveRobotBackwardRequest {}

message MoveRobotBackwardResponse {
	BasePosition new_position = 1;
}

message TurnRobotToRequest {
	Direction direction = 1;
}

message TurnRobotToResponse {}

message UpdateRobotDeviceOffsetRequest {
	int32 offset_index = 1;
	DeviceOffset offset = 2;
}

message DeviceOffset {
	double angle = 1;
	double distance_x = 2;
	double distance_y = 3;
}

message UpdateRobotDeviceOffsetResponse {}

message StartLidarRequest {
	int32 device_number = 1;
}

message StartLidarResponse {}

message StopLidarRequest {
	int32 device_number = 1;
}

message StopLidarResponse {}

message GetLidarSeedRequest {}

message GetLidarSeedResponse {
	repeated string seeds = 1;
}

message SetLidarSeedRequest {
	int32 device_number = 1;
	int64 seed = 2;
}

message SetLidarSeedResponse {}

message SetClientZoomRequest {
	double zoom = 1;
}

message SetClientZoomResponse {}

enum LidarViewMode {
	LIDAR_VIEW_MODE_UNSPECIFIED = 0;
	LIDAR_VIEW_MODE_STORED = 1;
	LIDAR_VIEW_MODE_LIVE = 2;
}

message SetClientLidarViewModeRequest {
	LidarViewMode mode = 1;
}

message SetClientLidarViewModeResponse {}

enum ClickMode {
	CLICK_MODE_UNSPECIFIED = 0;
	CLICK_MODE_MOVE = 1;
	CLICK_MODE_INFO = 2;
}

message SetClientClickModeRequest {
	ClickMode mode = 1;
}

message SetClientClickModeResponse {}

// SlamService is not yet documented as its very experimental.
service SlamService {
	rpc Save(SaveRequest) returns (SaveResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/save"
		};
	}
	rpc Stats(StatsRequest) returns (StatsResponse) {
	    option (google.api.http) = {
			get: "/slam/v1/stats"
		};
	}
	rpc Calibrate(CalibrateRequest) returns (CalibrateResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/calibrate"
		};
	}
	rpc MoveRobot(MoveRobotRequest) returns (MoveRobotResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/move_robot"
			body: "*"
		};
	}
	rpc MoveRobotForward(MoveRobotForwardRequest) returns (MoveRobotForwardResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/move_robot_forward"
		};
	}
	rpc MoveRobotBackward(MoveRobotBackwardRequest) returns (MoveRobotBackwardResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/move_robot_forward"
		};
	}
	rpc TurnRobotTo(TurnRobotToRequest) returns (TurnRobotToResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/turn_robot_to"
		};
	}
	rpc UpdateRobotDeviceOffset(UpdateRobotDeviceOffsetRequest) returns (UpdateRobotDeviceOffsetResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/upate_robot_device_offset"
		};
	}
	rpc StartLidar(StartLidarRequest) returns (StartLidarResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/start_lidar"
		};
	}
	rpc StopLidar(StopLidarRequest) returns (StopLidarResponse) {
	    option (google.api.http) = {
			post: "/slam/v1/stop_lidar"
		};
	}
	rpc GetLidarSeed(GetLidarSeedRequest) returns (GetLidarSeedResponse) {
	    option (google.api.http) = {
			get: "/slam/v1/get_lidar_seed"
		};
	}
	rpc SetLidarSeed(SetLidarSeedRequest) returns (SetLidarSeedResponse) {
	    option (google.api.http) = {
			put: "/slam/v1/set_lidar_seed"
		};
	}
	rpc SetClientZoom(SetClientZoomRequest) returns (SetClientZoomResponse) {
	    option (google.api.http) = {
			put: "/slam/v1/set_client_zoom"
		};
	}
	rpc SetClientLidarViewMode(SetClientLidarViewModeRequest) returns (SetClientLidarViewModeResponse) {
	    option (google.api.http) = {
			put: "/slam/v1/set_client_lidar_view_mode"
		};
	}
	rpc SetClientClickMode(SetClientClickModeRequest) returns (SetClientClickModeResponse) {
	    option (google.api.http) = {
			put: "/slam/v1/set_client_click_mode"
		};
	}
}
