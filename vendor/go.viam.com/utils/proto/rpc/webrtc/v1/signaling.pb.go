// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: proto/rpc/webrtc/v1/signaling.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ICECandidate represents an ICE candidate.
// From https://github.com/pion/webrtc/blob/5f6baf73255598a7b4a7c9400bb0381acc9aa3dc/icecandidateinit.go
type ICECandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate        string  `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid           *string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3,oneof" json:"sdp_mid,omitempty"`
	SdpmLineIndex    *uint32 `protobuf:"varint,3,opt,name=sdpm_line_index,json=sdpmLineIndex,proto3,oneof" json:"sdpm_line_index,omitempty"`
	UsernameFragment *string `protobuf:"bytes,4,opt,name=username_fragment,json=usernameFragment,proto3,oneof" json:"username_fragment,omitempty"`
}

func (x *ICECandidate) Reset() {
	*x = ICECandidate{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICECandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidate) ProtoMessage() {}

func (x *ICECandidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidate.ProtoReflect.Descriptor instead.
func (*ICECandidate) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{0}
}

func (x *ICECandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ICECandidate) GetSdpMid() string {
	if x != nil && x.SdpMid != nil {
		return *x.SdpMid
	}
	return ""
}

func (x *ICECandidate) GetSdpmLineIndex() uint32 {
	if x != nil && x.SdpmLineIndex != nil {
		return *x.SdpmLineIndex
	}
	return 0
}

func (x *ICECandidate) GetUsernameFragment() string {
	if x != nil && x.UsernameFragment != nil {
		return *x.UsernameFragment
	}
	return ""
}

// CallRequest is the SDP offer that the controlling side is making.
type CallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	// when disable_trickle is true, the init stage will be the only stage
	// to be received in the response and the caller can expect the SDP
	// to contain all ICE candidates.
	DisableTrickle bool `protobuf:"varint,2,opt,name=disable_trickle,json=disableTrickle,proto3" json:"disable_trickle,omitempty"`
}

func (x *CallRequest) Reset() {
	*x = CallRequest{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest) ProtoMessage() {}

func (x *CallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest.ProtoReflect.Descriptor instead.
func (*CallRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{1}
}

func (x *CallRequest) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *CallRequest) GetDisableTrickle() bool {
	if x != nil {
		return x.DisableTrickle
	}
	return false
}

// CallResponseInitStage is the first and a one time stage that represents
// the initial response to starting a call.
type CallResponseInitStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *CallResponseInitStage) Reset() {
	*x = CallResponseInitStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallResponseInitStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponseInitStage) ProtoMessage() {}

func (x *CallResponseInitStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponseInitStage.ProtoReflect.Descriptor instead.
func (*CallResponseInitStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *CallResponseInitStage) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// CallResponseUpdateStage is multiply used to trickle in ICE candidates from
// the controlled (answering) side.
type CallResponseUpdateStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate *ICECandidate `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *CallResponseUpdateStage) Reset() {
	*x = CallResponseUpdateStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallResponseUpdateStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponseUpdateStage) ProtoMessage() {}

func (x *CallResponseUpdateStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponseUpdateStage.ProtoReflect.Descriptor instead.
func (*CallResponseUpdateStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{3}
}

func (x *CallResponseUpdateStage) GetCandidate() *ICECandidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

// CallResponse is the SDP answer that the controlled side responds with.
type CallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to Stage:
	//
	//	*CallResponse_Init
	//	*CallResponse_Update
	Stage isCallResponse_Stage `protobuf_oneof:"stage"`
}

func (x *CallResponse) Reset() {
	*x = CallResponse{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse) ProtoMessage() {}

func (x *CallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse.ProtoReflect.Descriptor instead.
func (*CallResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{4}
}

func (x *CallResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *CallResponse) GetStage() isCallResponse_Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (x *CallResponse) GetInit() *CallResponseInitStage {
	if x, ok := x.GetStage().(*CallResponse_Init); ok {
		return x.Init
	}
	return nil
}

func (x *CallResponse) GetUpdate() *CallResponseUpdateStage {
	if x, ok := x.GetStage().(*CallResponse_Update); ok {
		return x.Update
	}
	return nil
}

type isCallResponse_Stage interface {
	isCallResponse_Stage()
}

type CallResponse_Init struct {
	Init *CallResponseInitStage `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type CallResponse_Update struct {
	Update *CallResponseUpdateStage `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

func (*CallResponse_Init) isCallResponse_Stage() {}

func (*CallResponse_Update) isCallResponse_Stage() {}

// CallUpdateRequest updates the call with additional info to the controlled side.
type CallUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to Update:
	//
	//	*CallUpdateRequest_Candidate
	//	*CallUpdateRequest_Done
	//	*CallUpdateRequest_Error
	Update isCallUpdateRequest_Update `protobuf_oneof:"update"`
}

func (x *CallUpdateRequest) Reset() {
	*x = CallUpdateRequest{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUpdateRequest) ProtoMessage() {}

func (x *CallUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUpdateRequest.ProtoReflect.Descriptor instead.
func (*CallUpdateRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{5}
}

func (x *CallUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *CallUpdateRequest) GetUpdate() isCallUpdateRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CallUpdateRequest) GetCandidate() *ICECandidate {
	if x, ok := x.GetUpdate().(*CallUpdateRequest_Candidate); ok {
		return x.Candidate
	}
	return nil
}

func (x *CallUpdateRequest) GetDone() bool {
	if x, ok := x.GetUpdate().(*CallUpdateRequest_Done); ok {
		return x.Done
	}
	return false
}

func (x *CallUpdateRequest) GetError() *status.Status {
	if x, ok := x.GetUpdate().(*CallUpdateRequest_Error); ok {
		return x.Error
	}
	return nil
}

type isCallUpdateRequest_Update interface {
	isCallUpdateRequest_Update()
}

type CallUpdateRequest_Candidate struct {
	Candidate *ICECandidate `protobuf:"bytes,2,opt,name=candidate,proto3,oneof"`
}

type CallUpdateRequest_Done struct {
	Done bool `protobuf:"varint,3,opt,name=done,proto3,oneof"`
}

type CallUpdateRequest_Error struct {
	Error *status.Status `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*CallUpdateRequest_Candidate) isCallUpdateRequest_Update() {}

func (*CallUpdateRequest_Done) isCallUpdateRequest_Update() {}

func (*CallUpdateRequest_Error) isCallUpdateRequest_Update() {}

// CallUpdateResponse contains nothing in response to a call update.
type CallUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallUpdateResponse) Reset() {
	*x = CallUpdateResponse{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUpdateResponse) ProtoMessage() {}

func (x *CallUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUpdateResponse.ProtoReflect.Descriptor instead.
func (*CallUpdateResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{6}
}

// ICEServer describes an ICE server.
type ICEServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls       []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	Username   string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Credential string   `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *ICEServer) Reset() {
	*x = ICEServer{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICEServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICEServer) ProtoMessage() {}

func (x *ICEServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICEServer.ProtoReflect.Descriptor instead.
func (*ICEServer) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{7}
}

func (x *ICEServer) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ICEServer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ICEServer) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// WebRTCConfig represents parts of a WebRTC config.
type WebRTCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalIceServers []*ICEServer `protobuf:"bytes,1,rep,name=additional_ice_servers,json=additionalIceServers,proto3" json:"additional_ice_servers,omitempty"`
	// disable_trickle indicates if Trickle ICE should be used. Currently, both
	// sides must both respect this setting.
	DisableTrickle bool `protobuf:"varint,2,opt,name=disable_trickle,json=disableTrickle,proto3" json:"disable_trickle,omitempty"`
}

func (x *WebRTCConfig) Reset() {
	*x = WebRTCConfig{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCConfig) ProtoMessage() {}

func (x *WebRTCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCConfig.ProtoReflect.Descriptor instead.
func (*WebRTCConfig) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{8}
}

func (x *WebRTCConfig) GetAdditionalIceServers() []*ICEServer {
	if x != nil {
		return x.AdditionalIceServers
	}
	return nil
}

func (x *WebRTCConfig) GetDisableTrickle() bool {
	if x != nil {
		return x.DisableTrickle
	}
	return false
}

// AnswerRequestInitStage is the first and a one time stage that represents the
// callers initial SDP request to the controlled (answerer) side.
type AnswerRequestInitStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp            string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	OptionalConfig *WebRTCConfig          `protobuf:"bytes,2,opt,name=optional_config,json=optionalConfig,proto3" json:"optional_config,omitempty"`
	Deadline       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deadline,proto3,oneof" json:"deadline,omitempty"`
}

func (x *AnswerRequestInitStage) Reset() {
	*x = AnswerRequestInitStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequestInitStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequestInitStage) ProtoMessage() {}

func (x *AnswerRequestInitStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequestInitStage.ProtoReflect.Descriptor instead.
func (*AnswerRequestInitStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{9}
}

func (x *AnswerRequestInitStage) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *AnswerRequestInitStage) GetOptionalConfig() *WebRTCConfig {
	if x != nil {
		return x.OptionalConfig
	}
	return nil
}

func (x *AnswerRequestInitStage) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

// AnswerRequestUpdateStage is multiply used to trickle in ICE candidates to
// the controlled (answerer) side.
type AnswerRequestUpdateStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate *ICECandidate `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *AnswerRequestUpdateStage) Reset() {
	*x = AnswerRequestUpdateStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequestUpdateStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequestUpdateStage) ProtoMessage() {}

func (x *AnswerRequestUpdateStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequestUpdateStage.ProtoReflect.Descriptor instead.
func (*AnswerRequestUpdateStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{10}
}

func (x *AnswerRequestUpdateStage) GetCandidate() *ICECandidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

// AnswerRequestDoneStage indicates the controller is done responding with candidates.
type AnswerRequestDoneStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnswerRequestDoneStage) Reset() {
	*x = AnswerRequestDoneStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequestDoneStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequestDoneStage) ProtoMessage() {}

func (x *AnswerRequestDoneStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequestDoneStage.ProtoReflect.Descriptor instead.
func (*AnswerRequestDoneStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{11}
}

// AnswerRequestErrorStage indicates the exchange has failed with an error.
type AnswerRequestErrorStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AnswerRequestErrorStage) Reset() {
	*x = AnswerRequestErrorStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequestErrorStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequestErrorStage) ProtoMessage() {}

func (x *AnswerRequestErrorStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequestErrorStage.ProtoReflect.Descriptor instead.
func (*AnswerRequestErrorStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{12}
}

func (x *AnswerRequestErrorStage) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// AnswerRequestHeartbeatStage is sent periodically to verify liveness of answerer.
type AnswerRequestHeartbeatStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnswerRequestHeartbeatStage) Reset() {
	*x = AnswerRequestHeartbeatStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequestHeartbeatStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequestHeartbeatStage) ProtoMessage() {}

func (x *AnswerRequestHeartbeatStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequestHeartbeatStage.ProtoReflect.Descriptor instead.
func (*AnswerRequestHeartbeatStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{13}
}

// AnswerRequest is the SDP offer that the controlling side is making via the answering
// stream.
type AnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to Stage:
	//
	//	*AnswerRequest_Init
	//	*AnswerRequest_Update
	//	*AnswerRequest_Done
	//	*AnswerRequest_Error
	//	*AnswerRequest_Heartbeat
	Stage isAnswerRequest_Stage `protobuf_oneof:"stage"`
}

func (x *AnswerRequest) Reset() {
	*x = AnswerRequest{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerRequest) ProtoMessage() {}

func (x *AnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerRequest.ProtoReflect.Descriptor instead.
func (*AnswerRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{14}
}

func (x *AnswerRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *AnswerRequest) GetStage() isAnswerRequest_Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (x *AnswerRequest) GetInit() *AnswerRequestInitStage {
	if x, ok := x.GetStage().(*AnswerRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *AnswerRequest) GetUpdate() *AnswerRequestUpdateStage {
	if x, ok := x.GetStage().(*AnswerRequest_Update); ok {
		return x.Update
	}
	return nil
}

func (x *AnswerRequest) GetDone() *AnswerRequestDoneStage {
	if x, ok := x.GetStage().(*AnswerRequest_Done); ok {
		return x.Done
	}
	return nil
}

func (x *AnswerRequest) GetError() *AnswerRequestErrorStage {
	if x, ok := x.GetStage().(*AnswerRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (x *AnswerRequest) GetHeartbeat() *AnswerRequestHeartbeatStage {
	if x, ok := x.GetStage().(*AnswerRequest_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isAnswerRequest_Stage interface {
	isAnswerRequest_Stage()
}

type AnswerRequest_Init struct {
	Init *AnswerRequestInitStage `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type AnswerRequest_Update struct {
	Update *AnswerRequestUpdateStage `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

type AnswerRequest_Done struct {
	// done is sent when the requester is done sending information
	Done *AnswerRequestDoneStage `protobuf:"bytes,4,opt,name=done,proto3,oneof"`
}

type AnswerRequest_Error struct {
	// error is sent any time before done
	Error *AnswerRequestErrorStage `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

type AnswerRequest_Heartbeat struct {
	// heartbeat is sent periodically to verify liveness of answerer
	Heartbeat *AnswerRequestHeartbeatStage `protobuf:"bytes,6,opt,name=heartbeat,proto3,oneof"`
}

func (*AnswerRequest_Init) isAnswerRequest_Stage() {}

func (*AnswerRequest_Update) isAnswerRequest_Stage() {}

func (*AnswerRequest_Done) isAnswerRequest_Stage() {}

func (*AnswerRequest_Error) isAnswerRequest_Stage() {}

func (*AnswerRequest_Heartbeat) isAnswerRequest_Stage() {}

// AnswerResponseInitStage is the first and a one time stage that represents the
// answerers initial SDP response to the controlling side.
type AnswerResponseInitStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *AnswerResponseInitStage) Reset() {
	*x = AnswerResponseInitStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponseInitStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponseInitStage) ProtoMessage() {}

func (x *AnswerResponseInitStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponseInitStage.ProtoReflect.Descriptor instead.
func (*AnswerResponseInitStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{15}
}

func (x *AnswerResponseInitStage) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// AnswerResponseUpdateStage is multiply used to trickle in ICE candidates to
// the controlling side.
type AnswerResponseUpdateStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate *ICECandidate `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *AnswerResponseUpdateStage) Reset() {
	*x = AnswerResponseUpdateStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponseUpdateStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponseUpdateStage) ProtoMessage() {}

func (x *AnswerResponseUpdateStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponseUpdateStage.ProtoReflect.Descriptor instead.
func (*AnswerResponseUpdateStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{16}
}

func (x *AnswerResponseUpdateStage) GetCandidate() *ICECandidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

// AnswerResponseDoneStage indicates the answerer is done responding with candidates.
type AnswerResponseDoneStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnswerResponseDoneStage) Reset() {
	*x = AnswerResponseDoneStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponseDoneStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponseDoneStage) ProtoMessage() {}

func (x *AnswerResponseDoneStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponseDoneStage.ProtoReflect.Descriptor instead.
func (*AnswerResponseDoneStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{17}
}

// AnswerResponseErrorStage indicates the exchange has failed with an error.
type AnswerResponseErrorStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AnswerResponseErrorStage) Reset() {
	*x = AnswerResponseErrorStage{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponseErrorStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponseErrorStage) ProtoMessage() {}

func (x *AnswerResponseErrorStage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponseErrorStage.ProtoReflect.Descriptor instead.
func (*AnswerResponseErrorStage) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{18}
}

func (x *AnswerResponseErrorStage) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// AnswerResponse is the SDP answer that an answerer responds with.
type AnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to Stage:
	//
	//	*AnswerResponse_Init
	//	*AnswerResponse_Update
	//	*AnswerResponse_Done
	//	*AnswerResponse_Error
	Stage isAnswerResponse_Stage `protobuf_oneof:"stage"`
}

func (x *AnswerResponse) Reset() {
	*x = AnswerResponse{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponse) ProtoMessage() {}

func (x *AnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponse.ProtoReflect.Descriptor instead.
func (*AnswerResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{19}
}

func (x *AnswerResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *AnswerResponse) GetStage() isAnswerResponse_Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (x *AnswerResponse) GetInit() *AnswerResponseInitStage {
	if x, ok := x.GetStage().(*AnswerResponse_Init); ok {
		return x.Init
	}
	return nil
}

func (x *AnswerResponse) GetUpdate() *AnswerResponseUpdateStage {
	if x, ok := x.GetStage().(*AnswerResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (x *AnswerResponse) GetDone() *AnswerResponseDoneStage {
	if x, ok := x.GetStage().(*AnswerResponse_Done); ok {
		return x.Done
	}
	return nil
}

func (x *AnswerResponse) GetError() *AnswerResponseErrorStage {
	if x, ok := x.GetStage().(*AnswerResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isAnswerResponse_Stage interface {
	isAnswerResponse_Stage()
}

type AnswerResponse_Init struct {
	Init *AnswerResponseInitStage `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type AnswerResponse_Update struct {
	Update *AnswerResponseUpdateStage `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

type AnswerResponse_Done struct {
	// done is sent when the answerer is done sending information
	Done *AnswerResponseDoneStage `protobuf:"bytes,4,opt,name=done,proto3,oneof"`
}

type AnswerResponse_Error struct {
	// error is sent any time before done
	Error *AnswerResponseErrorStage `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*AnswerResponse_Init) isAnswerResponse_Stage() {}

func (*AnswerResponse_Update) isAnswerResponse_Stage() {}

func (*AnswerResponse_Done) isAnswerResponse_Stage() {}

func (*AnswerResponse_Error) isAnswerResponse_Stage() {}

// OptionalWebRTCConfigRequest is the request for getting an optional WebRTC config
// to use for the peer connection.
type OptionalWebRTCConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OptionalWebRTCConfigRequest) Reset() {
	*x = OptionalWebRTCConfigRequest{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalWebRTCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalWebRTCConfigRequest) ProtoMessage() {}

func (x *OptionalWebRTCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalWebRTCConfigRequest.ProtoReflect.Descriptor instead.
func (*OptionalWebRTCConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{20}
}

// OptionalWebRTCConfigResponse contains the optional WebRTC config
// to use for the peer connection.
type OptionalWebRTCConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *WebRTCConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *OptionalWebRTCConfigResponse) Reset() {
	*x = OptionalWebRTCConfigResponse{}
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalWebRTCConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalWebRTCConfigResponse) ProtoMessage() {}

func (x *OptionalWebRTCConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalWebRTCConfigResponse.ProtoReflect.Descriptor instead.
func (*OptionalWebRTCConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP(), []int{21}
}

func (x *OptionalWebRTCConfigResponse) GetConfig() *WebRTCConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_proto_rpc_webrtc_v1_signaling_proto protoreflect.FileDescriptor

var file_proto_rpc_webrtc_v1_signaling_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x73, 0x64, 0x70, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x6d,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x64, 0x70, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x22, 0x29,
	0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x5a, 0x0a, 0x17, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x43,
	0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x09,
	0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x16, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x63,
	0x6b, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x5b, 0x0a, 0x18,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x0d, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x2b, 0x0a, 0x17, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x5c, 0x0a, 0x19,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc6, 0x02,
	0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x1c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52,
	0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x86, 0x04, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x30,
	0x01, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x1a, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12, 0xaa, 0x01, 0x0a,
	0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x12, 0x25, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_rpc_webrtc_v1_signaling_proto_rawDescOnce sync.Once
	file_proto_rpc_webrtc_v1_signaling_proto_rawDescData = file_proto_rpc_webrtc_v1_signaling_proto_rawDesc
)

func file_proto_rpc_webrtc_v1_signaling_proto_rawDescGZIP() []byte {
	file_proto_rpc_webrtc_v1_signaling_proto_rawDescOnce.Do(func() {
		file_proto_rpc_webrtc_v1_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rpc_webrtc_v1_signaling_proto_rawDescData)
	})
	return file_proto_rpc_webrtc_v1_signaling_proto_rawDescData
}

var file_proto_rpc_webrtc_v1_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_rpc_webrtc_v1_signaling_proto_goTypes = []any{
	(*ICECandidate)(nil),                 // 0: proto.rpc.webrtc.v1.ICECandidate
	(*CallRequest)(nil),                  // 1: proto.rpc.webrtc.v1.CallRequest
	(*CallResponseInitStage)(nil),        // 2: proto.rpc.webrtc.v1.CallResponseInitStage
	(*CallResponseUpdateStage)(nil),      // 3: proto.rpc.webrtc.v1.CallResponseUpdateStage
	(*CallResponse)(nil),                 // 4: proto.rpc.webrtc.v1.CallResponse
	(*CallUpdateRequest)(nil),            // 5: proto.rpc.webrtc.v1.CallUpdateRequest
	(*CallUpdateResponse)(nil),           // 6: proto.rpc.webrtc.v1.CallUpdateResponse
	(*ICEServer)(nil),                    // 7: proto.rpc.webrtc.v1.ICEServer
	(*WebRTCConfig)(nil),                 // 8: proto.rpc.webrtc.v1.WebRTCConfig
	(*AnswerRequestInitStage)(nil),       // 9: proto.rpc.webrtc.v1.AnswerRequestInitStage
	(*AnswerRequestUpdateStage)(nil),     // 10: proto.rpc.webrtc.v1.AnswerRequestUpdateStage
	(*AnswerRequestDoneStage)(nil),       // 11: proto.rpc.webrtc.v1.AnswerRequestDoneStage
	(*AnswerRequestErrorStage)(nil),      // 12: proto.rpc.webrtc.v1.AnswerRequestErrorStage
	(*AnswerRequestHeartbeatStage)(nil),  // 13: proto.rpc.webrtc.v1.AnswerRequestHeartbeatStage
	(*AnswerRequest)(nil),                // 14: proto.rpc.webrtc.v1.AnswerRequest
	(*AnswerResponseInitStage)(nil),      // 15: proto.rpc.webrtc.v1.AnswerResponseInitStage
	(*AnswerResponseUpdateStage)(nil),    // 16: proto.rpc.webrtc.v1.AnswerResponseUpdateStage
	(*AnswerResponseDoneStage)(nil),      // 17: proto.rpc.webrtc.v1.AnswerResponseDoneStage
	(*AnswerResponseErrorStage)(nil),     // 18: proto.rpc.webrtc.v1.AnswerResponseErrorStage
	(*AnswerResponse)(nil),               // 19: proto.rpc.webrtc.v1.AnswerResponse
	(*OptionalWebRTCConfigRequest)(nil),  // 20: proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest
	(*OptionalWebRTCConfigResponse)(nil), // 21: proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse
	(*status.Status)(nil),                // 22: google.rpc.Status
	(*timestamppb.Timestamp)(nil),        // 23: google.protobuf.Timestamp
}
var file_proto_rpc_webrtc_v1_signaling_proto_depIdxs = []int32{
	0,  // 0: proto.rpc.webrtc.v1.CallResponseUpdateStage.candidate:type_name -> proto.rpc.webrtc.v1.ICECandidate
	2,  // 1: proto.rpc.webrtc.v1.CallResponse.init:type_name -> proto.rpc.webrtc.v1.CallResponseInitStage
	3,  // 2: proto.rpc.webrtc.v1.CallResponse.update:type_name -> proto.rpc.webrtc.v1.CallResponseUpdateStage
	0,  // 3: proto.rpc.webrtc.v1.CallUpdateRequest.candidate:type_name -> proto.rpc.webrtc.v1.ICECandidate
	22, // 4: proto.rpc.webrtc.v1.CallUpdateRequest.error:type_name -> google.rpc.Status
	7,  // 5: proto.rpc.webrtc.v1.WebRTCConfig.additional_ice_servers:type_name -> proto.rpc.webrtc.v1.ICEServer
	8,  // 6: proto.rpc.webrtc.v1.AnswerRequestInitStage.optional_config:type_name -> proto.rpc.webrtc.v1.WebRTCConfig
	23, // 7: proto.rpc.webrtc.v1.AnswerRequestInitStage.deadline:type_name -> google.protobuf.Timestamp
	0,  // 8: proto.rpc.webrtc.v1.AnswerRequestUpdateStage.candidate:type_name -> proto.rpc.webrtc.v1.ICECandidate
	22, // 9: proto.rpc.webrtc.v1.AnswerRequestErrorStage.status:type_name -> google.rpc.Status
	9,  // 10: proto.rpc.webrtc.v1.AnswerRequest.init:type_name -> proto.rpc.webrtc.v1.AnswerRequestInitStage
	10, // 11: proto.rpc.webrtc.v1.AnswerRequest.update:type_name -> proto.rpc.webrtc.v1.AnswerRequestUpdateStage
	11, // 12: proto.rpc.webrtc.v1.AnswerRequest.done:type_name -> proto.rpc.webrtc.v1.AnswerRequestDoneStage
	12, // 13: proto.rpc.webrtc.v1.AnswerRequest.error:type_name -> proto.rpc.webrtc.v1.AnswerRequestErrorStage
	13, // 14: proto.rpc.webrtc.v1.AnswerRequest.heartbeat:type_name -> proto.rpc.webrtc.v1.AnswerRequestHeartbeatStage
	0,  // 15: proto.rpc.webrtc.v1.AnswerResponseUpdateStage.candidate:type_name -> proto.rpc.webrtc.v1.ICECandidate
	22, // 16: proto.rpc.webrtc.v1.AnswerResponseErrorStage.status:type_name -> google.rpc.Status
	15, // 17: proto.rpc.webrtc.v1.AnswerResponse.init:type_name -> proto.rpc.webrtc.v1.AnswerResponseInitStage
	16, // 18: proto.rpc.webrtc.v1.AnswerResponse.update:type_name -> proto.rpc.webrtc.v1.AnswerResponseUpdateStage
	17, // 19: proto.rpc.webrtc.v1.AnswerResponse.done:type_name -> proto.rpc.webrtc.v1.AnswerResponseDoneStage
	18, // 20: proto.rpc.webrtc.v1.AnswerResponse.error:type_name -> proto.rpc.webrtc.v1.AnswerResponseErrorStage
	8,  // 21: proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.config:type_name -> proto.rpc.webrtc.v1.WebRTCConfig
	1,  // 22: proto.rpc.webrtc.v1.SignalingService.Call:input_type -> proto.rpc.webrtc.v1.CallRequest
	5,  // 23: proto.rpc.webrtc.v1.SignalingService.CallUpdate:input_type -> proto.rpc.webrtc.v1.CallUpdateRequest
	19, // 24: proto.rpc.webrtc.v1.SignalingService.Answer:input_type -> proto.rpc.webrtc.v1.AnswerResponse
	20, // 25: proto.rpc.webrtc.v1.SignalingService.OptionalWebRTCConfig:input_type -> proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest
	4,  // 26: proto.rpc.webrtc.v1.SignalingService.Call:output_type -> proto.rpc.webrtc.v1.CallResponse
	6,  // 27: proto.rpc.webrtc.v1.SignalingService.CallUpdate:output_type -> proto.rpc.webrtc.v1.CallUpdateResponse
	14, // 28: proto.rpc.webrtc.v1.SignalingService.Answer:output_type -> proto.rpc.webrtc.v1.AnswerRequest
	21, // 29: proto.rpc.webrtc.v1.SignalingService.OptionalWebRTCConfig:output_type -> proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_rpc_webrtc_v1_signaling_proto_init() }
func file_proto_rpc_webrtc_v1_signaling_proto_init() {
	if File_proto_rpc_webrtc_v1_signaling_proto != nil {
		return
	}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[4].OneofWrappers = []any{
		(*CallResponse_Init)(nil),
		(*CallResponse_Update)(nil),
	}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[5].OneofWrappers = []any{
		(*CallUpdateRequest_Candidate)(nil),
		(*CallUpdateRequest_Done)(nil),
		(*CallUpdateRequest_Error)(nil),
	}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[9].OneofWrappers = []any{}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[14].OneofWrappers = []any{
		(*AnswerRequest_Init)(nil),
		(*AnswerRequest_Update)(nil),
		(*AnswerRequest_Done)(nil),
		(*AnswerRequest_Error)(nil),
		(*AnswerRequest_Heartbeat)(nil),
	}
	file_proto_rpc_webrtc_v1_signaling_proto_msgTypes[19].OneofWrappers = []any{
		(*AnswerResponse_Init)(nil),
		(*AnswerResponse_Update)(nil),
		(*AnswerResponse_Done)(nil),
		(*AnswerResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rpc_webrtc_v1_signaling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rpc_webrtc_v1_signaling_proto_goTypes,
		DependencyIndexes: file_proto_rpc_webrtc_v1_signaling_proto_depIdxs,
		MessageInfos:      file_proto_rpc_webrtc_v1_signaling_proto_msgTypes,
	}.Build()
	File_proto_rpc_webrtc_v1_signaling_proto = out.File
	file_proto_rpc_webrtc_v1_signaling_proto_rawDesc = nil
	file_proto_rpc_webrtc_v1_signaling_proto_goTypes = nil
	file_proto_rpc_webrtc_v1_signaling_proto_depIdxs = nil
}
