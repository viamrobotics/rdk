// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/rpc/examples/echoresource/v1/echoresource.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EchoResourceService_EchoResource_FullMethodName         = "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResource"
	EchoResourceService_EchoResourceMultiple_FullMethodName = "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResourceMultiple"
	EchoResourceService_EchoResourceBiDi_FullMethodName     = "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResourceBiDi"
)

// EchoResourceServiceClient is the client API for EchoResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoResourceServiceClient interface {
	EchoResource(ctx context.Context, in *EchoResourceRequest, opts ...grpc.CallOption) (*EchoResourceResponse, error)
	EchoResourceMultiple(ctx context.Context, in *EchoResourceMultipleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoResourceMultipleResponse], error)
	EchoResourceBiDi(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoResourceBiDiRequest, EchoResourceBiDiResponse], error)
}

type echoResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoResourceServiceClient(cc grpc.ClientConnInterface) EchoResourceServiceClient {
	return &echoResourceServiceClient{cc}
}

func (c *echoResourceServiceClient) EchoResource(ctx context.Context, in *EchoResourceRequest, opts ...grpc.CallOption) (*EchoResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResourceResponse)
	err := c.cc.Invoke(ctx, EchoResourceService_EchoResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoResourceServiceClient) EchoResourceMultiple(ctx context.Context, in *EchoResourceMultipleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoResourceMultipleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoResourceService_ServiceDesc.Streams[0], EchoResourceService_EchoResourceMultiple_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoResourceMultipleRequest, EchoResourceMultipleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoResourceService_EchoResourceMultipleClient = grpc.ServerStreamingClient[EchoResourceMultipleResponse]

func (c *echoResourceServiceClient) EchoResourceBiDi(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoResourceBiDiRequest, EchoResourceBiDiResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoResourceService_ServiceDesc.Streams[1], EchoResourceService_EchoResourceBiDi_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoResourceBiDiRequest, EchoResourceBiDiResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoResourceService_EchoResourceBiDiClient = grpc.BidiStreamingClient[EchoResourceBiDiRequest, EchoResourceBiDiResponse]

// EchoResourceServiceServer is the server API for EchoResourceService service.
// All implementations must embed UnimplementedEchoResourceServiceServer
// for forward compatibility.
type EchoResourceServiceServer interface {
	EchoResource(context.Context, *EchoResourceRequest) (*EchoResourceResponse, error)
	EchoResourceMultiple(*EchoResourceMultipleRequest, grpc.ServerStreamingServer[EchoResourceMultipleResponse]) error
	EchoResourceBiDi(grpc.BidiStreamingServer[EchoResourceBiDiRequest, EchoResourceBiDiResponse]) error
	mustEmbedUnimplementedEchoResourceServiceServer()
}

// UnimplementedEchoResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEchoResourceServiceServer struct{}

func (UnimplementedEchoResourceServiceServer) EchoResource(context.Context, *EchoResourceRequest) (*EchoResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoResource not implemented")
}
func (UnimplementedEchoResourceServiceServer) EchoResourceMultiple(*EchoResourceMultipleRequest, grpc.ServerStreamingServer[EchoResourceMultipleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoResourceMultiple not implemented")
}
func (UnimplementedEchoResourceServiceServer) EchoResourceBiDi(grpc.BidiStreamingServer[EchoResourceBiDiRequest, EchoResourceBiDiResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoResourceBiDi not implemented")
}
func (UnimplementedEchoResourceServiceServer) mustEmbedUnimplementedEchoResourceServiceServer() {}
func (UnimplementedEchoResourceServiceServer) testEmbeddedByValue()                             {}

// UnsafeEchoResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoResourceServiceServer will
// result in compilation errors.
type UnsafeEchoResourceServiceServer interface {
	mustEmbedUnimplementedEchoResourceServiceServer()
}

func RegisterEchoResourceServiceServer(s grpc.ServiceRegistrar, srv EchoResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedEchoResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EchoResourceService_ServiceDesc, srv)
}

func _EchoResourceService_EchoResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoResourceServiceServer).EchoResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoResourceService_EchoResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoResourceServiceServer).EchoResource(ctx, req.(*EchoResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoResourceService_EchoResourceMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoResourceMultipleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoResourceServiceServer).EchoResourceMultiple(m, &grpc.GenericServerStream[EchoResourceMultipleRequest, EchoResourceMultipleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoResourceService_EchoResourceMultipleServer = grpc.ServerStreamingServer[EchoResourceMultipleResponse]

func _EchoResourceService_EchoResourceBiDi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoResourceServiceServer).EchoResourceBiDi(&grpc.GenericServerStream[EchoResourceBiDiRequest, EchoResourceBiDiResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoResourceService_EchoResourceBiDiServer = grpc.BidiStreamingServer[EchoResourceBiDiRequest, EchoResourceBiDiResponse]

// EchoResourceService_ServiceDesc is the grpc.ServiceDesc for EchoResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.examples.echoresource.v1.EchoResourceService",
	HandlerType: (*EchoResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoResource",
			Handler:    _EchoResourceService_EchoResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoResourceMultiple",
			Handler:       _EchoResourceService_EchoResourceMultiple_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoResourceBiDi",
			Handler:       _EchoResourceService_EchoResourceBiDi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rpc/examples/echoresource/v1/echoresource.proto",
}
