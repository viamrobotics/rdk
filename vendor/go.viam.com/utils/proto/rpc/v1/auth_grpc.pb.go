// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/rpc/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Authenticate_FullMethodName = "/proto.rpc.v1.AuthService/Authenticate"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An AuthService is intended to be used as a means to perform application level
// authentication. Its sole Authenticate method should be used prior to any
// other services that a gRPC server has to offer.
type AuthServiceClient interface {
	// Authenticate attempts to authenticate the caller claiming to be
	// the given entity. The resulting response contains an access token
	// with the subject as the entity and the audience/issuer as the
	// provider of this service. This token should be used for all future
	// RPC requests.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, AuthService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// An AuthService is intended to be used as a means to perform application level
// authentication. Its sole Authenticate method should be used prior to any
// other services that a gRPC server has to offer.
type AuthServiceServer interface {
	// Authenticate attempts to authenticate the caller claiming to be
	// the given entity. The resulting response contains an access token
	// with the subject as the entity and the audience/issuer as the
	// provider of this service. This token should be used for all future
	// RPC requests.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthService_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/auth.proto",
}

const (
	ExternalAuthService_AuthenticateTo_FullMethodName = "/proto.rpc.v1.ExternalAuthService/AuthenticateTo"
)

// ExternalAuthServiceClient is the client API for ExternalAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An ExternalAuthService is intended to be used as a means to perform application level
// authentication but for an external entity that it is responsible for handling auth for.
// An example of its use would be for a entity that only trusts an external source to
// perform authentication for it.
// Its sole AuthenticateTo method should be used prior to any other services that the external
// entity's gRPC server has to offer.
type ExternalAuthServiceClient interface {
	// AuthenticateTo attempts to allow the caller to authenticate to another entity.
	// The resulting response contains an access token with the subject
	// as the calling entity, the audience as the other entity, and the issuer
	// as the provider of this service. This token should be used for all
	// future RPC requests to the other entity on the services it provides.
	// This assumes that the caller is already authenticated to the
	// server implementing this service.
	AuthenticateTo(ctx context.Context, in *AuthenticateToRequest, opts ...grpc.CallOption) (*AuthenticateToResponse, error)
}

type externalAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuthServiceClient(cc grpc.ClientConnInterface) ExternalAuthServiceClient {
	return &externalAuthServiceClient{cc}
}

func (c *externalAuthServiceClient) AuthenticateTo(ctx context.Context, in *AuthenticateToRequest, opts ...grpc.CallOption) (*AuthenticateToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateToResponse)
	err := c.cc.Invoke(ctx, ExternalAuthService_AuthenticateTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuthServiceServer is the server API for ExternalAuthService service.
// All implementations must embed UnimplementedExternalAuthServiceServer
// for forward compatibility.
//
// An ExternalAuthService is intended to be used as a means to perform application level
// authentication but for an external entity that it is responsible for handling auth for.
// An example of its use would be for a entity that only trusts an external source to
// perform authentication for it.
// Its sole AuthenticateTo method should be used prior to any other services that the external
// entity's gRPC server has to offer.
type ExternalAuthServiceServer interface {
	// AuthenticateTo attempts to allow the caller to authenticate to another entity.
	// The resulting response contains an access token with the subject
	// as the calling entity, the audience as the other entity, and the issuer
	// as the provider of this service. This token should be used for all
	// future RPC requests to the other entity on the services it provides.
	// This assumes that the caller is already authenticated to the
	// server implementing this service.
	AuthenticateTo(context.Context, *AuthenticateToRequest) (*AuthenticateToResponse, error)
	mustEmbedUnimplementedExternalAuthServiceServer()
}

// UnimplementedExternalAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalAuthServiceServer struct{}

func (UnimplementedExternalAuthServiceServer) AuthenticateTo(context.Context, *AuthenticateToRequest) (*AuthenticateToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateTo not implemented")
}
func (UnimplementedExternalAuthServiceServer) mustEmbedUnimplementedExternalAuthServiceServer() {}
func (UnimplementedExternalAuthServiceServer) testEmbeddedByValue()                             {}

// UnsafeExternalAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuthServiceServer will
// result in compilation errors.
type UnsafeExternalAuthServiceServer interface {
	mustEmbedUnimplementedExternalAuthServiceServer()
}

func RegisterExternalAuthServiceServer(s grpc.ServiceRegistrar, srv ExternalAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedExternalAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalAuthService_ServiceDesc, srv)
}

func _ExternalAuthService_AuthenticateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuthServiceServer).AuthenticateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuthService_AuthenticateTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuthServiceServer).AuthenticateTo(ctx, req.(*AuthenticateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuthService_ServiceDesc is the grpc.ServiceDesc for ExternalAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.v1.ExternalAuthService",
	HandlerType: (*ExternalAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateTo",
			Handler:    _ExternalAuthService_AuthenticateTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/auth.proto",
}
