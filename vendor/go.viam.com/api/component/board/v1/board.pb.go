// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: component/board/v1/board.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PowerMode int32

const (
	PowerMode_POWER_MODE_UNSPECIFIED  PowerMode = 0
	PowerMode_POWER_MODE_NORMAL       PowerMode = 1
	PowerMode_POWER_MODE_OFFLINE_DEEP PowerMode = 2
)

// Enum value maps for PowerMode.
var (
	PowerMode_name = map[int32]string{
		0: "POWER_MODE_UNSPECIFIED",
		1: "POWER_MODE_NORMAL",
		2: "POWER_MODE_OFFLINE_DEEP",
	}
	PowerMode_value = map[string]int32{
		"POWER_MODE_UNSPECIFIED":  0,
		"POWER_MODE_NORMAL":       1,
		"POWER_MODE_OFFLINE_DEEP": 2,
	}
)

func (x PowerMode) Enum() *PowerMode {
	p := new(PowerMode)
	*p = x
	return p
}

func (x PowerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_component_board_v1_board_proto_enumTypes[0].Descriptor()
}

func (PowerMode) Type() protoreflect.EnumType {
	return &file_component_board_v1_board_proto_enumTypes[0]
}

func (x PowerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerMode.Descriptor instead.
func (PowerMode) EnumDescriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analogs           map[string]int32 `protobuf:"bytes,1,rep,name=analogs,proto3" json:"analogs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DigitalInterrupts map[string]int64 `protobuf:"bytes,2,rep,name=digital_interrupts,json=digitalInterrupts,proto3" json:"digital_interrupts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_component_board_v1_board_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetAnalogs() map[string]int32 {
	if x != nil {
		return x.Analogs
	}
	return nil
}

func (x *Status) GetDigitalInterrupts() map[string]int64 {
	if x != nil {
		return x.DigitalInterrupts
	}
	return nil
}

type SetGPIORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin  string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	High bool   `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *SetGPIORequest) Reset() {
	*x = SetGPIORequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGPIORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGPIORequest) ProtoMessage() {}

func (x *SetGPIORequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGPIORequest.ProtoReflect.Descriptor instead.
func (*SetGPIORequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{1}
}

func (x *SetGPIORequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetGPIORequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SetGPIORequest) GetHigh() bool {
	if x != nil {
		return x.High
	}
	return false
}

func (x *SetGPIORequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetGPIOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetGPIOResponse) Reset() {
	*x = SetGPIOResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGPIOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGPIOResponse) ProtoMessage() {}

func (x *SetGPIOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGPIOResponse.ProtoReflect.Descriptor instead.
func (*SetGPIOResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{2}
}

type GetGPIORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin  string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GetGPIORequest) Reset() {
	*x = GetGPIORequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGPIORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGPIORequest) ProtoMessage() {}

func (x *GetGPIORequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGPIORequest.ProtoReflect.Descriptor instead.
func (*GetGPIORequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{3}
}

func (x *GetGPIORequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGPIORequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *GetGPIORequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetGPIOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High bool `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *GetGPIOResponse) Reset() {
	*x = GetGPIOResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGPIOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGPIOResponse) ProtoMessage() {}

func (x *GetGPIOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGPIOResponse.ProtoReflect.Descriptor instead.
func (*GetGPIOResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{4}
}

func (x *GetGPIOResponse) GetHigh() bool {
	if x != nil {
		return x.High
	}
	return false
}

type PWMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin  string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *PWMRequest) Reset() {
	*x = PWMRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PWMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PWMRequest) ProtoMessage() {}

func (x *PWMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PWMRequest.ProtoReflect.Descriptor instead.
func (*PWMRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{5}
}

func (x *PWMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PWMRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *PWMRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PWMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutyCyclePct float64 `protobuf:"fixed64,1,opt,name=duty_cycle_pct,json=dutyCyclePct,proto3" json:"duty_cycle_pct,omitempty"` // 0-1
}

func (x *PWMResponse) Reset() {
	*x = PWMResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PWMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PWMResponse) ProtoMessage() {}

func (x *PWMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PWMResponse.ProtoReflect.Descriptor instead.
func (*PWMResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{6}
}

func (x *PWMResponse) GetDutyCyclePct() float64 {
	if x != nil {
		return x.DutyCyclePct
	}
	return 0
}

type SetPWMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin          string  `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	DutyCyclePct float64 `protobuf:"fixed64,3,opt,name=duty_cycle_pct,json=dutyCyclePct,proto3" json:"duty_cycle_pct,omitempty"` // 0-1
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *SetPWMRequest) Reset() {
	*x = SetPWMRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPWMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPWMRequest) ProtoMessage() {}

func (x *SetPWMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPWMRequest.ProtoReflect.Descriptor instead.
func (*SetPWMRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{7}
}

func (x *SetPWMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetPWMRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SetPWMRequest) GetDutyCyclePct() float64 {
	if x != nil {
		return x.DutyCyclePct
	}
	return 0
}

func (x *SetPWMRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetPWMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPWMResponse) Reset() {
	*x = SetPWMResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPWMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPWMResponse) ProtoMessage() {}

func (x *SetPWMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPWMResponse.ProtoReflect.Descriptor instead.
func (*SetPWMResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{8}
}

type PWMFrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin  string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *PWMFrequencyRequest) Reset() {
	*x = PWMFrequencyRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PWMFrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PWMFrequencyRequest) ProtoMessage() {}

func (x *PWMFrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PWMFrequencyRequest.ProtoReflect.Descriptor instead.
func (*PWMFrequencyRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{9}
}

func (x *PWMFrequencyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PWMFrequencyRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *PWMFrequencyRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PWMFrequencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrequencyHz uint64 `protobuf:"varint,1,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty"`
}

func (x *PWMFrequencyResponse) Reset() {
	*x = PWMFrequencyResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PWMFrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PWMFrequencyResponse) ProtoMessage() {}

func (x *PWMFrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PWMFrequencyResponse.ProtoReflect.Descriptor instead.
func (*PWMFrequencyResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{10}
}

func (x *PWMFrequencyResponse) GetFrequencyHz() uint64 {
	if x != nil {
		return x.FrequencyHz
	}
	return 0
}

type SetPWMFrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin         string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	FrequencyHz uint64 `protobuf:"varint,3,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *SetPWMFrequencyRequest) Reset() {
	*x = SetPWMFrequencyRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPWMFrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPWMFrequencyRequest) ProtoMessage() {}

func (x *SetPWMFrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPWMFrequencyRequest.ProtoReflect.Descriptor instead.
func (*SetPWMFrequencyRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{11}
}

func (x *SetPWMFrequencyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetPWMFrequencyRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SetPWMFrequencyRequest) GetFrequencyHz() uint64 {
	if x != nil {
		return x.FrequencyHz
	}
	return 0
}

func (x *SetPWMFrequencyRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetPWMFrequencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPWMFrequencyResponse) Reset() {
	*x = SetPWMFrequencyResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPWMFrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPWMFrequencyResponse) ProtoMessage() {}

func (x *SetPWMFrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPWMFrequencyResponse.ProtoReflect.Descriptor instead.
func (*SetPWMFrequencyResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{12}
}

type ReadAnalogReaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardName        string `protobuf:"bytes,1,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty"`
	AnalogReaderName string `protobuf:"bytes,2,opt,name=analog_reader_name,json=analogReaderName,proto3" json:"analog_reader_name,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ReadAnalogReaderRequest) Reset() {
	*x = ReadAnalogReaderRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAnalogReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAnalogReaderRequest) ProtoMessage() {}

func (x *ReadAnalogReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAnalogReaderRequest.ProtoReflect.Descriptor instead.
func (*ReadAnalogReaderRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{13}
}

func (x *ReadAnalogReaderRequest) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *ReadAnalogReaderRequest) GetAnalogReaderName() string {
	if x != nil {
		return x.AnalogReaderName
	}
	return ""
}

func (x *ReadAnalogReaderRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ReadAnalogReaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	MinRange float32 `protobuf:"fixed32,2,opt,name=min_range,json=minRange,proto3" json:"min_range,omitempty"`
	MaxRange float32 `protobuf:"fixed32,3,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	StepSize float32 `protobuf:"fixed32,4,opt,name=step_size,json=stepSize,proto3" json:"step_size,omitempty"`
}

func (x *ReadAnalogReaderResponse) Reset() {
	*x = ReadAnalogReaderResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAnalogReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAnalogReaderResponse) ProtoMessage() {}

func (x *ReadAnalogReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAnalogReaderResponse.ProtoReflect.Descriptor instead.
func (*ReadAnalogReaderResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{14}
}

func (x *ReadAnalogReaderResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReadAnalogReaderResponse) GetMinRange() float32 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *ReadAnalogReaderResponse) GetMaxRange() float32 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *ReadAnalogReaderResponse) GetStepSize() float32 {
	if x != nil {
		return x.StepSize
	}
	return 0
}

type WriteAnalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pin   string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	Value int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *WriteAnalogRequest) Reset() {
	*x = WriteAnalogRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteAnalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAnalogRequest) ProtoMessage() {}

func (x *WriteAnalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAnalogRequest.ProtoReflect.Descriptor instead.
func (*WriteAnalogRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{15}
}

func (x *WriteAnalogRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WriteAnalogRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *WriteAnalogRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WriteAnalogRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type WriteAnalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteAnalogResponse) Reset() {
	*x = WriteAnalogResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteAnalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAnalogResponse) ProtoMessage() {}

func (x *WriteAnalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAnalogResponse.ProtoReflect.Descriptor instead.
func (*WriteAnalogResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{16}
}

type GetDigitalInterruptValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardName            string `protobuf:"bytes,1,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty"`
	DigitalInterruptName string `protobuf:"bytes,2,opt,name=digital_interrupt_name,json=digitalInterruptName,proto3" json:"digital_interrupt_name,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GetDigitalInterruptValueRequest) Reset() {
	*x = GetDigitalInterruptValueRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDigitalInterruptValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitalInterruptValueRequest) ProtoMessage() {}

func (x *GetDigitalInterruptValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitalInterruptValueRequest.ProtoReflect.Descriptor instead.
func (*GetDigitalInterruptValueRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{17}
}

func (x *GetDigitalInterruptValueRequest) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *GetDigitalInterruptValueRequest) GetDigitalInterruptName() string {
	if x != nil {
		return x.DigitalInterruptName
	}
	return ""
}

func (x *GetDigitalInterruptValueRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetDigitalInterruptValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetDigitalInterruptValueResponse) Reset() {
	*x = GetDigitalInterruptValueResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDigitalInterruptValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitalInterruptValueResponse) ProtoMessage() {}

func (x *GetDigitalInterruptValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitalInterruptValueResponse.ProtoReflect.Descriptor instead.
func (*GetDigitalInterruptValueResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{18}
}

func (x *GetDigitalInterruptValueResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StreamTicksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of digital interrupts to recieve ticks from
	PinNames []string `protobuf:"bytes,2,rep,name=pin_names,json=pinNames,proto3" json:"pin_names,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *StreamTicksRequest) Reset() {
	*x = StreamTicksRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTicksRequest) ProtoMessage() {}

func (x *StreamTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTicksRequest.ProtoReflect.Descriptor instead.
func (*StreamTicksRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{19}
}

func (x *StreamTicksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamTicksRequest) GetPinNames() []string {
	if x != nil {
		return x.PinNames
	}
	return nil
}

func (x *StreamTicksRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type StreamTicksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of interrupt
	PinName string `protobuf:"bytes,1,opt,name=pin_name,json=pinName,proto3" json:"pin_name,omitempty"`
	// Time in nanoseconds of a tick
	Time uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Value high or low of the tick
	High bool `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *StreamTicksResponse) Reset() {
	*x = StreamTicksResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTicksResponse) ProtoMessage() {}

func (x *StreamTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTicksResponse.ProtoReflect.Descriptor instead.
func (*StreamTicksResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{20}
}

func (x *StreamTicksResponse) GetPinName() string {
	if x != nil {
		return x.PinName
	}
	return ""
}

func (x *StreamTicksResponse) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StreamTicksResponse) GetHigh() bool {
	if x != nil {
		return x.High
	}
	return false
}

type SetPowerModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of board
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Requested power mode
	PowerMode PowerMode `protobuf:"varint,2,opt,name=power_mode,json=powerMode,proto3,enum=viam.component.board.v1.PowerMode" json:"power_mode,omitempty"`
	// Requested duration to stay in `power_mode`
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *SetPowerModeRequest) Reset() {
	*x = SetPowerModeRequest{}
	mi := &file_component_board_v1_board_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPowerModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerModeRequest) ProtoMessage() {}

func (x *SetPowerModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerModeRequest.ProtoReflect.Descriptor instead.
func (*SetPowerModeRequest) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{21}
}

func (x *SetPowerModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetPowerModeRequest) GetPowerMode() PowerMode {
	if x != nil {
		return x.PowerMode
	}
	return PowerMode_POWER_MODE_UNSPECIFIED
}

func (x *SetPowerModeRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SetPowerModeRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetPowerModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPowerModeResponse) Reset() {
	*x = SetPowerModeResponse{}
	mi := &file_component_board_v1_board_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPowerModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerModeResponse) ProtoMessage() {}

func (x *SetPowerModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_board_v1_board_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerModeResponse.ProtoReflect.Descriptor instead.
func (*SetPowerModeResponse) Descriptor() ([]byte, []int) {
	return file_component_board_v1_board_proto_rawDescGZIP(), []int{22}
}

var File_component_board_v1_board_proto protoreflect.FileDescriptor

var file_component_board_v1_board_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x65, 0x0a, 0x12, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x50,
	0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x25,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0x61, 0x0a, 0x0a, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x57, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x75, 0x74, 0x79, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x64, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x63, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64,
	0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x13,
	0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x39, 0x0a, 0x14, 0x50, 0x57, 0x4d, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x48, 0x7a, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0x38, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a,
	0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0xe4, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5b, 0x0a, 0x09,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x10, 0x02, 0x32, 0xf0, 0x10, 0x0a, 0x0c, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x50, 0x49,
	0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x1a, 0x28, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x67, 0x70, 0x69, 0x6f, 0x12, 0x8e, 0x01, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x50,
	0x49, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x67, 0x70, 0x69, 0x6f, 0x12, 0x81, 0x01, 0x0a,
	0x03, 0x50, 0x57, 0x4d, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x57, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x77, 0x6d,
	0x12, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x12, 0x26, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x1a, 0x27, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x77, 0x6d, 0x12, 0xa1, 0x01,
	0x0a, 0x0c, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x77, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x12, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x57, 0x4d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x1a, 0x2c, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x77, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x12, 0x88,
	0x01, 0x0a, 0x09, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x76, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x12, 0x51, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x12, 0xa2,
	0x01, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2b,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x1a, 0x30, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x5a, 0x2f,
	0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x2f, 0x7b, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12,
	0xa3, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x41, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x5a, 0x22, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_component_board_v1_board_proto_rawDescOnce sync.Once
	file_component_board_v1_board_proto_rawDescData = file_component_board_v1_board_proto_rawDesc
)

func file_component_board_v1_board_proto_rawDescGZIP() []byte {
	file_component_board_v1_board_proto_rawDescOnce.Do(func() {
		file_component_board_v1_board_proto_rawDescData = protoimpl.X.CompressGZIP(file_component_board_v1_board_proto_rawDescData)
	})
	return file_component_board_v1_board_proto_rawDescData
}

var file_component_board_v1_board_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_component_board_v1_board_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_component_board_v1_board_proto_goTypes = []any{
	(PowerMode)(0),                           // 0: viam.component.board.v1.PowerMode
	(*Status)(nil),                           // 1: viam.component.board.v1.Status
	(*SetGPIORequest)(nil),                   // 2: viam.component.board.v1.SetGPIORequest
	(*SetGPIOResponse)(nil),                  // 3: viam.component.board.v1.SetGPIOResponse
	(*GetGPIORequest)(nil),                   // 4: viam.component.board.v1.GetGPIORequest
	(*GetGPIOResponse)(nil),                  // 5: viam.component.board.v1.GetGPIOResponse
	(*PWMRequest)(nil),                       // 6: viam.component.board.v1.PWMRequest
	(*PWMResponse)(nil),                      // 7: viam.component.board.v1.PWMResponse
	(*SetPWMRequest)(nil),                    // 8: viam.component.board.v1.SetPWMRequest
	(*SetPWMResponse)(nil),                   // 9: viam.component.board.v1.SetPWMResponse
	(*PWMFrequencyRequest)(nil),              // 10: viam.component.board.v1.PWMFrequencyRequest
	(*PWMFrequencyResponse)(nil),             // 11: viam.component.board.v1.PWMFrequencyResponse
	(*SetPWMFrequencyRequest)(nil),           // 12: viam.component.board.v1.SetPWMFrequencyRequest
	(*SetPWMFrequencyResponse)(nil),          // 13: viam.component.board.v1.SetPWMFrequencyResponse
	(*ReadAnalogReaderRequest)(nil),          // 14: viam.component.board.v1.ReadAnalogReaderRequest
	(*ReadAnalogReaderResponse)(nil),         // 15: viam.component.board.v1.ReadAnalogReaderResponse
	(*WriteAnalogRequest)(nil),               // 16: viam.component.board.v1.WriteAnalogRequest
	(*WriteAnalogResponse)(nil),              // 17: viam.component.board.v1.WriteAnalogResponse
	(*GetDigitalInterruptValueRequest)(nil),  // 18: viam.component.board.v1.GetDigitalInterruptValueRequest
	(*GetDigitalInterruptValueResponse)(nil), // 19: viam.component.board.v1.GetDigitalInterruptValueResponse
	(*StreamTicksRequest)(nil),               // 20: viam.component.board.v1.StreamTicksRequest
	(*StreamTicksResponse)(nil),              // 21: viam.component.board.v1.StreamTicksResponse
	(*SetPowerModeRequest)(nil),              // 22: viam.component.board.v1.SetPowerModeRequest
	(*SetPowerModeResponse)(nil),             // 23: viam.component.board.v1.SetPowerModeResponse
	nil,                                      // 24: viam.component.board.v1.Status.AnalogsEntry
	nil,                                      // 25: viam.component.board.v1.Status.DigitalInterruptsEntry
	(*structpb.Struct)(nil),                  // 26: google.protobuf.Struct
	(*durationpb.Duration)(nil),              // 27: google.protobuf.Duration
	(*v1.DoCommandRequest)(nil),              // 28: viam.common.v1.DoCommandRequest
	(*v1.GetGeometriesRequest)(nil),          // 29: viam.common.v1.GetGeometriesRequest
	(*v1.DoCommandResponse)(nil),             // 30: viam.common.v1.DoCommandResponse
	(*v1.GetGeometriesResponse)(nil),         // 31: viam.common.v1.GetGeometriesResponse
}
var file_component_board_v1_board_proto_depIdxs = []int32{
	24, // 0: viam.component.board.v1.Status.analogs:type_name -> viam.component.board.v1.Status.AnalogsEntry
	25, // 1: viam.component.board.v1.Status.digital_interrupts:type_name -> viam.component.board.v1.Status.DigitalInterruptsEntry
	26, // 2: viam.component.board.v1.SetGPIORequest.extra:type_name -> google.protobuf.Struct
	26, // 3: viam.component.board.v1.GetGPIORequest.extra:type_name -> google.protobuf.Struct
	26, // 4: viam.component.board.v1.PWMRequest.extra:type_name -> google.protobuf.Struct
	26, // 5: viam.component.board.v1.SetPWMRequest.extra:type_name -> google.protobuf.Struct
	26, // 6: viam.component.board.v1.PWMFrequencyRequest.extra:type_name -> google.protobuf.Struct
	26, // 7: viam.component.board.v1.SetPWMFrequencyRequest.extra:type_name -> google.protobuf.Struct
	26, // 8: viam.component.board.v1.ReadAnalogReaderRequest.extra:type_name -> google.protobuf.Struct
	26, // 9: viam.component.board.v1.WriteAnalogRequest.extra:type_name -> google.protobuf.Struct
	26, // 10: viam.component.board.v1.GetDigitalInterruptValueRequest.extra:type_name -> google.protobuf.Struct
	26, // 11: viam.component.board.v1.StreamTicksRequest.extra:type_name -> google.protobuf.Struct
	0,  // 12: viam.component.board.v1.SetPowerModeRequest.power_mode:type_name -> viam.component.board.v1.PowerMode
	27, // 13: viam.component.board.v1.SetPowerModeRequest.duration:type_name -> google.protobuf.Duration
	26, // 14: viam.component.board.v1.SetPowerModeRequest.extra:type_name -> google.protobuf.Struct
	2,  // 15: viam.component.board.v1.BoardService.SetGPIO:input_type -> viam.component.board.v1.SetGPIORequest
	4,  // 16: viam.component.board.v1.BoardService.GetGPIO:input_type -> viam.component.board.v1.GetGPIORequest
	6,  // 17: viam.component.board.v1.BoardService.PWM:input_type -> viam.component.board.v1.PWMRequest
	8,  // 18: viam.component.board.v1.BoardService.SetPWM:input_type -> viam.component.board.v1.SetPWMRequest
	10, // 19: viam.component.board.v1.BoardService.PWMFrequency:input_type -> viam.component.board.v1.PWMFrequencyRequest
	12, // 20: viam.component.board.v1.BoardService.SetPWMFrequency:input_type -> viam.component.board.v1.SetPWMFrequencyRequest
	28, // 21: viam.component.board.v1.BoardService.DoCommand:input_type -> viam.common.v1.DoCommandRequest
	14, // 22: viam.component.board.v1.BoardService.ReadAnalogReader:input_type -> viam.component.board.v1.ReadAnalogReaderRequest
	16, // 23: viam.component.board.v1.BoardService.WriteAnalog:input_type -> viam.component.board.v1.WriteAnalogRequest
	18, // 24: viam.component.board.v1.BoardService.GetDigitalInterruptValue:input_type -> viam.component.board.v1.GetDigitalInterruptValueRequest
	20, // 25: viam.component.board.v1.BoardService.StreamTicks:input_type -> viam.component.board.v1.StreamTicksRequest
	22, // 26: viam.component.board.v1.BoardService.SetPowerMode:input_type -> viam.component.board.v1.SetPowerModeRequest
	29, // 27: viam.component.board.v1.BoardService.GetGeometries:input_type -> viam.common.v1.GetGeometriesRequest
	3,  // 28: viam.component.board.v1.BoardService.SetGPIO:output_type -> viam.component.board.v1.SetGPIOResponse
	5,  // 29: viam.component.board.v1.BoardService.GetGPIO:output_type -> viam.component.board.v1.GetGPIOResponse
	7,  // 30: viam.component.board.v1.BoardService.PWM:output_type -> viam.component.board.v1.PWMResponse
	9,  // 31: viam.component.board.v1.BoardService.SetPWM:output_type -> viam.component.board.v1.SetPWMResponse
	11, // 32: viam.component.board.v1.BoardService.PWMFrequency:output_type -> viam.component.board.v1.PWMFrequencyResponse
	13, // 33: viam.component.board.v1.BoardService.SetPWMFrequency:output_type -> viam.component.board.v1.SetPWMFrequencyResponse
	30, // 34: viam.component.board.v1.BoardService.DoCommand:output_type -> viam.common.v1.DoCommandResponse
	15, // 35: viam.component.board.v1.BoardService.ReadAnalogReader:output_type -> viam.component.board.v1.ReadAnalogReaderResponse
	17, // 36: viam.component.board.v1.BoardService.WriteAnalog:output_type -> viam.component.board.v1.WriteAnalogResponse
	19, // 37: viam.component.board.v1.BoardService.GetDigitalInterruptValue:output_type -> viam.component.board.v1.GetDigitalInterruptValueResponse
	21, // 38: viam.component.board.v1.BoardService.StreamTicks:output_type -> viam.component.board.v1.StreamTicksResponse
	23, // 39: viam.component.board.v1.BoardService.SetPowerMode:output_type -> viam.component.board.v1.SetPowerModeResponse
	31, // 40: viam.component.board.v1.BoardService.GetGeometries:output_type -> viam.common.v1.GetGeometriesResponse
	28, // [28:41] is the sub-list for method output_type
	15, // [15:28] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_component_board_v1_board_proto_init() }
func file_component_board_v1_board_proto_init() {
	if File_component_board_v1_board_proto != nil {
		return
	}
	file_component_board_v1_board_proto_msgTypes[21].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_component_board_v1_board_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_component_board_v1_board_proto_goTypes,
		DependencyIndexes: file_component_board_v1_board_proto_depIdxs,
		EnumInfos:         file_component_board_v1_board_proto_enumTypes,
		MessageInfos:      file_component_board_v1_board_proto_msgTypes,
	}.Build()
	File_component_board_v1_board_proto = out.File
	file_component_board_v1_board_proto_rawDesc = nil
	file_component_board_v1_board_proto_goTypes = nil
	file_component_board_v1_board_proto_depIdxs = nil
}
