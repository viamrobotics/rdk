// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: component/audioinput/v1/audioinput.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SampleFormat int32

const (
	SampleFormat_SAMPLE_FORMAT_UNSPECIFIED         SampleFormat = 0
	SampleFormat_SAMPLE_FORMAT_INT16_INTERLEAVED   SampleFormat = 1
	SampleFormat_SAMPLE_FORMAT_FLOAT32_INTERLEAVED SampleFormat = 2
)

// Enum value maps for SampleFormat.
var (
	SampleFormat_name = map[int32]string{
		0: "SAMPLE_FORMAT_UNSPECIFIED",
		1: "SAMPLE_FORMAT_INT16_INTERLEAVED",
		2: "SAMPLE_FORMAT_FLOAT32_INTERLEAVED",
	}
	SampleFormat_value = map[string]int32{
		"SAMPLE_FORMAT_UNSPECIFIED":         0,
		"SAMPLE_FORMAT_INT16_INTERLEAVED":   1,
		"SAMPLE_FORMAT_FLOAT32_INTERLEAVED": 2,
	}
)

func (x SampleFormat) Enum() *SampleFormat {
	p := new(SampleFormat)
	*p = x
	return p
}

func (x SampleFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_component_audioinput_v1_audioinput_proto_enumTypes[0].Descriptor()
}

func (SampleFormat) Type() protoreflect.EnumType {
	return &file_component_audioinput_v1_audioinput_proto_enumTypes[0]
}

func (x SampleFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleFormat.Descriptor instead.
func (SampleFormat) EnumDescriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{0}
}

type RecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of an audio input
	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RecordRequest) Reset() {
	*x = RecordRequest{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequest) ProtoMessage() {}

func (x *RecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequest.ProtoReflect.Descriptor instead.
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{0}
}

func (x *RecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type AudioChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual sample encoding format of the response
	SampleFormat SampleFormat `protobuf:"varint,1,opt,name=sample_format,json=sampleFormat,proto3,enum=viam.component.audioinput.v1.SampleFormat" json:"sample_format,omitempty"`
	Channels     uint32       `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	SamplingRate int64        `protobuf:"varint,3,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
}

func (x *AudioChunkInfo) Reset() {
	*x = AudioChunkInfo{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunkInfo) ProtoMessage() {}

func (x *AudioChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunkInfo.ProtoReflect.Descriptor instead.
func (*AudioChunkInfo) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{1}
}

func (x *AudioChunkInfo) GetSampleFormat() SampleFormat {
	if x != nil {
		return x.SampleFormat
	}
	return SampleFormat_SAMPLE_FORMAT_UNSPECIFIED
}

func (x *AudioChunkInfo) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *AudioChunkInfo) GetSamplingRate() int64 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

type AudioChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is PCM data that is organized according to the sample format
	// along with its possible interleaving. Data in each format is
	// Little Endian.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Length is the number of samples
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{2}
}

func (x *AudioChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AudioChunk) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ChunksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of an audio input
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Requested sample encoding format of the response
	SampleFormat SampleFormat `protobuf:"varint,2,opt,name=sample_format,json=sampleFormat,proto3,enum=viam.component.audioinput.v1.SampleFormat" json:"sample_format,omitempty"`
}

func (x *ChunksRequest) Reset() {
	*x = ChunksRequest{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksRequest) ProtoMessage() {}

func (x *ChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksRequest.ProtoReflect.Descriptor instead.
func (*ChunksRequest) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{3}
}

func (x *ChunksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChunksRequest) GetSampleFormat() SampleFormat {
	if x != nil {
		return x.SampleFormat
	}
	return SampleFormat_SAMPLE_FORMAT_UNSPECIFIED
}

type ChunksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ChunksResponse_Info
	//	*ChunksResponse_Chunk
	Type isChunksResponse_Type `protobuf_oneof:"type"`
}

func (x *ChunksResponse) Reset() {
	*x = ChunksResponse{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunksResponse) ProtoMessage() {}

func (x *ChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunksResponse.ProtoReflect.Descriptor instead.
func (*ChunksResponse) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{4}
}

func (m *ChunksResponse) GetType() isChunksResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ChunksResponse) GetInfo() *AudioChunkInfo {
	if x, ok := x.GetType().(*ChunksResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *ChunksResponse) GetChunk() *AudioChunk {
	if x, ok := x.GetType().(*ChunksResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isChunksResponse_Type interface {
	isChunksResponse_Type()
}

type ChunksResponse_Info struct {
	Info *AudioChunkInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type ChunksResponse_Chunk struct {
	Chunk *AudioChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ChunksResponse_Info) isChunksResponse_Type() {}

func (*ChunksResponse_Chunk) isChunksResponse_Type() {}

type PropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of an audio input
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PropertiesRequest) Reset() {
	*x = PropertiesRequest{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesRequest) ProtoMessage() {}

func (x *PropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesRequest.ProtoReflect.Descriptor instead.
func (*PropertiesRequest) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{5}
}

func (x *PropertiesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCount  uint32               `protobuf:"varint,1,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
	Latency       *durationpb.Duration `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
	SampleRate    uint32               `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	SampleSize    uint32               `protobuf:"varint,4,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"`
	IsBigEndian   bool                 `protobuf:"varint,5,opt,name=is_big_endian,json=isBigEndian,proto3" json:"is_big_endian,omitempty"`
	IsFloat       bool                 `protobuf:"varint,6,opt,name=is_float,json=isFloat,proto3" json:"is_float,omitempty"`
	IsInterleaved bool                 `protobuf:"varint,7,opt,name=is_interleaved,json=isInterleaved,proto3" json:"is_interleaved,omitempty"`
}

func (x *PropertiesResponse) Reset() {
	*x = PropertiesResponse{}
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesResponse) ProtoMessage() {}

func (x *PropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_component_audioinput_v1_audioinput_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesResponse.ProtoReflect.Descriptor instead.
func (*PropertiesResponse) Descriptor() ([]byte, []int) {
	return file_component_audioinput_v1_audioinput_proto_rawDescGZIP(), []int{6}
}

func (x *PropertiesResponse) GetChannelCount() uint32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

func (x *PropertiesResponse) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *PropertiesResponse) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *PropertiesResponse) GetSampleSize() uint32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *PropertiesResponse) GetIsBigEndian() bool {
	if x != nil {
		return x.IsBigEndian
	}
	return false
}

func (x *PropertiesResponse) GetIsFloat() bool {
	if x != nil {
		return x.IsFloat
	}
	return false
}

func (x *PropertiesResponse) GetIsInterleaved() bool {
	if x != nil {
		return x.IsInterleaved
	}
	return false
}

var File_component_audioinput_v1_audioinput_proto protoreflect.FileDescriptor

var file_component_audioinput_v1_audioinput_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62,
	0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0x74, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x69,
	0x67, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x42, 0x69, 0x67, 0x45, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x2a, 0x79, 0x0a,
	0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x31, 0x36, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4c, 0x45, 0x41, 0x56, 0x45, 0x44, 0x10, 0x02, 0x32, 0xdc, 0x05, 0x0a, 0x11, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65,
	0x0a, 0x06, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12,
	0x33, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x09,
	0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x4b, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x5a, 0x27, 0x67, 0x6f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_component_audioinput_v1_audioinput_proto_rawDescOnce sync.Once
	file_component_audioinput_v1_audioinput_proto_rawDescData = file_component_audioinput_v1_audioinput_proto_rawDesc
)

func file_component_audioinput_v1_audioinput_proto_rawDescGZIP() []byte {
	file_component_audioinput_v1_audioinput_proto_rawDescOnce.Do(func() {
		file_component_audioinput_v1_audioinput_proto_rawDescData = protoimpl.X.CompressGZIP(file_component_audioinput_v1_audioinput_proto_rawDescData)
	})
	return file_component_audioinput_v1_audioinput_proto_rawDescData
}

var file_component_audioinput_v1_audioinput_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_component_audioinput_v1_audioinput_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_component_audioinput_v1_audioinput_proto_goTypes = []any{
	(SampleFormat)(0),                // 0: viam.component.audioinput.v1.SampleFormat
	(*RecordRequest)(nil),            // 1: viam.component.audioinput.v1.RecordRequest
	(*AudioChunkInfo)(nil),           // 2: viam.component.audioinput.v1.AudioChunkInfo
	(*AudioChunk)(nil),               // 3: viam.component.audioinput.v1.AudioChunk
	(*ChunksRequest)(nil),            // 4: viam.component.audioinput.v1.ChunksRequest
	(*ChunksResponse)(nil),           // 5: viam.component.audioinput.v1.ChunksResponse
	(*PropertiesRequest)(nil),        // 6: viam.component.audioinput.v1.PropertiesRequest
	(*PropertiesResponse)(nil),       // 7: viam.component.audioinput.v1.PropertiesResponse
	(*durationpb.Duration)(nil),      // 8: google.protobuf.Duration
	(*v1.DoCommandRequest)(nil),      // 9: viam.common.v1.DoCommandRequest
	(*v1.GetGeometriesRequest)(nil),  // 10: viam.common.v1.GetGeometriesRequest
	(*httpbody.HttpBody)(nil),        // 11: google.api.HttpBody
	(*v1.DoCommandResponse)(nil),     // 12: viam.common.v1.DoCommandResponse
	(*v1.GetGeometriesResponse)(nil), // 13: viam.common.v1.GetGeometriesResponse
}
var file_component_audioinput_v1_audioinput_proto_depIdxs = []int32{
	8,  // 0: viam.component.audioinput.v1.RecordRequest.duration:type_name -> google.protobuf.Duration
	0,  // 1: viam.component.audioinput.v1.AudioChunkInfo.sample_format:type_name -> viam.component.audioinput.v1.SampleFormat
	0,  // 2: viam.component.audioinput.v1.ChunksRequest.sample_format:type_name -> viam.component.audioinput.v1.SampleFormat
	2,  // 3: viam.component.audioinput.v1.ChunksResponse.info:type_name -> viam.component.audioinput.v1.AudioChunkInfo
	3,  // 4: viam.component.audioinput.v1.ChunksResponse.chunk:type_name -> viam.component.audioinput.v1.AudioChunk
	8,  // 5: viam.component.audioinput.v1.PropertiesResponse.latency:type_name -> google.protobuf.Duration
	4,  // 6: viam.component.audioinput.v1.AudioInputService.Chunks:input_type -> viam.component.audioinput.v1.ChunksRequest
	6,  // 7: viam.component.audioinput.v1.AudioInputService.Properties:input_type -> viam.component.audioinput.v1.PropertiesRequest
	1,  // 8: viam.component.audioinput.v1.AudioInputService.Record:input_type -> viam.component.audioinput.v1.RecordRequest
	9,  // 9: viam.component.audioinput.v1.AudioInputService.DoCommand:input_type -> viam.common.v1.DoCommandRequest
	10, // 10: viam.component.audioinput.v1.AudioInputService.GetGeometries:input_type -> viam.common.v1.GetGeometriesRequest
	5,  // 11: viam.component.audioinput.v1.AudioInputService.Chunks:output_type -> viam.component.audioinput.v1.ChunksResponse
	7,  // 12: viam.component.audioinput.v1.AudioInputService.Properties:output_type -> viam.component.audioinput.v1.PropertiesResponse
	11, // 13: viam.component.audioinput.v1.AudioInputService.Record:output_type -> google.api.HttpBody
	12, // 14: viam.component.audioinput.v1.AudioInputService.DoCommand:output_type -> viam.common.v1.DoCommandResponse
	13, // 15: viam.component.audioinput.v1.AudioInputService.GetGeometries:output_type -> viam.common.v1.GetGeometriesResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_component_audioinput_v1_audioinput_proto_init() }
func file_component_audioinput_v1_audioinput_proto_init() {
	if File_component_audioinput_v1_audioinput_proto != nil {
		return
	}
	file_component_audioinput_v1_audioinput_proto_msgTypes[4].OneofWrappers = []any{
		(*ChunksResponse_Info)(nil),
		(*ChunksResponse_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_component_audioinput_v1_audioinput_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_component_audioinput_v1_audioinput_proto_goTypes,
		DependencyIndexes: file_component_audioinput_v1_audioinput_proto_depIdxs,
		EnumInfos:         file_component_audioinput_v1_audioinput_proto_enumTypes,
		MessageInfos:      file_component_audioinput_v1_audioinput_proto_msgTypes,
	}.Build()
	File_component_audioinput_v1_audioinput_proto = out.File
	file_component_audioinput_v1_audioinput_proto_rawDesc = nil
	file_component_audioinput_v1_audioinput_proto_goTypes = nil
	file_component_audioinput_v1_audioinput_proto_depIdxs = nil
}
