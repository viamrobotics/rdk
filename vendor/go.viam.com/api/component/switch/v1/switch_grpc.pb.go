// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: component/switch/v1/switch.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwitchServiceClient is the client API for SwitchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchServiceClient interface {
	// Set the position of the switch
	SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*SetPositionResponse, error)
	// Get the position of the switch
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	// Get the number of positions that the switch supports
	GetNumberOfPositions(ctx context.Context, in *GetNumberOfPositionsRequest, opts ...grpc.CallOption) (*GetNumberOfPositionsResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type switchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchServiceClient(cc grpc.ClientConnInterface) SwitchServiceClient {
	return &switchServiceClient{cc}
}

func (c *switchServiceClient) SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*SetPositionResponse, error) {
	out := new(SetPositionResponse)
	err := c.cc.Invoke(ctx, "/viam.component.switch.v1.SwitchService/SetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, "/viam.component.switch.v1.SwitchService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServiceClient) GetNumberOfPositions(ctx context.Context, in *GetNumberOfPositionsRequest, opts ...grpc.CallOption) (*GetNumberOfPositionsResponse, error) {
	out := new(GetNumberOfPositionsResponse)
	err := c.cc.Invoke(ctx, "/viam.component.switch.v1.SwitchService/GetNumberOfPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.component.switch.v1.SwitchService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServiceServer is the server API for SwitchService service.
// All implementations must embed UnimplementedSwitchServiceServer
// for forward compatibility
type SwitchServiceServer interface {
	// Set the position of the switch
	SetPosition(context.Context, *SetPositionRequest) (*SetPositionResponse, error)
	// Get the position of the switch
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	// Get the number of positions that the switch supports
	GetNumberOfPositions(context.Context, *GetNumberOfPositionsRequest) (*GetNumberOfPositionsResponse, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedSwitchServiceServer()
}

// UnimplementedSwitchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwitchServiceServer struct {
}

func (UnimplementedSwitchServiceServer) SetPosition(context.Context, *SetPositionRequest) (*SetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPosition not implemented")
}
func (UnimplementedSwitchServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedSwitchServiceServer) GetNumberOfPositions(context.Context, *GetNumberOfPositionsRequest) (*GetNumberOfPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfPositions not implemented")
}
func (UnimplementedSwitchServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedSwitchServiceServer) mustEmbedUnimplementedSwitchServiceServer() {}

// UnsafeSwitchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchServiceServer will
// result in compilation errors.
type UnsafeSwitchServiceServer interface {
	mustEmbedUnimplementedSwitchServiceServer()
}

func RegisterSwitchServiceServer(s grpc.ServiceRegistrar, srv SwitchServiceServer) {
	s.RegisterService(&SwitchService_ServiceDesc, srv)
}

func _SwitchService_SetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).SetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.switch.v1.SwitchService/SetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).SetPosition(ctx, req.(*SetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.switch.v1.SwitchService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchService_GetNumberOfPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).GetNumberOfPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.switch.v1.SwitchService/GetNumberOfPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).GetNumberOfPositions(ctx, req.(*GetNumberOfPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.component.switch.v1.SwitchService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwitchService_ServiceDesc is the grpc.ServiceDesc for SwitchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwitchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.component.switch.v1.SwitchService",
	HandlerType: (*SwitchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPosition",
			Handler:    _SwitchService_SetPosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _SwitchService_GetPosition_Handler,
		},
		{
			MethodName: "GetNumberOfPositions",
			Handler:    _SwitchService_GetNumberOfPositions_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _SwitchService_DoCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "component/switch/v1/switch.proto",
}
