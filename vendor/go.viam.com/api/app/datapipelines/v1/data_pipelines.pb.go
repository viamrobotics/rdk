// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: app/datapipelines/v1/data_pipelines.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataPipelineRunStatus int32

const (
	DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_UNSPECIFIED DataPipelineRunStatus = 0
	DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_SCHEDULED   DataPipelineRunStatus = 1
	DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_STARTED     DataPipelineRunStatus = 2
	DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_COMPLETED   DataPipelineRunStatus = 3
	DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_FAILED      DataPipelineRunStatus = 4
)

// Enum value maps for DataPipelineRunStatus.
var (
	DataPipelineRunStatus_name = map[int32]string{
		0: "DATA_PIPELINE_RUN_STATUS_UNSPECIFIED",
		1: "DATA_PIPELINE_RUN_STATUS_SCHEDULED",
		2: "DATA_PIPELINE_RUN_STATUS_STARTED",
		3: "DATA_PIPELINE_RUN_STATUS_COMPLETED",
		4: "DATA_PIPELINE_RUN_STATUS_FAILED",
	}
	DataPipelineRunStatus_value = map[string]int32{
		"DATA_PIPELINE_RUN_STATUS_UNSPECIFIED": 0,
		"DATA_PIPELINE_RUN_STATUS_SCHEDULED":   1,
		"DATA_PIPELINE_RUN_STATUS_STARTED":     2,
		"DATA_PIPELINE_RUN_STATUS_COMPLETED":   3,
		"DATA_PIPELINE_RUN_STATUS_FAILED":      4,
	}
)

func (x DataPipelineRunStatus) Enum() *DataPipelineRunStatus {
	p := new(DataPipelineRunStatus)
	*p = x
	return p
}

func (x DataPipelineRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPipelineRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_app_datapipelines_v1_data_pipelines_proto_enumTypes[0].Descriptor()
}

func (DataPipelineRunStatus) Type() protoreflect.EnumType {
	return &file_app_datapipelines_v1_data_pipelines_proto_enumTypes[0]
}

func (x DataPipelineRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPipelineRunStatus.Descriptor instead.
func (DataPipelineRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{0}
}

type DataPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The associated Viam organization ID.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// A unique identifier at the org level.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A MongoDB aggregation pipeline as a list of BSON documents, where
	// each document is one stage in the pipeline.
	MqlBinary [][]byte `protobuf:"bytes,4,rep,name=mql_binary,json=mqlBinary,proto3" json:"mql_binary,omitempty"`
	// A cron expression representing the expected execution schedule in UTC (note this also
	// defines the input time window; an hourly schedule would process 1 hour of data at a time).
	Schedule string `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Whether or not the pipeline is enabled.
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The time the pipeline was created.
	CreatedOn *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// The time the pipeline was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DataPipeline) Reset() {
	*x = DataPipeline{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPipeline) ProtoMessage() {}

func (x *DataPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPipeline.ProtoReflect.Descriptor instead.
func (*DataPipeline) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{0}
}

func (x *DataPipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataPipeline) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DataPipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataPipeline) GetMqlBinary() [][]byte {
	if x != nil {
		return x.MqlBinary
	}
	return nil
}

func (x *DataPipeline) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *DataPipeline) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DataPipeline) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *DataPipeline) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDataPipelineRequest) Reset() {
	*x = GetDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPipelineRequest) ProtoMessage() {}

func (x *GetDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataPipelineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPipeline *DataPipeline `protobuf:"bytes,1,opt,name=data_pipeline,json=dataPipeline,proto3" json:"data_pipeline,omitempty"`
}

func (x *GetDataPipelineResponse) Reset() {
	*x = GetDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPipelineResponse) ProtoMessage() {}

func (x *GetDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataPipelineResponse) GetDataPipeline() *DataPipeline {
	if x != nil {
		return x.DataPipeline
	}
	return nil
}

type ListDataPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The associated Viam organization ID.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ListDataPipelinesRequest) Reset() {
	*x = ListDataPipelinesRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPipelinesRequest) ProtoMessage() {}

func (x *ListDataPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListDataPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{3}
}

func (x *ListDataPipelinesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type ListDataPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPipelines []*DataPipeline `protobuf:"bytes,1,rep,name=data_pipelines,json=dataPipelines,proto3" json:"data_pipelines,omitempty"`
}

func (x *ListDataPipelinesResponse) Reset() {
	*x = ListDataPipelinesResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPipelinesResponse) ProtoMessage() {}

func (x *ListDataPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListDataPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{4}
}

func (x *ListDataPipelinesResponse) GetDataPipelines() []*DataPipeline {
	if x != nil {
		return x.DataPipelines
	}
	return nil
}

type CreateDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The associated Viam organization ID.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// A unique identifier at the org level.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A MongoDB aggregation pipeline as a list of BSON documents, where
	// each document is one stage in the pipeline.
	MqlBinary [][]byte `protobuf:"bytes,3,rep,name=mql_binary,json=mqlBinary,proto3" json:"mql_binary,omitempty"`
	// A cron expression representing the expected execution schedule in UTC (note this also
	// defines the input time window; an hourly schedule would process 1 hour of data at a time).
	Schedule string `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *CreateDataPipelineRequest) Reset() {
	*x = CreateDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataPipelineRequest) ProtoMessage() {}

func (x *CreateDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDataPipelineRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateDataPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDataPipelineRequest) GetMqlBinary() [][]byte {
	if x != nil {
		return x.MqlBinary
	}
	return nil
}

func (x *CreateDataPipelineRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type CreateDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the newly created data pipeline.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDataPipelineResponse) Reset() {
	*x = CreateDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataPipelineResponse) ProtoMessage() {}

func (x *CreateDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDataPipelineResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A unique identifier at the org level.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A MongoDB aggregation pipeline as a list of BSON documents, where
	// each document is one stage in the pipeline.
	MqlBinary [][]byte `protobuf:"bytes,3,rep,name=mql_binary,json=mqlBinary,proto3" json:"mql_binary,omitempty"`
	// A cron expression representing the expected execution schedule in UTC (note this also
	// defines the input time window; an hourly schedule would process 1 hour of data at a time).
	Schedule string `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *UpdateDataPipelineRequest) Reset() {
	*x = UpdateDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPipelineRequest) ProtoMessage() {}

func (x *UpdateDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDataPipelineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDataPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDataPipelineRequest) GetMqlBinary() [][]byte {
	if x != nil {
		return x.MqlBinary
	}
	return nil
}

func (x *UpdateDataPipelineRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type UpdateDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDataPipelineResponse) Reset() {
	*x = UpdateDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPipelineResponse) ProtoMessage() {}

func (x *UpdateDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{8}
}

type DeleteDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDataPipelineRequest) Reset() {
	*x = DeleteDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataPipelineRequest) ProtoMessage() {}

func (x *DeleteDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDataPipelineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDataPipelineResponse) Reset() {
	*x = DeleteDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataPipelineResponse) ProtoMessage() {}

func (x *DeleteDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{10}
}

type EnableDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to enable.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnableDataPipelineRequest) Reset() {
	*x = EnableDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDataPipelineRequest) ProtoMessage() {}

func (x *EnableDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*EnableDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{11}
}

func (x *EnableDataPipelineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnableDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableDataPipelineResponse) Reset() {
	*x = EnableDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDataPipelineResponse) ProtoMessage() {}

func (x *EnableDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*EnableDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{12}
}

type DisableDataPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to disable.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisableDataPipelineRequest) Reset() {
	*x = DisableDataPipelineRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableDataPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDataPipelineRequest) ProtoMessage() {}

func (x *DisableDataPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDataPipelineRequest.ProtoReflect.Descriptor instead.
func (*DisableDataPipelineRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{13}
}

func (x *DisableDataPipelineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableDataPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableDataPipelineResponse) Reset() {
	*x = DisableDataPipelineResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableDataPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDataPipelineResponse) ProtoMessage() {}

func (x *DisableDataPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDataPipelineResponse.ProtoReflect.Descriptor instead.
func (*DisableDataPipelineResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{14}
}

type ListDataPipelineRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline to list runs for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pagination fields
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDataPipelineRunsRequest) Reset() {
	*x = ListDataPipelineRunsRequest{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPipelineRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPipelineRunsRequest) ProtoMessage() {}

func (x *ListDataPipelineRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPipelineRunsRequest.ProtoReflect.Descriptor instead.
func (*ListDataPipelineRunsRequest) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{15}
}

func (x *ListDataPipelineRunsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListDataPipelineRunsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDataPipelineRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDataPipelineRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the data pipeline the runs are for.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// The runs that were run.
	Runs []*DataPipelineRun `protobuf:"bytes,2,rep,name=runs,proto3" json:"runs,omitempty"`
	// A token to retrieve the next page of results.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDataPipelineRunsResponse) Reset() {
	*x = ListDataPipelineRunsResponse{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPipelineRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPipelineRunsResponse) ProtoMessage() {}

func (x *ListDataPipelineRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPipelineRunsResponse.ProtoReflect.Descriptor instead.
func (*ListDataPipelineRunsResponse) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{16}
}

func (x *ListDataPipelineRunsResponse) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *ListDataPipelineRunsResponse) GetRuns() []*DataPipelineRun {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListDataPipelineRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DataPipelineRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The time the run started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the run ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The start time of the data that was processed in the run.
	DataStartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=data_start_time,json=dataStartTime,proto3" json:"data_start_time,omitempty"`
	// The end time of the data that was processed in the run.
	DataEndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=data_end_time,json=dataEndTime,proto3" json:"data_end_time,omitempty"`
	// The status of the run.
	Status DataPipelineRunStatus `protobuf:"varint,6,opt,name=status,proto3,enum=viam.app.datapipelines.v1.DataPipelineRunStatus" json:"status,omitempty"`
}

func (x *DataPipelineRun) Reset() {
	*x = DataPipelineRun{}
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPipelineRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPipelineRun) ProtoMessage() {}

func (x *DataPipelineRun) ProtoReflect() protoreflect.Message {
	mi := &file_app_datapipelines_v1_data_pipelines_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPipelineRun.ProtoReflect.Descriptor instead.
func (*DataPipelineRun) Descriptor() ([]byte, []int) {
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP(), []int{17}
}

func (x *DataPipelineRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataPipelineRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DataPipelineRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *DataPipelineRun) GetDataStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataStartTime
	}
	return nil
}

func (x *DataPipelineRun) GetDataEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataEndTime
	}
	return nil
}

func (x *DataPipelineRun) GetStatus() DataPipelineRunStatus {
	if x != nil {
		return x.Status
	}
	return DataPipelineRunStatus_DATA_PIPELINE_RUN_STATUS_UNSPECIFIED
}

var File_app_datapipelines_v1_data_pipelines_proto protoreflect.FileDescriptor

var file_app_datapipelines_v1_data_pipelines_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x02, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x71, 0x6c, 0x5f, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x71, 0x6c, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x43, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x71, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x71,
	0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72,
	0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a,
	0xdc, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xb1,
	0x08, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x36, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_app_datapipelines_v1_data_pipelines_proto_rawDescOnce sync.Once
	file_app_datapipelines_v1_data_pipelines_proto_rawDescData = file_app_datapipelines_v1_data_pipelines_proto_rawDesc
)

func file_app_datapipelines_v1_data_pipelines_proto_rawDescGZIP() []byte {
	file_app_datapipelines_v1_data_pipelines_proto_rawDescOnce.Do(func() {
		file_app_datapipelines_v1_data_pipelines_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_datapipelines_v1_data_pipelines_proto_rawDescData)
	})
	return file_app_datapipelines_v1_data_pipelines_proto_rawDescData
}

var file_app_datapipelines_v1_data_pipelines_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_datapipelines_v1_data_pipelines_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_app_datapipelines_v1_data_pipelines_proto_goTypes = []any{
	(DataPipelineRunStatus)(0),           // 0: viam.app.datapipelines.v1.DataPipelineRunStatus
	(*DataPipeline)(nil),                 // 1: viam.app.datapipelines.v1.DataPipeline
	(*GetDataPipelineRequest)(nil),       // 2: viam.app.datapipelines.v1.GetDataPipelineRequest
	(*GetDataPipelineResponse)(nil),      // 3: viam.app.datapipelines.v1.GetDataPipelineResponse
	(*ListDataPipelinesRequest)(nil),     // 4: viam.app.datapipelines.v1.ListDataPipelinesRequest
	(*ListDataPipelinesResponse)(nil),    // 5: viam.app.datapipelines.v1.ListDataPipelinesResponse
	(*CreateDataPipelineRequest)(nil),    // 6: viam.app.datapipelines.v1.CreateDataPipelineRequest
	(*CreateDataPipelineResponse)(nil),   // 7: viam.app.datapipelines.v1.CreateDataPipelineResponse
	(*UpdateDataPipelineRequest)(nil),    // 8: viam.app.datapipelines.v1.UpdateDataPipelineRequest
	(*UpdateDataPipelineResponse)(nil),   // 9: viam.app.datapipelines.v1.UpdateDataPipelineResponse
	(*DeleteDataPipelineRequest)(nil),    // 10: viam.app.datapipelines.v1.DeleteDataPipelineRequest
	(*DeleteDataPipelineResponse)(nil),   // 11: viam.app.datapipelines.v1.DeleteDataPipelineResponse
	(*EnableDataPipelineRequest)(nil),    // 12: viam.app.datapipelines.v1.EnableDataPipelineRequest
	(*EnableDataPipelineResponse)(nil),   // 13: viam.app.datapipelines.v1.EnableDataPipelineResponse
	(*DisableDataPipelineRequest)(nil),   // 14: viam.app.datapipelines.v1.DisableDataPipelineRequest
	(*DisableDataPipelineResponse)(nil),  // 15: viam.app.datapipelines.v1.DisableDataPipelineResponse
	(*ListDataPipelineRunsRequest)(nil),  // 16: viam.app.datapipelines.v1.ListDataPipelineRunsRequest
	(*ListDataPipelineRunsResponse)(nil), // 17: viam.app.datapipelines.v1.ListDataPipelineRunsResponse
	(*DataPipelineRun)(nil),              // 18: viam.app.datapipelines.v1.DataPipelineRun
	(*timestamppb.Timestamp)(nil),        // 19: google.protobuf.Timestamp
}
var file_app_datapipelines_v1_data_pipelines_proto_depIdxs = []int32{
	19, // 0: viam.app.datapipelines.v1.DataPipeline.created_on:type_name -> google.protobuf.Timestamp
	19, // 1: viam.app.datapipelines.v1.DataPipeline.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 2: viam.app.datapipelines.v1.GetDataPipelineResponse.data_pipeline:type_name -> viam.app.datapipelines.v1.DataPipeline
	1,  // 3: viam.app.datapipelines.v1.ListDataPipelinesResponse.data_pipelines:type_name -> viam.app.datapipelines.v1.DataPipeline
	18, // 4: viam.app.datapipelines.v1.ListDataPipelineRunsResponse.runs:type_name -> viam.app.datapipelines.v1.DataPipelineRun
	19, // 5: viam.app.datapipelines.v1.DataPipelineRun.start_time:type_name -> google.protobuf.Timestamp
	19, // 6: viam.app.datapipelines.v1.DataPipelineRun.end_time:type_name -> google.protobuf.Timestamp
	19, // 7: viam.app.datapipelines.v1.DataPipelineRun.data_start_time:type_name -> google.protobuf.Timestamp
	19, // 8: viam.app.datapipelines.v1.DataPipelineRun.data_end_time:type_name -> google.protobuf.Timestamp
	0,  // 9: viam.app.datapipelines.v1.DataPipelineRun.status:type_name -> viam.app.datapipelines.v1.DataPipelineRunStatus
	2,  // 10: viam.app.datapipelines.v1.DataPipelinesService.GetDataPipeline:input_type -> viam.app.datapipelines.v1.GetDataPipelineRequest
	4,  // 11: viam.app.datapipelines.v1.DataPipelinesService.ListDataPipelines:input_type -> viam.app.datapipelines.v1.ListDataPipelinesRequest
	6,  // 12: viam.app.datapipelines.v1.DataPipelinesService.CreateDataPipeline:input_type -> viam.app.datapipelines.v1.CreateDataPipelineRequest
	8,  // 13: viam.app.datapipelines.v1.DataPipelinesService.UpdateDataPipeline:input_type -> viam.app.datapipelines.v1.UpdateDataPipelineRequest
	10, // 14: viam.app.datapipelines.v1.DataPipelinesService.DeleteDataPipeline:input_type -> viam.app.datapipelines.v1.DeleteDataPipelineRequest
	12, // 15: viam.app.datapipelines.v1.DataPipelinesService.EnableDataPipeline:input_type -> viam.app.datapipelines.v1.EnableDataPipelineRequest
	14, // 16: viam.app.datapipelines.v1.DataPipelinesService.DisableDataPipeline:input_type -> viam.app.datapipelines.v1.DisableDataPipelineRequest
	16, // 17: viam.app.datapipelines.v1.DataPipelinesService.ListDataPipelineRuns:input_type -> viam.app.datapipelines.v1.ListDataPipelineRunsRequest
	3,  // 18: viam.app.datapipelines.v1.DataPipelinesService.GetDataPipeline:output_type -> viam.app.datapipelines.v1.GetDataPipelineResponse
	5,  // 19: viam.app.datapipelines.v1.DataPipelinesService.ListDataPipelines:output_type -> viam.app.datapipelines.v1.ListDataPipelinesResponse
	7,  // 20: viam.app.datapipelines.v1.DataPipelinesService.CreateDataPipeline:output_type -> viam.app.datapipelines.v1.CreateDataPipelineResponse
	9,  // 21: viam.app.datapipelines.v1.DataPipelinesService.UpdateDataPipeline:output_type -> viam.app.datapipelines.v1.UpdateDataPipelineResponse
	11, // 22: viam.app.datapipelines.v1.DataPipelinesService.DeleteDataPipeline:output_type -> viam.app.datapipelines.v1.DeleteDataPipelineResponse
	13, // 23: viam.app.datapipelines.v1.DataPipelinesService.EnableDataPipeline:output_type -> viam.app.datapipelines.v1.EnableDataPipelineResponse
	15, // 24: viam.app.datapipelines.v1.DataPipelinesService.DisableDataPipeline:output_type -> viam.app.datapipelines.v1.DisableDataPipelineResponse
	17, // 25: viam.app.datapipelines.v1.DataPipelinesService.ListDataPipelineRuns:output_type -> viam.app.datapipelines.v1.ListDataPipelineRunsResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_app_datapipelines_v1_data_pipelines_proto_init() }
func file_app_datapipelines_v1_data_pipelines_proto_init() {
	if File_app_datapipelines_v1_data_pipelines_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_datapipelines_v1_data_pipelines_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_datapipelines_v1_data_pipelines_proto_goTypes,
		DependencyIndexes: file_app_datapipelines_v1_data_pipelines_proto_depIdxs,
		EnumInfos:         file_app_datapipelines_v1_data_pipelines_proto_enumTypes,
		MessageInfos:      file_app_datapipelines_v1_data_pipelines_proto_msgTypes,
	}.Build()
	File_app_datapipelines_v1_data_pipelines_proto = out.File
	file_app_datapipelines_v1_data_pipelines_proto_rawDesc = nil
	file_app_datapipelines_v1_data_pipelines_proto_goTypes = nil
	file_app_datapipelines_v1_data_pipelines_proto_depIdxs = nil
}
