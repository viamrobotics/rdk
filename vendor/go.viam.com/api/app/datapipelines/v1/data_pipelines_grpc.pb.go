// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/datapipelines/v1/data_pipelines.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataPipelinesServiceClient is the client API for DataPipelinesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPipelinesServiceClient interface {
	// GetDataPipeline retrieves a specific data pipeline by its id.
	GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*GetDataPipelineResponse, error)
	// ListDataPipelines returns a list of data pipelines based on organization id.
	ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error)
	// CreateDataPipeline creates a new data pipeline with the provided configuration.
	CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*CreateDataPipelineResponse, error)
	// UpdateDataPipeline modifies an existing data pipeline's configuration.
	UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*UpdateDataPipelineResponse, error)
	// DeleteDataPipeline deletes a data pipeline from the database.
	DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*DeleteDataPipelineResponse, error)
	// EnableDataPipeline enables a data pipeline.
	EnableDataPipeline(ctx context.Context, in *EnableDataPipelineRequest, opts ...grpc.CallOption) (*EnableDataPipelineResponse, error)
	// DisableDataPipeline disables a data pipeline.
	DisableDataPipeline(ctx context.Context, in *DisableDataPipelineRequest, opts ...grpc.CallOption) (*DisableDataPipelineResponse, error)
	// ListDataPipelineRuns lists the runs of a data pipeline.
	ListDataPipelineRuns(ctx context.Context, in *ListDataPipelineRunsRequest, opts ...grpc.CallOption) (*ListDataPipelineRunsResponse, error)
}

type dataPipelinesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPipelinesServiceClient(cc grpc.ClientConnInterface) DataPipelinesServiceClient {
	return &dataPipelinesServiceClient{cc}
}

func (c *dataPipelinesServiceClient) GetDataPipeline(ctx context.Context, in *GetDataPipelineRequest, opts ...grpc.CallOption) (*GetDataPipelineResponse, error) {
	out := new(GetDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/GetDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) ListDataPipelines(ctx context.Context, in *ListDataPipelinesRequest, opts ...grpc.CallOption) (*ListDataPipelinesResponse, error) {
	out := new(ListDataPipelinesResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/ListDataPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) CreateDataPipeline(ctx context.Context, in *CreateDataPipelineRequest, opts ...grpc.CallOption) (*CreateDataPipelineResponse, error) {
	out := new(CreateDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/CreateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) UpdateDataPipeline(ctx context.Context, in *UpdateDataPipelineRequest, opts ...grpc.CallOption) (*UpdateDataPipelineResponse, error) {
	out := new(UpdateDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/UpdateDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) DeleteDataPipeline(ctx context.Context, in *DeleteDataPipelineRequest, opts ...grpc.CallOption) (*DeleteDataPipelineResponse, error) {
	out := new(DeleteDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/DeleteDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) EnableDataPipeline(ctx context.Context, in *EnableDataPipelineRequest, opts ...grpc.CallOption) (*EnableDataPipelineResponse, error) {
	out := new(EnableDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/EnableDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) DisableDataPipeline(ctx context.Context, in *DisableDataPipelineRequest, opts ...grpc.CallOption) (*DisableDataPipelineResponse, error) {
	out := new(DisableDataPipelineResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/DisableDataPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipelinesServiceClient) ListDataPipelineRuns(ctx context.Context, in *ListDataPipelineRunsRequest, opts ...grpc.CallOption) (*ListDataPipelineRunsResponse, error) {
	out := new(ListDataPipelineRunsResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datapipelines.v1.DataPipelinesService/ListDataPipelineRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPipelinesServiceServer is the server API for DataPipelinesService service.
// All implementations must embed UnimplementedDataPipelinesServiceServer
// for forward compatibility
type DataPipelinesServiceServer interface {
	// GetDataPipeline retrieves a specific data pipeline by its id.
	GetDataPipeline(context.Context, *GetDataPipelineRequest) (*GetDataPipelineResponse, error)
	// ListDataPipelines returns a list of data pipelines based on organization id.
	ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error)
	// CreateDataPipeline creates a new data pipeline with the provided configuration.
	CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*CreateDataPipelineResponse, error)
	// UpdateDataPipeline modifies an existing data pipeline's configuration.
	UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*UpdateDataPipelineResponse, error)
	// DeleteDataPipeline deletes a data pipeline from the database.
	DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*DeleteDataPipelineResponse, error)
	// EnableDataPipeline enables a data pipeline.
	EnableDataPipeline(context.Context, *EnableDataPipelineRequest) (*EnableDataPipelineResponse, error)
	// DisableDataPipeline disables a data pipeline.
	DisableDataPipeline(context.Context, *DisableDataPipelineRequest) (*DisableDataPipelineResponse, error)
	// ListDataPipelineRuns lists the runs of a data pipeline.
	ListDataPipelineRuns(context.Context, *ListDataPipelineRunsRequest) (*ListDataPipelineRunsResponse, error)
	mustEmbedUnimplementedDataPipelinesServiceServer()
}

// UnimplementedDataPipelinesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataPipelinesServiceServer struct {
}

func (UnimplementedDataPipelinesServiceServer) GetDataPipeline(context.Context, *GetDataPipelineRequest) (*GetDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) ListDataPipelines(context.Context, *ListDataPipelinesRequest) (*ListDataPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPipelines not implemented")
}
func (UnimplementedDataPipelinesServiceServer) CreateDataPipeline(context.Context, *CreateDataPipelineRequest) (*CreateDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) UpdateDataPipeline(context.Context, *UpdateDataPipelineRequest) (*UpdateDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) DeleteDataPipeline(context.Context, *DeleteDataPipelineRequest) (*DeleteDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) EnableDataPipeline(context.Context, *EnableDataPipelineRequest) (*EnableDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) DisableDataPipeline(context.Context, *DisableDataPipelineRequest) (*DisableDataPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDataPipeline not implemented")
}
func (UnimplementedDataPipelinesServiceServer) ListDataPipelineRuns(context.Context, *ListDataPipelineRunsRequest) (*ListDataPipelineRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataPipelineRuns not implemented")
}
func (UnimplementedDataPipelinesServiceServer) mustEmbedUnimplementedDataPipelinesServiceServer() {}

// UnsafeDataPipelinesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPipelinesServiceServer will
// result in compilation errors.
type UnsafeDataPipelinesServiceServer interface {
	mustEmbedUnimplementedDataPipelinesServiceServer()
}

func RegisterDataPipelinesServiceServer(s grpc.ServiceRegistrar, srv DataPipelinesServiceServer) {
	s.RegisterService(&DataPipelinesService_ServiceDesc, srv)
}

func _DataPipelinesService_GetDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).GetDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/GetDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).GetDataPipeline(ctx, req.(*GetDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_ListDataPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).ListDataPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/ListDataPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).ListDataPipelines(ctx, req.(*ListDataPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_CreateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).CreateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/CreateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).CreateDataPipeline(ctx, req.(*CreateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_UpdateDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).UpdateDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/UpdateDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).UpdateDataPipeline(ctx, req.(*UpdateDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_DeleteDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).DeleteDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/DeleteDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).DeleteDataPipeline(ctx, req.(*DeleteDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_EnableDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).EnableDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/EnableDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).EnableDataPipeline(ctx, req.(*EnableDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_DisableDataPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableDataPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).DisableDataPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/DisableDataPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).DisableDataPipeline(ctx, req.(*DisableDataPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipelinesService_ListDataPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataPipelineRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipelinesServiceServer).ListDataPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datapipelines.v1.DataPipelinesService/ListDataPipelineRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipelinesServiceServer).ListDataPipelineRuns(ctx, req.(*ListDataPipelineRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPipelinesService_ServiceDesc is the grpc.ServiceDesc for DataPipelinesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPipelinesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.datapipelines.v1.DataPipelinesService",
	HandlerType: (*DataPipelinesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataPipeline",
			Handler:    _DataPipelinesService_GetDataPipeline_Handler,
		},
		{
			MethodName: "ListDataPipelines",
			Handler:    _DataPipelinesService_ListDataPipelines_Handler,
		},
		{
			MethodName: "CreateDataPipeline",
			Handler:    _DataPipelinesService_CreateDataPipeline_Handler,
		},
		{
			MethodName: "UpdateDataPipeline",
			Handler:    _DataPipelinesService_UpdateDataPipeline_Handler,
		},
		{
			MethodName: "DeleteDataPipeline",
			Handler:    _DataPipelinesService_DeleteDataPipeline_Handler,
		},
		{
			MethodName: "EnableDataPipeline",
			Handler:    _DataPipelinesService_EnableDataPipeline_Handler,
		},
		{
			MethodName: "DisableDataPipeline",
			Handler:    _DataPipelinesService_DisableDataPipeline_Handler,
		},
		{
			MethodName: "ListDataPipelineRuns",
			Handler:    _DataPipelinesService_ListDataPipelineRuns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/datapipelines/v1/data_pipelines.proto",
}
