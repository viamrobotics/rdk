// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: app/data/v1/data.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Order specifies the order in which data is returned.
type Order int32

const (
	Order_ORDER_UNSPECIFIED Order = 0
	Order_ORDER_DESCENDING  Order = 1
	Order_ORDER_ASCENDING   Order = 2
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "ORDER_UNSPECIFIED",
		1: "ORDER_DESCENDING",
		2: "ORDER_ASCENDING",
	}
	Order_value = map[string]int32{
		"ORDER_UNSPECIFIED": 0,
		"ORDER_DESCENDING":  1,
		"ORDER_ASCENDING":   2,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_app_data_v1_data_proto_enumTypes[0].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_app_data_v1_data_proto_enumTypes[0]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{0}
}

// TagsFilterType specifies how data can be filtered based on tags.
type TagsFilterType int32

const (
	TagsFilterType_TAGS_FILTER_TYPE_UNSPECIFIED TagsFilterType = 0
	// TAGS_FILTER_TYPE_MATCH_BY_OR specifies documents matched (using logical OR) on the tags field in the TagsFilter.
	TagsFilterType_TAGS_FILTER_TYPE_MATCH_BY_OR TagsFilterType = 1
	// TAGS_FILTER_TYPE_TAGGED specifies that all tagged documents should be returned.
	TagsFilterType_TAGS_FILTER_TYPE_TAGGED TagsFilterType = 2
	// TAGS_FILTER_TYPE_UNTAGGED specifes that all untagged documents should be returned.
	TagsFilterType_TAGS_FILTER_TYPE_UNTAGGED TagsFilterType = 3
)

// Enum value maps for TagsFilterType.
var (
	TagsFilterType_name = map[int32]string{
		0: "TAGS_FILTER_TYPE_UNSPECIFIED",
		1: "TAGS_FILTER_TYPE_MATCH_BY_OR",
		2: "TAGS_FILTER_TYPE_TAGGED",
		3: "TAGS_FILTER_TYPE_UNTAGGED",
	}
	TagsFilterType_value = map[string]int32{
		"TAGS_FILTER_TYPE_UNSPECIFIED": 0,
		"TAGS_FILTER_TYPE_MATCH_BY_OR": 1,
		"TAGS_FILTER_TYPE_TAGGED":      2,
		"TAGS_FILTER_TYPE_UNTAGGED":    3,
	}
)

func (x TagsFilterType) Enum() *TagsFilterType {
	p := new(TagsFilterType)
	*p = x
	return p
}

func (x TagsFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagsFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_data_v1_data_proto_enumTypes[1].Descriptor()
}

func (TagsFilterType) Type() protoreflect.EnumType {
	return &file_app_data_v1_data_proto_enumTypes[1]
}

func (x TagsFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagsFilterType.Descriptor instead.
func (TagsFilterType) EnumDescriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{1}
}

// TabularDataSourceType specifies the data source type for TabularDataByMQL queries.
type TabularDataSourceType int32

const (
	TabularDataSourceType_TABULAR_DATA_SOURCE_TYPE_UNSPECIFIED TabularDataSourceType = 0
	// TABULAR_DATA_SOURCE_TYPE_STANDARD indicates reading from standard storage. This is
	// the default option and available for all data synced to Viam.
	TabularDataSourceType_TABULAR_DATA_SOURCE_TYPE_STANDARD TabularDataSourceType = 1
	// TABULAR_DATA_SOURCE_TYPE_HOT_STORAGE indicates reading from hot storage. This is a
	// premium feature requiring opting in specific data sources.
	// See docs at https://docs.viam.com/data-ai/capture-data/advanced/advanced-data-capture-sync/#capture-to-the-hot-data-store
	TabularDataSourceType_TABULAR_DATA_SOURCE_TYPE_HOT_STORAGE TabularDataSourceType = 2
	// TABULAR_DATA_SOURCE_TYPE_PIPELINE_SINK indicates reading the output data of
	// a data pipeline. When using this, a pipeline ID needs to be specified.
	TabularDataSourceType_TABULAR_DATA_SOURCE_TYPE_PIPELINE_SINK TabularDataSourceType = 3
)

// Enum value maps for TabularDataSourceType.
var (
	TabularDataSourceType_name = map[int32]string{
		0: "TABULAR_DATA_SOURCE_TYPE_UNSPECIFIED",
		1: "TABULAR_DATA_SOURCE_TYPE_STANDARD",
		2: "TABULAR_DATA_SOURCE_TYPE_HOT_STORAGE",
		3: "TABULAR_DATA_SOURCE_TYPE_PIPELINE_SINK",
	}
	TabularDataSourceType_value = map[string]int32{
		"TABULAR_DATA_SOURCE_TYPE_UNSPECIFIED":   0,
		"TABULAR_DATA_SOURCE_TYPE_STANDARD":      1,
		"TABULAR_DATA_SOURCE_TYPE_HOT_STORAGE":   2,
		"TABULAR_DATA_SOURCE_TYPE_PIPELINE_SINK": 3,
	}
)

func (x TabularDataSourceType) Enum() *TabularDataSourceType {
	p := new(TabularDataSourceType)
	*p = x
	return p
}

func (x TabularDataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TabularDataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_data_v1_data_proto_enumTypes[2].Descriptor()
}

func (TabularDataSourceType) Type() protoreflect.EnumType {
	return &file_app_data_v1_data_proto_enumTypes[2]
}

func (x TabularDataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TabularDataSourceType.Descriptor instead.
func (TabularDataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{2}
}

// DataRequest encapsulates the filter for the data, a limit on the maximum results returned,
// a last string associated with the last returned document, and the sorting order by time.
// last is returned in the responses TabularDataByFilterResponse and BinaryDataByFilterResponse
// from the API calls TabularDataByFilter and BinaryDataByFilter, respectively.
// We can then use the last string from the previous API calls in the subsequent request
// to get the next set of ordered documents.
type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit     uint64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Last      string  `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	SortOrder Order   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=viam.app.data.v1.Order" json:"sort_order,omitempty"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *DataRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DataRequest) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

func (x *DataRequest) GetSortOrder() Order {
	if x != nil {
		return x.SortOrder
	}
	return Order_ORDER_UNSPECIFIED
}

// Filter defines the fields over which we can filter data using a logic AND.
// For example, if component_type and robot_id are specified, only data from that `robot_id` of
// type `component_type` is returned. However, we logical OR over the specified tags and bounding
// box labels, such that if component_type, robot_id, tagA, tagB are specified,
// we return data from that `robot_id` of type `component_type` with `tagA` or `tagB`.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName   string           `protobuf:"bytes,1,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentType   string           `protobuf:"bytes,2,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	Method          string           `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	RobotName       string           `protobuf:"bytes,6,opt,name=robot_name,json=robotName,proto3" json:"robot_name,omitempty"`
	RobotId         string           `protobuf:"bytes,7,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	PartName        string           `protobuf:"bytes,8,opt,name=part_name,json=partName,proto3" json:"part_name,omitempty"`
	PartId          string           `protobuf:"bytes,9,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	LocationIds     []string         `protobuf:"bytes,10,rep,name=location_ids,json=locationIds,proto3" json:"location_ids,omitempty"`
	OrganizationIds []string         `protobuf:"bytes,11,rep,name=organization_ids,json=organizationIds,proto3" json:"organization_ids,omitempty"`
	MimeType        []string         `protobuf:"bytes,12,rep,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Interval        *CaptureInterval `protobuf:"bytes,13,opt,name=interval,proto3" json:"interval,omitempty"`
	TagsFilter      *TagsFilter      `protobuf:"bytes,14,opt,name=tags_filter,json=tagsFilter,proto3" json:"tags_filter,omitempty"`
	// bbox_labels are used to match documents with the specified bounding box labels (using logical OR).
	BboxLabels []string `protobuf:"bytes,15,rep,name=bbox_labels,json=bboxLabels,proto3" json:"bbox_labels,omitempty"`
	DatasetId  string   `protobuf:"bytes,16,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_app_data_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *Filter) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *Filter) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Filter) GetRobotName() string {
	if x != nil {
		return x.RobotName
	}
	return ""
}

func (x *Filter) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *Filter) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *Filter) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *Filter) GetLocationIds() []string {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

func (x *Filter) GetOrganizationIds() []string {
	if x != nil {
		return x.OrganizationIds
	}
	return nil
}

func (x *Filter) GetMimeType() []string {
	if x != nil {
		return x.MimeType
	}
	return nil
}

func (x *Filter) GetInterval() *CaptureInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Filter) GetTagsFilter() *TagsFilter {
	if x != nil {
		return x.TagsFilter
	}
	return nil
}

func (x *Filter) GetBboxLabels() []string {
	if x != nil {
		return x.BboxLabels
	}
	return nil
}

func (x *Filter) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

// TagsFilter defines the type of filtering and, if applicable, over which tags to perform a logical OR.
type TagsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TagsFilterType `protobuf:"varint,1,opt,name=type,proto3,enum=viam.app.data.v1.TagsFilterType" json:"type,omitempty"`
	// Tags are used to match documents if `type` is UNSPECIFIED or MATCH_BY_OR.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagsFilter) Reset() {
	*x = TagsFilter{}
	mi := &file_app_data_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsFilter) ProtoMessage() {}

func (x *TagsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsFilter.ProtoReflect.Descriptor instead.
func (*TagsFilter) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *TagsFilter) GetType() TagsFilterType {
	if x != nil {
		return x.Type
	}
	return TagsFilterType_TAGS_FILTER_TYPE_UNSPECIFIED
}

func (x *TagsFilter) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// CaptureMetadata contains information on the settings used for the data capture.
type CaptureMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId   string                `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId       string                `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	RobotName        string                `protobuf:"bytes,3,opt,name=robot_name,json=robotName,proto3" json:"robot_name,omitempty"`
	RobotId          string                `protobuf:"bytes,4,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	PartName         string                `protobuf:"bytes,5,opt,name=part_name,json=partName,proto3" json:"part_name,omitempty"`
	PartId           string                `protobuf:"bytes,6,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ComponentType    string                `protobuf:"bytes,7,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentName    string                `protobuf:"bytes,9,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	MethodName       string                `protobuf:"bytes,10,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,11,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags             []string              `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	MimeType         string                `protobuf:"bytes,13,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *CaptureMetadata) Reset() {
	*x = CaptureMetadata{}
	mi := &file_app_data_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureMetadata) ProtoMessage() {}

func (x *CaptureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureMetadata.ProtoReflect.Descriptor instead.
func (*CaptureMetadata) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *CaptureMetadata) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CaptureMetadata) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *CaptureMetadata) GetRobotName() string {
	if x != nil {
		return x.RobotName
	}
	return ""
}

func (x *CaptureMetadata) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *CaptureMetadata) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *CaptureMetadata) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *CaptureMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *CaptureMetadata) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *CaptureMetadata) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *CaptureMetadata) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *CaptureMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CaptureMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

// CaptureInterval describes the start and end time of the capture in this file.
type CaptureInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CaptureInterval) Reset() {
	*x = CaptureInterval{}
	mi := &file_app_data_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInterval) ProtoMessage() {}

func (x *CaptureInterval) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInterval.ProtoReflect.Descriptor instead.
func (*CaptureInterval) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureInterval) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CaptureInterval) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// TabularDataByFilterRequest requests tabular data based on filter values.
//
// Deprecated: Marked as deprecated in app/data/v1/data.proto.
type TabularDataByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRequest         *DataRequest `protobuf:"bytes,1,opt,name=data_request,json=dataRequest,proto3" json:"data_request,omitempty"`
	CountOnly           bool         `protobuf:"varint,2,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	IncludeInternalData bool         `protobuf:"varint,3,opt,name=include_internal_data,json=includeInternalData,proto3" json:"include_internal_data,omitempty"`
}

func (x *TabularDataByFilterRequest) Reset() {
	*x = TabularDataByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataByFilterRequest) ProtoMessage() {}

func (x *TabularDataByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataByFilterRequest.ProtoReflect.Descriptor instead.
func (*TabularDataByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *TabularDataByFilterRequest) GetDataRequest() *DataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

func (x *TabularDataByFilterRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *TabularDataByFilterRequest) GetIncludeInternalData() bool {
	if x != nil {
		return x.IncludeInternalData
	}
	return false
}

// TabularDataByFilterResponse provides the data and metadata of tabular data.
//
// Deprecated: Marked as deprecated in app/data/v1/data.proto.
type TabularDataByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       []*CaptureMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Data           []*TabularData     `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Count          uint64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Last           string             `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
	TotalSizeBytes uint64             `protobuf:"varint,5,opt,name=total_size_bytes,json=totalSizeBytes,proto3" json:"total_size_bytes,omitempty"`
}

func (x *TabularDataByFilterResponse) Reset() {
	*x = TabularDataByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataByFilterResponse) ProtoMessage() {}

func (x *TabularDataByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataByFilterResponse.ProtoReflect.Descriptor instead.
func (*TabularDataByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *TabularDataByFilterResponse) GetMetadata() []*CaptureMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TabularDataByFilterResponse) GetData() []*TabularData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TabularDataByFilterResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TabularDataByFilterResponse) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

func (x *TabularDataByFilterResponse) GetTotalSizeBytes() uint64 {
	if x != nil {
		return x.TotalSizeBytes
	}
	return 0
}

// TabularData contains data and metadata associated with tabular data.
//
// Deprecated: Marked as deprecated in app/data/v1/data.proto.
type TabularData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          *structpb.Struct       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MetadataIndex uint32                 `protobuf:"varint,2,opt,name=metadata_index,json=metadataIndex,proto3" json:"metadata_index,omitempty"`
	TimeRequested *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_requested,json=timeRequested,proto3" json:"time_requested,omitempty"`
	TimeReceived  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
}

func (x *TabularData) Reset() {
	*x = TabularData{}
	mi := &file_app_data_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularData) ProtoMessage() {}

func (x *TabularData) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularData.ProtoReflect.Descriptor instead.
func (*TabularData) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *TabularData) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TabularData) GetMetadataIndex() uint32 {
	if x != nil {
		return x.MetadataIndex
	}
	return 0
}

func (x *TabularData) GetTimeRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRequested
	}
	return nil
}

func (x *TabularData) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

// TabularDataBySQLRequest requests tabular data using a SQL query.
type TabularDataBySQLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// sql_query accepts any valid SQL SELECT statement. Tabular data is held in a database
	// called "sensorData" and a table called readings, so queries should select from "readings"
	// or "sensorData.readings".
	SqlQuery string `protobuf:"bytes,2,opt,name=sql_query,json=sqlQuery,proto3" json:"sql_query,omitempty"`
}

func (x *TabularDataBySQLRequest) Reset() {
	*x = TabularDataBySQLRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataBySQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataBySQLRequest) ProtoMessage() {}

func (x *TabularDataBySQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataBySQLRequest.ProtoReflect.Descriptor instead.
func (*TabularDataBySQLRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *TabularDataBySQLRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *TabularDataBySQLRequest) GetSqlQuery() string {
	if x != nil {
		return x.SqlQuery
	}
	return ""
}

// TabularDataBySQLResponse provides unified tabular data and metadata, queried with SQL.
type TabularDataBySQLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData [][]byte `protobuf:"bytes,2,rep,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *TabularDataBySQLResponse) Reset() {
	*x = TabularDataBySQLResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataBySQLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataBySQLResponse) ProtoMessage() {}

func (x *TabularDataBySQLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataBySQLResponse.ProtoReflect.Descriptor instead.
func (*TabularDataBySQLResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *TabularDataBySQLResponse) GetRawData() [][]byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

// TabularDataSource specifies the data source for user queries to execute on.
type TabularDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TabularDataSourceType `protobuf:"varint,1,opt,name=type,proto3,enum=viam.app.data.v1.TabularDataSourceType" json:"type,omitempty"`
	// pipeline_id is the ID of the pipeline to query. Required when using
	// TABULAR_DATA_SOURCE_TYPE_PIPELINE_SINK.
	PipelineId *string `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3,oneof" json:"pipeline_id,omitempty"`
}

func (x *TabularDataSource) Reset() {
	*x = TabularDataSource{}
	mi := &file_app_data_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataSource) ProtoMessage() {}

func (x *TabularDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataSource.ProtoReflect.Descriptor instead.
func (*TabularDataSource) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *TabularDataSource) GetType() TabularDataSourceType {
	if x != nil {
		return x.Type
	}
	return TabularDataSourceType_TABULAR_DATA_SOURCE_TYPE_UNSPECIFIED
}

func (x *TabularDataSource) GetPipelineId() string {
	if x != nil && x.PipelineId != nil {
		return *x.PipelineId
	}
	return ""
}

// TabularDataByMQLRequest requests tabular data using an MQL query.
type TabularDataByMQLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// mql_binary accepts a MongoDB aggregation pipeline as a list of BSON documents, where each
	// document is one stage in the pipeline. The pipeline is run on the "sensorData.readings"
	// namespace, which holds the Viam organization's tabular data.
	MqlBinary [][]byte `protobuf:"bytes,3,rep,name=mql_binary,json=mqlBinary,proto3" json:"mql_binary,omitempty"`
	// Deprecated, please use TABULAR_DATA_SOURCE_TYPE_HOT_STORAGE instead.
	UseRecentData *bool `protobuf:"varint,4,opt,name=use_recent_data,json=useRecentData,proto3,oneof" json:"use_recent_data,omitempty"`
	// data_source is an optional field that can be used to specify the data source for the query.
	// If not specified, the query will run on "standard" storage.
	DataSource *TabularDataSource `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3,oneof" json:"data_source,omitempty"`
}

func (x *TabularDataByMQLRequest) Reset() {
	*x = TabularDataByMQLRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataByMQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataByMQLRequest) ProtoMessage() {}

func (x *TabularDataByMQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataByMQLRequest.ProtoReflect.Descriptor instead.
func (*TabularDataByMQLRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *TabularDataByMQLRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *TabularDataByMQLRequest) GetMqlBinary() [][]byte {
	if x != nil {
		return x.MqlBinary
	}
	return nil
}

func (x *TabularDataByMQLRequest) GetUseRecentData() bool {
	if x != nil && x.UseRecentData != nil {
		return *x.UseRecentData
	}
	return false
}

func (x *TabularDataByMQLRequest) GetDataSource() *TabularDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

// TabularDataByMQLResponse provides unified tabular data and metadata, queried with MQL.
type TabularDataByMQLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData [][]byte `protobuf:"bytes,2,rep,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *TabularDataByMQLResponse) Reset() {
	*x = TabularDataByMQLResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularDataByMQLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularDataByMQLResponse) ProtoMessage() {}

func (x *TabularDataByMQLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularDataByMQLResponse.ProtoReflect.Descriptor instead.
func (*TabularDataByMQLResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *TabularDataByMQLResponse) GetRawData() [][]byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

// ExportTabularDataRequest requests tabular data from the specified data source.
type ExportTabularDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId          string           `protobuf:"bytes,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ResourceName    string           `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceSubtype string           `protobuf:"bytes,3,opt,name=resource_subtype,json=resourceSubtype,proto3" json:"resource_subtype,omitempty"`
	MethodName      string           `protobuf:"bytes,4,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Interval        *CaptureInterval `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *ExportTabularDataRequest) Reset() {
	*x = ExportTabularDataRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTabularDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTabularDataRequest) ProtoMessage() {}

func (x *ExportTabularDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTabularDataRequest.ProtoReflect.Descriptor instead.
func (*ExportTabularDataRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *ExportTabularDataRequest) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *ExportTabularDataRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ExportTabularDataRequest) GetResourceSubtype() string {
	if x != nil {
		return x.ResourceSubtype
	}
	return ""
}

func (x *ExportTabularDataRequest) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *ExportTabularDataRequest) GetInterval() *CaptureInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// ExportTabularDataResponse provides unified tabular data and metadata for a single data point from the specified data source.
type ExportTabularDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId           string                 `protobuf:"bytes,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ResourceName     string                 `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceSubtype  string                 `protobuf:"bytes,3,opt,name=resource_subtype,json=resourceSubtype,proto3" json:"resource_subtype,omitempty"`
	MethodName       string                 `protobuf:"bytes,4,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	TimeCaptured     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time_captured,json=timeCaptured,proto3" json:"time_captured,omitempty"`
	OrganizationId   string                 `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId       string                 `protobuf:"bytes,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	RobotName        string                 `protobuf:"bytes,8,opt,name=robot_name,json=robotName,proto3" json:"robot_name,omitempty"`
	RobotId          string                 `protobuf:"bytes,9,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	PartName         string                 `protobuf:"bytes,10,opt,name=part_name,json=partName,proto3" json:"part_name,omitempty"`
	MethodParameters *structpb.Struct       `protobuf:"bytes,11,opt,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty"`
	Tags             []string               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	Payload          *structpb.Struct       `protobuf:"bytes,13,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ExportTabularDataResponse) Reset() {
	*x = ExportTabularDataResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTabularDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTabularDataResponse) ProtoMessage() {}

func (x *ExportTabularDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTabularDataResponse.ProtoReflect.Descriptor instead.
func (*ExportTabularDataResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *ExportTabularDataResponse) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *ExportTabularDataResponse) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ExportTabularDataResponse) GetResourceSubtype() string {
	if x != nil {
		return x.ResourceSubtype
	}
	return ""
}

func (x *ExportTabularDataResponse) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *ExportTabularDataResponse) GetTimeCaptured() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCaptured
	}
	return nil
}

func (x *ExportTabularDataResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ExportTabularDataResponse) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *ExportTabularDataResponse) GetRobotName() string {
	if x != nil {
		return x.RobotName
	}
	return ""
}

func (x *ExportTabularDataResponse) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *ExportTabularDataResponse) GetPartName() string {
	if x != nil {
		return x.PartName
	}
	return ""
}

func (x *ExportTabularDataResponse) GetMethodParameters() *structpb.Struct {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *ExportTabularDataResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ExportTabularDataResponse) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

// GetLatestTabularDataRequest requests the most recent tabular data captured from the specified data source.
type GetLatestTabularDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId          string `protobuf:"bytes,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ResourceName    string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	MethodName      string `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	ResourceSubtype string `protobuf:"bytes,4,opt,name=resource_subtype,json=resourceSubtype,proto3" json:"resource_subtype,omitempty"`
}

func (x *GetLatestTabularDataRequest) Reset() {
	*x = GetLatestTabularDataRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTabularDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTabularDataRequest) ProtoMessage() {}

func (x *GetLatestTabularDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTabularDataRequest.ProtoReflect.Descriptor instead.
func (*GetLatestTabularDataRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *GetLatestTabularDataRequest) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *GetLatestTabularDataRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetLatestTabularDataRequest) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *GetLatestTabularDataRequest) GetResourceSubtype() string {
	if x != nil {
		return x.ResourceSubtype
	}
	return ""
}

// GetLatestTabularDataResponse provides the data, time synced, and time captured of the most recent tabular data captured
// from the requested data source, as long as it was synced within the last year.
type GetLatestTabularDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCaptured *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_captured,json=timeCaptured,proto3" json:"time_captured,omitempty"`
	TimeSynced   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_synced,json=timeSynced,proto3" json:"time_synced,omitempty"`
	Payload      *structpb.Struct       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetLatestTabularDataResponse) Reset() {
	*x = GetLatestTabularDataResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTabularDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTabularDataResponse) ProtoMessage() {}

func (x *GetLatestTabularDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTabularDataResponse.ProtoReflect.Descriptor instead.
func (*GetLatestTabularDataResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *GetLatestTabularDataResponse) GetTimeCaptured() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCaptured
	}
	return nil
}

func (x *GetLatestTabularDataResponse) GetTimeSynced() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeSynced
	}
	return nil
}

func (x *GetLatestTabularDataResponse) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

// BinaryData contains data and metadata associated with binary data.
type BinaryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binary   []byte          `protobuf:"bytes,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Metadata *BinaryMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BinaryData) Reset() {
	*x = BinaryData{}
	mi := &file_app_data_v1_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryData) ProtoMessage() {}

func (x *BinaryData) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryData.ProtoReflect.Descriptor instead.
func (*BinaryData) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *BinaryData) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *BinaryData) GetMetadata() *BinaryMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BinaryDataByFilterRequest requests the data and metadata of binary (image + file) data when a filter is provided.
type BinaryDataByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRequest         *DataRequest `protobuf:"bytes,1,opt,name=data_request,json=dataRequest,proto3" json:"data_request,omitempty"`
	IncludeBinary       bool         `protobuf:"varint,2,opt,name=include_binary,json=includeBinary,proto3" json:"include_binary,omitempty"`
	CountOnly           bool         `protobuf:"varint,3,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	IncludeInternalData bool         `protobuf:"varint,4,opt,name=include_internal_data,json=includeInternalData,proto3" json:"include_internal_data,omitempty"`
}

func (x *BinaryDataByFilterRequest) Reset() {
	*x = BinaryDataByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryDataByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryDataByFilterRequest) ProtoMessage() {}

func (x *BinaryDataByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryDataByFilterRequest.ProtoReflect.Descriptor instead.
func (*BinaryDataByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{18}
}

func (x *BinaryDataByFilterRequest) GetDataRequest() *DataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

func (x *BinaryDataByFilterRequest) GetIncludeBinary() bool {
	if x != nil {
		return x.IncludeBinary
	}
	return false
}

func (x *BinaryDataByFilterRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *BinaryDataByFilterRequest) GetIncludeInternalData() bool {
	if x != nil {
		return x.IncludeInternalData
	}
	return false
}

// BinaryDataByFilterResponse provides the data and metadata of binary (image + file) data when a filter is provided.
type BinaryDataByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []*BinaryData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Count          uint64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Last           string        `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	TotalSizeBytes uint64        `protobuf:"varint,4,opt,name=total_size_bytes,json=totalSizeBytes,proto3" json:"total_size_bytes,omitempty"`
}

func (x *BinaryDataByFilterResponse) Reset() {
	*x = BinaryDataByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryDataByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryDataByFilterResponse) ProtoMessage() {}

func (x *BinaryDataByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryDataByFilterResponse.ProtoReflect.Descriptor instead.
func (*BinaryDataByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{19}
}

func (x *BinaryDataByFilterResponse) GetData() []*BinaryData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BinaryDataByFilterResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BinaryDataByFilterResponse) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

func (x *BinaryDataByFilterResponse) GetTotalSizeBytes() uint64 {
	if x != nil {
		return x.TotalSizeBytes
	}
	return 0
}

// BinaryID is the unique identifier for a file that one can request to be retrieved or modified.
//
// Deprecated: Marked as deprecated in app/data/v1/data.proto.
type BinaryID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId         string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	LocationId     string `protobuf:"bytes,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
}

func (x *BinaryID) Reset() {
	*x = BinaryID{}
	mi := &file_app_data_v1_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryID) ProtoMessage() {}

func (x *BinaryID) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryID.ProtoReflect.Descriptor instead.
func (*BinaryID) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{20}
}

func (x *BinaryID) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *BinaryID) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *BinaryID) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

// BinaryDataByFilterRequest requests the data and metadata of binary (image + file) data by binary ids.
type BinaryDataByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeBinary bool `protobuf:"varint,2,opt,name=include_binary,json=includeBinary,proto3" json:"include_binary,omitempty"`
	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,3,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,4,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
}

func (x *BinaryDataByIDsRequest) Reset() {
	*x = BinaryDataByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryDataByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryDataByIDsRequest) ProtoMessage() {}

func (x *BinaryDataByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryDataByIDsRequest.ProtoReflect.Descriptor instead.
func (*BinaryDataByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{21}
}

func (x *BinaryDataByIDsRequest) GetIncludeBinary() bool {
	if x != nil {
		return x.IncludeBinary
	}
	return false
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *BinaryDataByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *BinaryDataByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

// BinaryDataByIDsResponse provides the data and metadata of binary (image + file) data when a filter is provided.
type BinaryDataByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*BinaryData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Count uint64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BinaryDataByIDsResponse) Reset() {
	*x = BinaryDataByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryDataByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryDataByIDsResponse) ProtoMessage() {}

func (x *BinaryDataByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryDataByIDsResponse.ProtoReflect.Descriptor instead.
func (*BinaryDataByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{22}
}

func (x *BinaryDataByIDsResponse) GetData() []*BinaryData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BinaryDataByIDsResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// BoundingBox represents a labeled bounding box on an image.
// x and y values are normalized ratios between 0 and 1.
type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label          string  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XMinNormalized float64 `protobuf:"fixed64,3,opt,name=x_min_normalized,json=xMinNormalized,proto3" json:"x_min_normalized,omitempty"`
	YMinNormalized float64 `protobuf:"fixed64,4,opt,name=y_min_normalized,json=yMinNormalized,proto3" json:"y_min_normalized,omitempty"`
	XMaxNormalized float64 `protobuf:"fixed64,5,opt,name=x_max_normalized,json=xMaxNormalized,proto3" json:"x_max_normalized,omitempty"`
	YMaxNormalized float64 `protobuf:"fixed64,6,opt,name=y_max_normalized,json=yMaxNormalized,proto3" json:"y_max_normalized,omitempty"`
	// confidence is an optional range from 0 - 1
	Confidence *float64 `protobuf:"fixed64,7,opt,name=confidence,proto3,oneof" json:"confidence,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	mi := &file_app_data_v1_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{23}
}

func (x *BoundingBox) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BoundingBox) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BoundingBox) GetXMinNormalized() float64 {
	if x != nil {
		return x.XMinNormalized
	}
	return 0
}

func (x *BoundingBox) GetYMinNormalized() float64 {
	if x != nil {
		return x.YMinNormalized
	}
	return 0
}

func (x *BoundingBox) GetXMaxNormalized() float64 {
	if x != nil {
		return x.XMaxNormalized
	}
	return 0
}

func (x *BoundingBox) GetYMaxNormalized() float64 {
	if x != nil {
		return x.YMaxNormalized
	}
	return 0
}

func (x *BoundingBox) GetConfidence() float64 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

// Classification represents a confidence score with a label.
type Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// confidence is an optional range from 0 - 1
	Confidence *float64 `protobuf:"fixed64,2,opt,name=confidence,proto3,oneof" json:"confidence,omitempty"`
}

func (x *Classification) Reset() {
	*x = Classification{}
	mi := &file_app_data_v1_data_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classification) ProtoMessage() {}

func (x *Classification) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classification.ProtoReflect.Descriptor instead.
func (*Classification) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{24}
}

func (x *Classification) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Classification) GetConfidence() float64 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

// Annotations are data annotations used for machine learning.
type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bboxes          []*BoundingBox    `protobuf:"bytes,1,rep,name=bboxes,proto3" json:"bboxes,omitempty"`
	Classifications []*Classification `protobuf:"bytes,2,rep,name=classifications,proto3" json:"classifications,omitempty"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	mi := &file_app_data_v1_data_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{25}
}

func (x *Annotations) GetBboxes() []*BoundingBox {
	if x != nil {
		return x.Bboxes
	}
	return nil
}

func (x *Annotations) GetClassifications() []*Classification {
	if x != nil {
		return x.Classifications
	}
	return nil
}

// BinaryMetadata is the metadata associated with binary data.
type BinaryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CaptureMetadata *CaptureMetadata       `protobuf:"bytes,2,opt,name=capture_metadata,json=captureMetadata,proto3" json:"capture_metadata,omitempty"`
	TimeRequested   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_requested,json=timeRequested,proto3" json:"time_requested,omitempty"`
	TimeReceived    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
	FileName        string                 `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileExt         string                 `protobuf:"bytes,6,opt,name=file_ext,json=fileExt,proto3" json:"file_ext,omitempty"`
	Uri             string                 `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	Annotations     *Annotations           `protobuf:"bytes,8,opt,name=annotations,proto3" json:"annotations,omitempty"`
	DatasetIds      []string               `protobuf:"bytes,9,rep,name=dataset_ids,json=datasetIds,proto3" json:"dataset_ids,omitempty"`
	BinaryDataId    string                 `protobuf:"bytes,10,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
}

func (x *BinaryMetadata) Reset() {
	*x = BinaryMetadata{}
	mi := &file_app_data_v1_data_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryMetadata) ProtoMessage() {}

func (x *BinaryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryMetadata.ProtoReflect.Descriptor instead.
func (*BinaryMetadata) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{26}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *BinaryMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BinaryMetadata) GetCaptureMetadata() *CaptureMetadata {
	if x != nil {
		return x.CaptureMetadata
	}
	return nil
}

func (x *BinaryMetadata) GetTimeRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRequested
	}
	return nil
}

func (x *BinaryMetadata) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

func (x *BinaryMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BinaryMetadata) GetFileExt() string {
	if x != nil {
		return x.FileExt
	}
	return ""
}

func (x *BinaryMetadata) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *BinaryMetadata) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *BinaryMetadata) GetDatasetIds() []string {
	if x != nil {
		return x.DatasetIds
	}
	return nil
}

func (x *BinaryMetadata) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

// DeleteTabularDataRequest deletes the data from the organization that is older than `delete_older_than_days`
// in UTC time. For example, if delete_older_than_days=1 and the request is made at 1AM EST on March 11
// (March 11 5AM UTC), this deletes all data captured through March 10 11:59:59PM UTC.
// If the request is at 10PM EST on March 11 (March 12 2AM UTC), this deletes all data captured
// through March 11 11:59:59PM UTC.
// If delete_older_than_days is 0, all existing data is deleted.
type DeleteTabularDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId      string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DeleteOlderThanDays uint32 `protobuf:"varint,2,opt,name=delete_older_than_days,json=deleteOlderThanDays,proto3" json:"delete_older_than_days,omitempty"`
}

func (x *DeleteTabularDataRequest) Reset() {
	*x = DeleteTabularDataRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabularDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabularDataRequest) ProtoMessage() {}

func (x *DeleteTabularDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabularDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteTabularDataRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteTabularDataRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DeleteTabularDataRequest) GetDeleteOlderThanDays() uint32 {
	if x != nil {
		return x.DeleteOlderThanDays
	}
	return 0
}

// DeleteBinaryDataResponse returns the number of tabular datapoints deleted.
type DeleteTabularDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount uint64 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
}

func (x *DeleteTabularDataResponse) Reset() {
	*x = DeleteTabularDataResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabularDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabularDataResponse) ProtoMessage() {}

func (x *DeleteTabularDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabularDataResponse.ProtoReflect.Descriptor instead.
func (*DeleteTabularDataResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTabularDataResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// DeleteBinaryDataByFilterRequest deletes the data and metadata of binary data when a filter is provided.
type DeleteBinaryDataByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter              *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	IncludeInternalData bool    `protobuf:"varint,2,opt,name=include_internal_data,json=includeInternalData,proto3" json:"include_internal_data,omitempty"`
}

func (x *DeleteBinaryDataByFilterRequest) Reset() {
	*x = DeleteBinaryDataByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBinaryDataByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinaryDataByFilterRequest) ProtoMessage() {}

func (x *DeleteBinaryDataByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinaryDataByFilterRequest.ProtoReflect.Descriptor instead.
func (*DeleteBinaryDataByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteBinaryDataByFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteBinaryDataByFilterRequest) GetIncludeInternalData() bool {
	if x != nil {
		return x.IncludeInternalData
	}
	return false
}

// DeleteBinaryDataByFilterResponse returns the number of binary files deleted when a filter is provided.
type DeleteBinaryDataByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount uint64 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
}

func (x *DeleteBinaryDataByFilterResponse) Reset() {
	*x = DeleteBinaryDataByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBinaryDataByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinaryDataByFilterResponse) ProtoMessage() {}

func (x *DeleteBinaryDataByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinaryDataByFilterResponse.ProtoReflect.Descriptor instead.
func (*DeleteBinaryDataByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteBinaryDataByFilterResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// DeleteBinaryDataByIDsRequest deletes the data and metadata of binary data when binary ids are provided.
type DeleteBinaryDataByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,2,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,3,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
}

func (x *DeleteBinaryDataByIDsRequest) Reset() {
	*x = DeleteBinaryDataByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBinaryDataByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinaryDataByIDsRequest) ProtoMessage() {}

func (x *DeleteBinaryDataByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinaryDataByIDsRequest.ProtoReflect.Descriptor instead.
func (*DeleteBinaryDataByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{31}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *DeleteBinaryDataByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *DeleteBinaryDataByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

// DeleteBinaryDataByIDsResponse returns the number of binary files deleted when binary ids are provided.
type DeleteBinaryDataByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount uint64 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
}

func (x *DeleteBinaryDataByIDsResponse) Reset() {
	*x = DeleteBinaryDataByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBinaryDataByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinaryDataByIDsResponse) ProtoMessage() {}

func (x *DeleteBinaryDataByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinaryDataByIDsResponse.ProtoReflect.Descriptor instead.
func (*DeleteBinaryDataByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteBinaryDataByIDsResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// AddTagsToBinaryDataByIDsRequest requests adding all specified tags to each of the files when binary ids are provided.
type AddTagsToBinaryDataByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,3,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,4,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
	Tags          []string    `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddTagsToBinaryDataByIDsRequest) Reset() {
	*x = AddTagsToBinaryDataByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagsToBinaryDataByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsToBinaryDataByIDsRequest) ProtoMessage() {}

func (x *AddTagsToBinaryDataByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsToBinaryDataByIDsRequest.ProtoReflect.Descriptor instead.
func (*AddTagsToBinaryDataByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{33}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *AddTagsToBinaryDataByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *AddTagsToBinaryDataByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

func (x *AddTagsToBinaryDataByIDsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsToBinaryDataByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagsToBinaryDataByIDsResponse) Reset() {
	*x = AddTagsToBinaryDataByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagsToBinaryDataByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsToBinaryDataByIDsResponse) ProtoMessage() {}

func (x *AddTagsToBinaryDataByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsToBinaryDataByIDsResponse.ProtoReflect.Descriptor instead.
func (*AddTagsToBinaryDataByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{34}
}

// AddTagsToBinaryDataByFilterRequest requests adding all specified tags to each of the files when a filter is provided.
type AddTagsToBinaryDataByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Tags   []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddTagsToBinaryDataByFilterRequest) Reset() {
	*x = AddTagsToBinaryDataByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagsToBinaryDataByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsToBinaryDataByFilterRequest) ProtoMessage() {}

func (x *AddTagsToBinaryDataByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsToBinaryDataByFilterRequest.ProtoReflect.Descriptor instead.
func (*AddTagsToBinaryDataByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{35}
}

func (x *AddTagsToBinaryDataByFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AddTagsToBinaryDataByFilterRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsToBinaryDataByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagsToBinaryDataByFilterResponse) Reset() {
	*x = AddTagsToBinaryDataByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTagsToBinaryDataByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsToBinaryDataByFilterResponse) ProtoMessage() {}

func (x *AddTagsToBinaryDataByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsToBinaryDataByFilterResponse.ProtoReflect.Descriptor instead.
func (*AddTagsToBinaryDataByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{36}
}

// RemoveTagsFromBinaryDataByIDsRequest requests removing the given tags value from each file when binary ids are provided.
type RemoveTagsFromBinaryDataByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,3,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,4,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
	Tags          []string    `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *RemoveTagsFromBinaryDataByIDsRequest) Reset() {
	*x = RemoveTagsFromBinaryDataByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagsFromBinaryDataByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsFromBinaryDataByIDsRequest) ProtoMessage() {}

func (x *RemoveTagsFromBinaryDataByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsFromBinaryDataByIDsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTagsFromBinaryDataByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{37}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *RemoveTagsFromBinaryDataByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *RemoveTagsFromBinaryDataByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

func (x *RemoveTagsFromBinaryDataByIDsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// RemoveTagsFromBinaryDataByIDsResponse returns the number of binary files which had tags removed
type RemoveTagsFromBinaryDataByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount uint64 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
}

func (x *RemoveTagsFromBinaryDataByIDsResponse) Reset() {
	*x = RemoveTagsFromBinaryDataByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagsFromBinaryDataByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsFromBinaryDataByIDsResponse) ProtoMessage() {}

func (x *RemoveTagsFromBinaryDataByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsFromBinaryDataByIDsResponse.ProtoReflect.Descriptor instead.
func (*RemoveTagsFromBinaryDataByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{38}
}

func (x *RemoveTagsFromBinaryDataByIDsResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// RemoveTagsFromBinaryDataByFilterRequest requests removing the given tags value from each file when a filter is provided.
type RemoveTagsFromBinaryDataByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Tags   []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *RemoveTagsFromBinaryDataByFilterRequest) Reset() {
	*x = RemoveTagsFromBinaryDataByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagsFromBinaryDataByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsFromBinaryDataByFilterRequest) ProtoMessage() {}

func (x *RemoveTagsFromBinaryDataByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsFromBinaryDataByFilterRequest.ProtoReflect.Descriptor instead.
func (*RemoveTagsFromBinaryDataByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{39}
}

func (x *RemoveTagsFromBinaryDataByFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RemoveTagsFromBinaryDataByFilterRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// RemoveTagsFromBinaryDataByFilterResponse returns the number of binary files which had tags removed.
type RemoveTagsFromBinaryDataByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount uint64 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
}

func (x *RemoveTagsFromBinaryDataByFilterResponse) Reset() {
	*x = RemoveTagsFromBinaryDataByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTagsFromBinaryDataByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTagsFromBinaryDataByFilterResponse) ProtoMessage() {}

func (x *RemoveTagsFromBinaryDataByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTagsFromBinaryDataByFilterResponse.ProtoReflect.Descriptor instead.
func (*RemoveTagsFromBinaryDataByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{40}
}

func (x *RemoveTagsFromBinaryDataByFilterResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// TagsByFilterRequest requests the unique tags from data based on given filter.
type TagsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TagsByFilterRequest) Reset() {
	*x = TagsByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsByFilterRequest) ProtoMessage() {}

func (x *TagsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsByFilterRequest.ProtoReflect.Descriptor instead.
func (*TagsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{41}
}

func (x *TagsByFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// TagsByFilterResponse returns the unique tags from data based on given filter.
type TagsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagsByFilterResponse) Reset() {
	*x = TagsByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsByFilterResponse) ProtoMessage() {}

func (x *TagsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsByFilterResponse.ProtoReflect.Descriptor instead.
func (*TagsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{42}
}

func (x *TagsByFilterResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// AddBoundingBoxToImageByIDRequest specifies the binary ID to which a bounding box
// with the associated label and position in normalized coordinates will be added.
type AddBoundingBoxToImageByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryId       *BinaryID `protobuf:"bytes,7,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	BinaryDataId   string    `protobuf:"bytes,8,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
	Label          string    `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XMinNormalized float64   `protobuf:"fixed64,3,opt,name=x_min_normalized,json=xMinNormalized,proto3" json:"x_min_normalized,omitempty"`
	YMinNormalized float64   `protobuf:"fixed64,4,opt,name=y_min_normalized,json=yMinNormalized,proto3" json:"y_min_normalized,omitempty"`
	XMaxNormalized float64   `protobuf:"fixed64,5,opt,name=x_max_normalized,json=xMaxNormalized,proto3" json:"x_max_normalized,omitempty"`
	YMaxNormalized float64   `protobuf:"fixed64,6,opt,name=y_max_normalized,json=yMaxNormalized,proto3" json:"y_max_normalized,omitempty"`
}

func (x *AddBoundingBoxToImageByIDRequest) Reset() {
	*x = AddBoundingBoxToImageByIDRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBoundingBoxToImageByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBoundingBoxToImageByIDRequest) ProtoMessage() {}

func (x *AddBoundingBoxToImageByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBoundingBoxToImageByIDRequest.ProtoReflect.Descriptor instead.
func (*AddBoundingBoxToImageByIDRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{43}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *AddBoundingBoxToImageByIDRequest) GetBinaryId() *BinaryID {
	if x != nil {
		return x.BinaryId
	}
	return nil
}

func (x *AddBoundingBoxToImageByIDRequest) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

func (x *AddBoundingBoxToImageByIDRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AddBoundingBoxToImageByIDRequest) GetXMinNormalized() float64 {
	if x != nil {
		return x.XMinNormalized
	}
	return 0
}

func (x *AddBoundingBoxToImageByIDRequest) GetYMinNormalized() float64 {
	if x != nil {
		return x.YMinNormalized
	}
	return 0
}

func (x *AddBoundingBoxToImageByIDRequest) GetXMaxNormalized() float64 {
	if x != nil {
		return x.XMaxNormalized
	}
	return 0
}

func (x *AddBoundingBoxToImageByIDRequest) GetYMaxNormalized() float64 {
	if x != nil {
		return x.YMaxNormalized
	}
	return 0
}

// AddBoundingBoxToImageByIDResponse returns the bounding box ID of the successfully added bounding box.
type AddBoundingBoxToImageByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BboxId string `protobuf:"bytes,1,opt,name=bbox_id,json=bboxId,proto3" json:"bbox_id,omitempty"`
}

func (x *AddBoundingBoxToImageByIDResponse) Reset() {
	*x = AddBoundingBoxToImageByIDResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBoundingBoxToImageByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBoundingBoxToImageByIDResponse) ProtoMessage() {}

func (x *AddBoundingBoxToImageByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBoundingBoxToImageByIDResponse.ProtoReflect.Descriptor instead.
func (*AddBoundingBoxToImageByIDResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{44}
}

func (x *AddBoundingBoxToImageByIDResponse) GetBboxId() string {
	if x != nil {
		return x.BboxId
	}
	return ""
}

// RemoveBoundingBoxFromImageByIDRequest removes the bounding box with specified bounding box ID for the file represented by the binary ID.
type RemoveBoundingBoxFromImageByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryId     *BinaryID `protobuf:"bytes,3,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	BinaryDataId string    `protobuf:"bytes,4,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
	BboxId       string    `protobuf:"bytes,2,opt,name=bbox_id,json=bboxId,proto3" json:"bbox_id,omitempty"`
}

func (x *RemoveBoundingBoxFromImageByIDRequest) Reset() {
	*x = RemoveBoundingBoxFromImageByIDRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBoundingBoxFromImageByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBoundingBoxFromImageByIDRequest) ProtoMessage() {}

func (x *RemoveBoundingBoxFromImageByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBoundingBoxFromImageByIDRequest.ProtoReflect.Descriptor instead.
func (*RemoveBoundingBoxFromImageByIDRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{45}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *RemoveBoundingBoxFromImageByIDRequest) GetBinaryId() *BinaryID {
	if x != nil {
		return x.BinaryId
	}
	return nil
}

func (x *RemoveBoundingBoxFromImageByIDRequest) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

func (x *RemoveBoundingBoxFromImageByIDRequest) GetBboxId() string {
	if x != nil {
		return x.BboxId
	}
	return ""
}

type RemoveBoundingBoxFromImageByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBoundingBoxFromImageByIDResponse) Reset() {
	*x = RemoveBoundingBoxFromImageByIDResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBoundingBoxFromImageByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBoundingBoxFromImageByIDResponse) ProtoMessage() {}

func (x *RemoveBoundingBoxFromImageByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBoundingBoxFromImageByIDResponse.ProtoReflect.Descriptor instead.
func (*RemoveBoundingBoxFromImageByIDResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{46}
}

// UpdateBoundingBoxRequest updates the bounding box with specified bounding box ID for the file represented by the binary ID.
type UpdateBoundingBoxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryId       *BinaryID `protobuf:"bytes,1,opt,name=binary_id,json=binaryId,proto3" json:"binary_id,omitempty"`
	BinaryDataId   string    `protobuf:"bytes,8,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
	BboxId         string    `protobuf:"bytes,2,opt,name=bbox_id,json=bboxId,proto3" json:"bbox_id,omitempty"`
	Label          *string   `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	XMinNormalized *float64  `protobuf:"fixed64,4,opt,name=x_min_normalized,json=xMinNormalized,proto3,oneof" json:"x_min_normalized,omitempty"`
	YMinNormalized *float64  `protobuf:"fixed64,5,opt,name=y_min_normalized,json=yMinNormalized,proto3,oneof" json:"y_min_normalized,omitempty"`
	XMaxNormalized *float64  `protobuf:"fixed64,6,opt,name=x_max_normalized,json=xMaxNormalized,proto3,oneof" json:"x_max_normalized,omitempty"`
	YMaxNormalized *float64  `protobuf:"fixed64,7,opt,name=y_max_normalized,json=yMaxNormalized,proto3,oneof" json:"y_max_normalized,omitempty"`
}

func (x *UpdateBoundingBoxRequest) Reset() {
	*x = UpdateBoundingBoxRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBoundingBoxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoundingBoxRequest) ProtoMessage() {}

func (x *UpdateBoundingBoxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoundingBoxRequest.ProtoReflect.Descriptor instead.
func (*UpdateBoundingBoxRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{47}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *UpdateBoundingBoxRequest) GetBinaryId() *BinaryID {
	if x != nil {
		return x.BinaryId
	}
	return nil
}

func (x *UpdateBoundingBoxRequest) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

func (x *UpdateBoundingBoxRequest) GetBboxId() string {
	if x != nil {
		return x.BboxId
	}
	return ""
}

func (x *UpdateBoundingBoxRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *UpdateBoundingBoxRequest) GetXMinNormalized() float64 {
	if x != nil && x.XMinNormalized != nil {
		return *x.XMinNormalized
	}
	return 0
}

func (x *UpdateBoundingBoxRequest) GetYMinNormalized() float64 {
	if x != nil && x.YMinNormalized != nil {
		return *x.YMinNormalized
	}
	return 0
}

func (x *UpdateBoundingBoxRequest) GetXMaxNormalized() float64 {
	if x != nil && x.XMaxNormalized != nil {
		return *x.XMaxNormalized
	}
	return 0
}

func (x *UpdateBoundingBoxRequest) GetYMaxNormalized() float64 {
	if x != nil && x.YMaxNormalized != nil {
		return *x.YMaxNormalized
	}
	return 0
}

type UpdateBoundingBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBoundingBoxResponse) Reset() {
	*x = UpdateBoundingBoxResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBoundingBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoundingBoxResponse) ProtoMessage() {}

func (x *UpdateBoundingBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoundingBoxResponse.ProtoReflect.Descriptor instead.
func (*UpdateBoundingBoxResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{48}
}

// BoundingBoxLabelsByFilterRequest requests all the labels of the bounding boxes from files from a given filter.
type BoundingBoxLabelsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *BoundingBoxLabelsByFilterRequest) Reset() {
	*x = BoundingBoxLabelsByFilterRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundingBoxLabelsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxLabelsByFilterRequest) ProtoMessage() {}

func (x *BoundingBoxLabelsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxLabelsByFilterRequest.ProtoReflect.Descriptor instead.
func (*BoundingBoxLabelsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{49}
}

func (x *BoundingBoxLabelsByFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// BoundingBoxLabelsByFilterRequest returns all the labels of the bounding boxes from files from a given filter.
type BoundingBoxLabelsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *BoundingBoxLabelsByFilterResponse) Reset() {
	*x = BoundingBoxLabelsByFilterResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundingBoxLabelsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxLabelsByFilterResponse) ProtoMessage() {}

func (x *BoundingBoxLabelsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxLabelsByFilterResponse.ProtoReflect.Descriptor instead.
func (*BoundingBoxLabelsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{50}
}

func (x *BoundingBoxLabelsByFilterResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// ConfigureDatabaseUserRequest accepts a Viam organization ID and a password for the database user
// being configured. Viam uses gRPC over TLS, so the entire request will be encrypted while in
// flight, including the password.
type ConfigureDatabaseUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ConfigureDatabaseUserRequest) Reset() {
	*x = ConfigureDatabaseUserRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureDatabaseUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDatabaseUserRequest) ProtoMessage() {}

func (x *ConfigureDatabaseUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDatabaseUserRequest.ProtoReflect.Descriptor instead.
func (*ConfigureDatabaseUserRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{51}
}

func (x *ConfigureDatabaseUserRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ConfigureDatabaseUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ConfigureDatabaseUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigureDatabaseUserResponse) Reset() {
	*x = ConfigureDatabaseUserResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureDatabaseUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDatabaseUserResponse) ProtoMessage() {}

func (x *ConfigureDatabaseUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDatabaseUserResponse.ProtoReflect.Descriptor instead.
func (*ConfigureDatabaseUserResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{52}
}

// GetDatabaseConnectionRequest requests the database connection hostname.
type GetDatabaseConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetDatabaseConnectionRequest) Reset() {
	*x = GetDatabaseConnectionRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseConnectionRequest) ProtoMessage() {}

func (x *GetDatabaseConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseConnectionRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{53}
}

func (x *GetDatabaseConnectionRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// GetDatabaseConnectionResponse returns the database connection hostname endpoint. It also returns
// a URI that can be used to connect to the database instance through MongoDB clients, as well as
// information on whether the Viam organization has a database user configured.
type GetDatabaseConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname        string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	MongodbUri      string `protobuf:"bytes,2,opt,name=mongodb_uri,json=mongodbUri,proto3" json:"mongodb_uri,omitempty"`
	HasDatabaseUser bool   `protobuf:"varint,3,opt,name=has_database_user,json=hasDatabaseUser,proto3" json:"has_database_user,omitempty"`
}

func (x *GetDatabaseConnectionResponse) Reset() {
	*x = GetDatabaseConnectionResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseConnectionResponse) ProtoMessage() {}

func (x *GetDatabaseConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetDatabaseConnectionResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{54}
}

func (x *GetDatabaseConnectionResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetDatabaseConnectionResponse) GetMongodbUri() string {
	if x != nil {
		return x.MongodbUri
	}
	return ""
}

func (x *GetDatabaseConnectionResponse) GetHasDatabaseUser() bool {
	if x != nil {
		return x.HasDatabaseUser
	}
	return false
}

// AddBinaryDataToDatasetByIDsRequest adds the binary data with the given binary IDs to a dataset with dataset_id.
type AddBinaryDataToDatasetByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,1,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,3,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
	DatasetId     string      `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *AddBinaryDataToDatasetByIDsRequest) Reset() {
	*x = AddBinaryDataToDatasetByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBinaryDataToDatasetByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBinaryDataToDatasetByIDsRequest) ProtoMessage() {}

func (x *AddBinaryDataToDatasetByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBinaryDataToDatasetByIDsRequest.ProtoReflect.Descriptor instead.
func (*AddBinaryDataToDatasetByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{55}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *AddBinaryDataToDatasetByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *AddBinaryDataToDatasetByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

func (x *AddBinaryDataToDatasetByIDsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type AddBinaryDataToDatasetByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBinaryDataToDatasetByIDsResponse) Reset() {
	*x = AddBinaryDataToDatasetByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBinaryDataToDatasetByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBinaryDataToDatasetByIDsResponse) ProtoMessage() {}

func (x *AddBinaryDataToDatasetByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBinaryDataToDatasetByIDsResponse.ProtoReflect.Descriptor instead.
func (*AddBinaryDataToDatasetByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{56}
}

// RemoveBinaryDataFromDatasetByIDsRequest removes the specified binary IDs from a dataset with dataset_id.
type RemoveBinaryDataFromDatasetByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in app/data/v1/data.proto.
	BinaryIds     []*BinaryID `protobuf:"bytes,1,rep,name=binary_ids,json=binaryIds,proto3" json:"binary_ids,omitempty"`
	BinaryDataIds []string    `protobuf:"bytes,3,rep,name=binary_data_ids,json=binaryDataIds,proto3" json:"binary_data_ids,omitempty"`
	DatasetId     string      `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *RemoveBinaryDataFromDatasetByIDsRequest) Reset() {
	*x = RemoveBinaryDataFromDatasetByIDsRequest{}
	mi := &file_app_data_v1_data_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBinaryDataFromDatasetByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBinaryDataFromDatasetByIDsRequest) ProtoMessage() {}

func (x *RemoveBinaryDataFromDatasetByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBinaryDataFromDatasetByIDsRequest.ProtoReflect.Descriptor instead.
func (*RemoveBinaryDataFromDatasetByIDsRequest) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{57}
}

// Deprecated: Marked as deprecated in app/data/v1/data.proto.
func (x *RemoveBinaryDataFromDatasetByIDsRequest) GetBinaryIds() []*BinaryID {
	if x != nil {
		return x.BinaryIds
	}
	return nil
}

func (x *RemoveBinaryDataFromDatasetByIDsRequest) GetBinaryDataIds() []string {
	if x != nil {
		return x.BinaryDataIds
	}
	return nil
}

func (x *RemoveBinaryDataFromDatasetByIDsRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

type RemoveBinaryDataFromDatasetByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBinaryDataFromDatasetByIDsResponse) Reset() {
	*x = RemoveBinaryDataFromDatasetByIDsResponse{}
	mi := &file_app_data_v1_data_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBinaryDataFromDatasetByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBinaryDataFromDatasetByIDsResponse) ProtoMessage() {}

func (x *RemoveBinaryDataFromDatasetByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_data_v1_data_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBinaryDataFromDatasetByIDsResponse.ProtoReflect.Descriptor instead.
func (*RemoveBinaryDataFromDatasetByIDsResponse) Descriptor() ([]byte, []int) {
	return file_app_data_v1_data_proto_rawDescGZIP(), []int{58}
}

var File_app_data_v1_data_proto protoreflect.FileDescriptor

var file_app_data_v1_data_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xaa, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x62, 0x6f, 0x78, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc3, 0x04,
	0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x71, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe7,
	0x01, 0x0a, 0x1b, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x5f, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x18, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x4d, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x71, 0x6c, 0x5f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x71, 0x6c, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x09, 0x6d,
	0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4d, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3,
	0x01, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x94, 0x04, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x62, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a, 0x19,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x08, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xb6, 0x01,
	0x0a, 0x16, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x17, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x78, 0x4d, 0x69, 0x6e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x78,
	0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x0e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3f, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22,
	0x40, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x87, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac,
	0x01, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x22, 0x0a,
	0x20, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6a, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x25, 0x0a,
	0x23, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x13, 0x54, 0x61, 0x67, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd2, 0x02,
	0x0a, 0x20, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78,
	0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49,
	0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x78,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x78, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x78, 0x4d, 0x61, 0x78, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0x3c, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x62, 0x6f, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x49, 0x64,
	0x22, 0xb2, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcb, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x0e, 0x78, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0e,
	0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x78,
	0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0e, 0x79, 0x4d,
	0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x78, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x1b, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x20, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x3b, 0x0a, 0x21, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x63, 0x0a,
	0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x27,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x44, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a,
	0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x49, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x47, 0x53, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x47,
	0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x47, 0x53,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x54,
	0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xbe, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x54, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x32, 0xd6, 0x16, 0x0a, 0x0b, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x69, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x29, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10,
	0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4d, 0x51, 0x4c,
	0x12, 0x29, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x4d, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4d, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x12, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x12, 0x2e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54,
	0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x12, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x36, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x1e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x46,
	0x72, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x37, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x19, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x2a, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x39, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_data_v1_data_proto_rawDescOnce sync.Once
	file_app_data_v1_data_proto_rawDescData = file_app_data_v1_data_proto_rawDesc
)

func file_app_data_v1_data_proto_rawDescGZIP() []byte {
	file_app_data_v1_data_proto_rawDescOnce.Do(func() {
		file_app_data_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_data_v1_data_proto_rawDescData)
	})
	return file_app_data_v1_data_proto_rawDescData
}

var file_app_data_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_app_data_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_app_data_v1_data_proto_goTypes = []any{
	(Order)(0),                                       // 0: viam.app.data.v1.Order
	(TagsFilterType)(0),                              // 1: viam.app.data.v1.TagsFilterType
	(TabularDataSourceType)(0),                       // 2: viam.app.data.v1.TabularDataSourceType
	(*DataRequest)(nil),                              // 3: viam.app.data.v1.DataRequest
	(*Filter)(nil),                                   // 4: viam.app.data.v1.Filter
	(*TagsFilter)(nil),                               // 5: viam.app.data.v1.TagsFilter
	(*CaptureMetadata)(nil),                          // 6: viam.app.data.v1.CaptureMetadata
	(*CaptureInterval)(nil),                          // 7: viam.app.data.v1.CaptureInterval
	(*TabularDataByFilterRequest)(nil),               // 8: viam.app.data.v1.TabularDataByFilterRequest
	(*TabularDataByFilterResponse)(nil),              // 9: viam.app.data.v1.TabularDataByFilterResponse
	(*TabularData)(nil),                              // 10: viam.app.data.v1.TabularData
	(*TabularDataBySQLRequest)(nil),                  // 11: viam.app.data.v1.TabularDataBySQLRequest
	(*TabularDataBySQLResponse)(nil),                 // 12: viam.app.data.v1.TabularDataBySQLResponse
	(*TabularDataSource)(nil),                        // 13: viam.app.data.v1.TabularDataSource
	(*TabularDataByMQLRequest)(nil),                  // 14: viam.app.data.v1.TabularDataByMQLRequest
	(*TabularDataByMQLResponse)(nil),                 // 15: viam.app.data.v1.TabularDataByMQLResponse
	(*ExportTabularDataRequest)(nil),                 // 16: viam.app.data.v1.ExportTabularDataRequest
	(*ExportTabularDataResponse)(nil),                // 17: viam.app.data.v1.ExportTabularDataResponse
	(*GetLatestTabularDataRequest)(nil),              // 18: viam.app.data.v1.GetLatestTabularDataRequest
	(*GetLatestTabularDataResponse)(nil),             // 19: viam.app.data.v1.GetLatestTabularDataResponse
	(*BinaryData)(nil),                               // 20: viam.app.data.v1.BinaryData
	(*BinaryDataByFilterRequest)(nil),                // 21: viam.app.data.v1.BinaryDataByFilterRequest
	(*BinaryDataByFilterResponse)(nil),               // 22: viam.app.data.v1.BinaryDataByFilterResponse
	(*BinaryID)(nil),                                 // 23: viam.app.data.v1.BinaryID
	(*BinaryDataByIDsRequest)(nil),                   // 24: viam.app.data.v1.BinaryDataByIDsRequest
	(*BinaryDataByIDsResponse)(nil),                  // 25: viam.app.data.v1.BinaryDataByIDsResponse
	(*BoundingBox)(nil),                              // 26: viam.app.data.v1.BoundingBox
	(*Classification)(nil),                           // 27: viam.app.data.v1.Classification
	(*Annotations)(nil),                              // 28: viam.app.data.v1.Annotations
	(*BinaryMetadata)(nil),                           // 29: viam.app.data.v1.BinaryMetadata
	(*DeleteTabularDataRequest)(nil),                 // 30: viam.app.data.v1.DeleteTabularDataRequest
	(*DeleteTabularDataResponse)(nil),                // 31: viam.app.data.v1.DeleteTabularDataResponse
	(*DeleteBinaryDataByFilterRequest)(nil),          // 32: viam.app.data.v1.DeleteBinaryDataByFilterRequest
	(*DeleteBinaryDataByFilterResponse)(nil),         // 33: viam.app.data.v1.DeleteBinaryDataByFilterResponse
	(*DeleteBinaryDataByIDsRequest)(nil),             // 34: viam.app.data.v1.DeleteBinaryDataByIDsRequest
	(*DeleteBinaryDataByIDsResponse)(nil),            // 35: viam.app.data.v1.DeleteBinaryDataByIDsResponse
	(*AddTagsToBinaryDataByIDsRequest)(nil),          // 36: viam.app.data.v1.AddTagsToBinaryDataByIDsRequest
	(*AddTagsToBinaryDataByIDsResponse)(nil),         // 37: viam.app.data.v1.AddTagsToBinaryDataByIDsResponse
	(*AddTagsToBinaryDataByFilterRequest)(nil),       // 38: viam.app.data.v1.AddTagsToBinaryDataByFilterRequest
	(*AddTagsToBinaryDataByFilterResponse)(nil),      // 39: viam.app.data.v1.AddTagsToBinaryDataByFilterResponse
	(*RemoveTagsFromBinaryDataByIDsRequest)(nil),     // 40: viam.app.data.v1.RemoveTagsFromBinaryDataByIDsRequest
	(*RemoveTagsFromBinaryDataByIDsResponse)(nil),    // 41: viam.app.data.v1.RemoveTagsFromBinaryDataByIDsResponse
	(*RemoveTagsFromBinaryDataByFilterRequest)(nil),  // 42: viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest
	(*RemoveTagsFromBinaryDataByFilterResponse)(nil), // 43: viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse
	(*TagsByFilterRequest)(nil),                      // 44: viam.app.data.v1.TagsByFilterRequest
	(*TagsByFilterResponse)(nil),                     // 45: viam.app.data.v1.TagsByFilterResponse
	(*AddBoundingBoxToImageByIDRequest)(nil),         // 46: viam.app.data.v1.AddBoundingBoxToImageByIDRequest
	(*AddBoundingBoxToImageByIDResponse)(nil),        // 47: viam.app.data.v1.AddBoundingBoxToImageByIDResponse
	(*RemoveBoundingBoxFromImageByIDRequest)(nil),    // 48: viam.app.data.v1.RemoveBoundingBoxFromImageByIDRequest
	(*RemoveBoundingBoxFromImageByIDResponse)(nil),   // 49: viam.app.data.v1.RemoveBoundingBoxFromImageByIDResponse
	(*UpdateBoundingBoxRequest)(nil),                 // 50: viam.app.data.v1.UpdateBoundingBoxRequest
	(*UpdateBoundingBoxResponse)(nil),                // 51: viam.app.data.v1.UpdateBoundingBoxResponse
	(*BoundingBoxLabelsByFilterRequest)(nil),         // 52: viam.app.data.v1.BoundingBoxLabelsByFilterRequest
	(*BoundingBoxLabelsByFilterResponse)(nil),        // 53: viam.app.data.v1.BoundingBoxLabelsByFilterResponse
	(*ConfigureDatabaseUserRequest)(nil),             // 54: viam.app.data.v1.ConfigureDatabaseUserRequest
	(*ConfigureDatabaseUserResponse)(nil),            // 55: viam.app.data.v1.ConfigureDatabaseUserResponse
	(*GetDatabaseConnectionRequest)(nil),             // 56: viam.app.data.v1.GetDatabaseConnectionRequest
	(*GetDatabaseConnectionResponse)(nil),            // 57: viam.app.data.v1.GetDatabaseConnectionResponse
	(*AddBinaryDataToDatasetByIDsRequest)(nil),       // 58: viam.app.data.v1.AddBinaryDataToDatasetByIDsRequest
	(*AddBinaryDataToDatasetByIDsResponse)(nil),      // 59: viam.app.data.v1.AddBinaryDataToDatasetByIDsResponse
	(*RemoveBinaryDataFromDatasetByIDsRequest)(nil),  // 60: viam.app.data.v1.RemoveBinaryDataFromDatasetByIDsRequest
	(*RemoveBinaryDataFromDatasetByIDsResponse)(nil), // 61: viam.app.data.v1.RemoveBinaryDataFromDatasetByIDsResponse
	nil,                           // 62: viam.app.data.v1.CaptureMetadata.MethodParametersEntry
	(*timestamppb.Timestamp)(nil), // 63: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 64: google.protobuf.Struct
	(*anypb.Any)(nil),             // 65: google.protobuf.Any
}
var file_app_data_v1_data_proto_depIdxs = []int32{
	4,  // 0: viam.app.data.v1.DataRequest.filter:type_name -> viam.app.data.v1.Filter
	0,  // 1: viam.app.data.v1.DataRequest.sort_order:type_name -> viam.app.data.v1.Order
	7,  // 2: viam.app.data.v1.Filter.interval:type_name -> viam.app.data.v1.CaptureInterval
	5,  // 3: viam.app.data.v1.Filter.tags_filter:type_name -> viam.app.data.v1.TagsFilter
	1,  // 4: viam.app.data.v1.TagsFilter.type:type_name -> viam.app.data.v1.TagsFilterType
	62, // 5: viam.app.data.v1.CaptureMetadata.method_parameters:type_name -> viam.app.data.v1.CaptureMetadata.MethodParametersEntry
	63, // 6: viam.app.data.v1.CaptureInterval.start:type_name -> google.protobuf.Timestamp
	63, // 7: viam.app.data.v1.CaptureInterval.end:type_name -> google.protobuf.Timestamp
	3,  // 8: viam.app.data.v1.TabularDataByFilterRequest.data_request:type_name -> viam.app.data.v1.DataRequest
	6,  // 9: viam.app.data.v1.TabularDataByFilterResponse.metadata:type_name -> viam.app.data.v1.CaptureMetadata
	10, // 10: viam.app.data.v1.TabularDataByFilterResponse.data:type_name -> viam.app.data.v1.TabularData
	64, // 11: viam.app.data.v1.TabularData.data:type_name -> google.protobuf.Struct
	63, // 12: viam.app.data.v1.TabularData.time_requested:type_name -> google.protobuf.Timestamp
	63, // 13: viam.app.data.v1.TabularData.time_received:type_name -> google.protobuf.Timestamp
	2,  // 14: viam.app.data.v1.TabularDataSource.type:type_name -> viam.app.data.v1.TabularDataSourceType
	13, // 15: viam.app.data.v1.TabularDataByMQLRequest.data_source:type_name -> viam.app.data.v1.TabularDataSource
	7,  // 16: viam.app.data.v1.ExportTabularDataRequest.interval:type_name -> viam.app.data.v1.CaptureInterval
	63, // 17: viam.app.data.v1.ExportTabularDataResponse.time_captured:type_name -> google.protobuf.Timestamp
	64, // 18: viam.app.data.v1.ExportTabularDataResponse.method_parameters:type_name -> google.protobuf.Struct
	64, // 19: viam.app.data.v1.ExportTabularDataResponse.payload:type_name -> google.protobuf.Struct
	63, // 20: viam.app.data.v1.GetLatestTabularDataResponse.time_captured:type_name -> google.protobuf.Timestamp
	63, // 21: viam.app.data.v1.GetLatestTabularDataResponse.time_synced:type_name -> google.protobuf.Timestamp
	64, // 22: viam.app.data.v1.GetLatestTabularDataResponse.payload:type_name -> google.protobuf.Struct
	29, // 23: viam.app.data.v1.BinaryData.metadata:type_name -> viam.app.data.v1.BinaryMetadata
	3,  // 24: viam.app.data.v1.BinaryDataByFilterRequest.data_request:type_name -> viam.app.data.v1.DataRequest
	20, // 25: viam.app.data.v1.BinaryDataByFilterResponse.data:type_name -> viam.app.data.v1.BinaryData
	23, // 26: viam.app.data.v1.BinaryDataByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	20, // 27: viam.app.data.v1.BinaryDataByIDsResponse.data:type_name -> viam.app.data.v1.BinaryData
	26, // 28: viam.app.data.v1.Annotations.bboxes:type_name -> viam.app.data.v1.BoundingBox
	27, // 29: viam.app.data.v1.Annotations.classifications:type_name -> viam.app.data.v1.Classification
	6,  // 30: viam.app.data.v1.BinaryMetadata.capture_metadata:type_name -> viam.app.data.v1.CaptureMetadata
	63, // 31: viam.app.data.v1.BinaryMetadata.time_requested:type_name -> google.protobuf.Timestamp
	63, // 32: viam.app.data.v1.BinaryMetadata.time_received:type_name -> google.protobuf.Timestamp
	28, // 33: viam.app.data.v1.BinaryMetadata.annotations:type_name -> viam.app.data.v1.Annotations
	4,  // 34: viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter:type_name -> viam.app.data.v1.Filter
	23, // 35: viam.app.data.v1.DeleteBinaryDataByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	23, // 36: viam.app.data.v1.AddTagsToBinaryDataByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	4,  // 37: viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter:type_name -> viam.app.data.v1.Filter
	23, // 38: viam.app.data.v1.RemoveTagsFromBinaryDataByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	4,  // 39: viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter:type_name -> viam.app.data.v1.Filter
	4,  // 40: viam.app.data.v1.TagsByFilterRequest.filter:type_name -> viam.app.data.v1.Filter
	23, // 41: viam.app.data.v1.AddBoundingBoxToImageByIDRequest.binary_id:type_name -> viam.app.data.v1.BinaryID
	23, // 42: viam.app.data.v1.RemoveBoundingBoxFromImageByIDRequest.binary_id:type_name -> viam.app.data.v1.BinaryID
	23, // 43: viam.app.data.v1.UpdateBoundingBoxRequest.binary_id:type_name -> viam.app.data.v1.BinaryID
	4,  // 44: viam.app.data.v1.BoundingBoxLabelsByFilterRequest.filter:type_name -> viam.app.data.v1.Filter
	23, // 45: viam.app.data.v1.AddBinaryDataToDatasetByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	23, // 46: viam.app.data.v1.RemoveBinaryDataFromDatasetByIDsRequest.binary_ids:type_name -> viam.app.data.v1.BinaryID
	65, // 47: viam.app.data.v1.CaptureMetadata.MethodParametersEntry.value:type_name -> google.protobuf.Any
	8,  // 48: viam.app.data.v1.DataService.TabularDataByFilter:input_type -> viam.app.data.v1.TabularDataByFilterRequest
	11, // 49: viam.app.data.v1.DataService.TabularDataBySQL:input_type -> viam.app.data.v1.TabularDataBySQLRequest
	14, // 50: viam.app.data.v1.DataService.TabularDataByMQL:input_type -> viam.app.data.v1.TabularDataByMQLRequest
	16, // 51: viam.app.data.v1.DataService.ExportTabularData:input_type -> viam.app.data.v1.ExportTabularDataRequest
	18, // 52: viam.app.data.v1.DataService.GetLatestTabularData:input_type -> viam.app.data.v1.GetLatestTabularDataRequest
	21, // 53: viam.app.data.v1.DataService.BinaryDataByFilter:input_type -> viam.app.data.v1.BinaryDataByFilterRequest
	24, // 54: viam.app.data.v1.DataService.BinaryDataByIDs:input_type -> viam.app.data.v1.BinaryDataByIDsRequest
	30, // 55: viam.app.data.v1.DataService.DeleteTabularData:input_type -> viam.app.data.v1.DeleteTabularDataRequest
	32, // 56: viam.app.data.v1.DataService.DeleteBinaryDataByFilter:input_type -> viam.app.data.v1.DeleteBinaryDataByFilterRequest
	34, // 57: viam.app.data.v1.DataService.DeleteBinaryDataByIDs:input_type -> viam.app.data.v1.DeleteBinaryDataByIDsRequest
	36, // 58: viam.app.data.v1.DataService.AddTagsToBinaryDataByIDs:input_type -> viam.app.data.v1.AddTagsToBinaryDataByIDsRequest
	38, // 59: viam.app.data.v1.DataService.AddTagsToBinaryDataByFilter:input_type -> viam.app.data.v1.AddTagsToBinaryDataByFilterRequest
	40, // 60: viam.app.data.v1.DataService.RemoveTagsFromBinaryDataByIDs:input_type -> viam.app.data.v1.RemoveTagsFromBinaryDataByIDsRequest
	42, // 61: viam.app.data.v1.DataService.RemoveTagsFromBinaryDataByFilter:input_type -> viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest
	44, // 62: viam.app.data.v1.DataService.TagsByFilter:input_type -> viam.app.data.v1.TagsByFilterRequest
	46, // 63: viam.app.data.v1.DataService.AddBoundingBoxToImageByID:input_type -> viam.app.data.v1.AddBoundingBoxToImageByIDRequest
	48, // 64: viam.app.data.v1.DataService.RemoveBoundingBoxFromImageByID:input_type -> viam.app.data.v1.RemoveBoundingBoxFromImageByIDRequest
	52, // 65: viam.app.data.v1.DataService.BoundingBoxLabelsByFilter:input_type -> viam.app.data.v1.BoundingBoxLabelsByFilterRequest
	50, // 66: viam.app.data.v1.DataService.UpdateBoundingBox:input_type -> viam.app.data.v1.UpdateBoundingBoxRequest
	56, // 67: viam.app.data.v1.DataService.GetDatabaseConnection:input_type -> viam.app.data.v1.GetDatabaseConnectionRequest
	54, // 68: viam.app.data.v1.DataService.ConfigureDatabaseUser:input_type -> viam.app.data.v1.ConfigureDatabaseUserRequest
	58, // 69: viam.app.data.v1.DataService.AddBinaryDataToDatasetByIDs:input_type -> viam.app.data.v1.AddBinaryDataToDatasetByIDsRequest
	60, // 70: viam.app.data.v1.DataService.RemoveBinaryDataFromDatasetByIDs:input_type -> viam.app.data.v1.RemoveBinaryDataFromDatasetByIDsRequest
	9,  // 71: viam.app.data.v1.DataService.TabularDataByFilter:output_type -> viam.app.data.v1.TabularDataByFilterResponse
	12, // 72: viam.app.data.v1.DataService.TabularDataBySQL:output_type -> viam.app.data.v1.TabularDataBySQLResponse
	15, // 73: viam.app.data.v1.DataService.TabularDataByMQL:output_type -> viam.app.data.v1.TabularDataByMQLResponse
	17, // 74: viam.app.data.v1.DataService.ExportTabularData:output_type -> viam.app.data.v1.ExportTabularDataResponse
	19, // 75: viam.app.data.v1.DataService.GetLatestTabularData:output_type -> viam.app.data.v1.GetLatestTabularDataResponse
	22, // 76: viam.app.data.v1.DataService.BinaryDataByFilter:output_type -> viam.app.data.v1.BinaryDataByFilterResponse
	25, // 77: viam.app.data.v1.DataService.BinaryDataByIDs:output_type -> viam.app.data.v1.BinaryDataByIDsResponse
	31, // 78: viam.app.data.v1.DataService.DeleteTabularData:output_type -> viam.app.data.v1.DeleteTabularDataResponse
	33, // 79: viam.app.data.v1.DataService.DeleteBinaryDataByFilter:output_type -> viam.app.data.v1.DeleteBinaryDataByFilterResponse
	35, // 80: viam.app.data.v1.DataService.DeleteBinaryDataByIDs:output_type -> viam.app.data.v1.DeleteBinaryDataByIDsResponse
	37, // 81: viam.app.data.v1.DataService.AddTagsToBinaryDataByIDs:output_type -> viam.app.data.v1.AddTagsToBinaryDataByIDsResponse
	39, // 82: viam.app.data.v1.DataService.AddTagsToBinaryDataByFilter:output_type -> viam.app.data.v1.AddTagsToBinaryDataByFilterResponse
	41, // 83: viam.app.data.v1.DataService.RemoveTagsFromBinaryDataByIDs:output_type -> viam.app.data.v1.RemoveTagsFromBinaryDataByIDsResponse
	43, // 84: viam.app.data.v1.DataService.RemoveTagsFromBinaryDataByFilter:output_type -> viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse
	45, // 85: viam.app.data.v1.DataService.TagsByFilter:output_type -> viam.app.data.v1.TagsByFilterResponse
	47, // 86: viam.app.data.v1.DataService.AddBoundingBoxToImageByID:output_type -> viam.app.data.v1.AddBoundingBoxToImageByIDResponse
	49, // 87: viam.app.data.v1.DataService.RemoveBoundingBoxFromImageByID:output_type -> viam.app.data.v1.RemoveBoundingBoxFromImageByIDResponse
	53, // 88: viam.app.data.v1.DataService.BoundingBoxLabelsByFilter:output_type -> viam.app.data.v1.BoundingBoxLabelsByFilterResponse
	51, // 89: viam.app.data.v1.DataService.UpdateBoundingBox:output_type -> viam.app.data.v1.UpdateBoundingBoxResponse
	57, // 90: viam.app.data.v1.DataService.GetDatabaseConnection:output_type -> viam.app.data.v1.GetDatabaseConnectionResponse
	55, // 91: viam.app.data.v1.DataService.ConfigureDatabaseUser:output_type -> viam.app.data.v1.ConfigureDatabaseUserResponse
	59, // 92: viam.app.data.v1.DataService.AddBinaryDataToDatasetByIDs:output_type -> viam.app.data.v1.AddBinaryDataToDatasetByIDsResponse
	61, // 93: viam.app.data.v1.DataService.RemoveBinaryDataFromDatasetByIDs:output_type -> viam.app.data.v1.RemoveBinaryDataFromDatasetByIDsResponse
	71, // [71:94] is the sub-list for method output_type
	48, // [48:71] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_app_data_v1_data_proto_init() }
func file_app_data_v1_data_proto_init() {
	if File_app_data_v1_data_proto != nil {
		return
	}
	file_app_data_v1_data_proto_msgTypes[10].OneofWrappers = []any{}
	file_app_data_v1_data_proto_msgTypes[11].OneofWrappers = []any{}
	file_app_data_v1_data_proto_msgTypes[23].OneofWrappers = []any{}
	file_app_data_v1_data_proto_msgTypes[24].OneofWrappers = []any{}
	file_app_data_v1_data_proto_msgTypes[47].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_data_v1_data_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_data_v1_data_proto_goTypes,
		DependencyIndexes: file_app_data_v1_data_proto_depIdxs,
		EnumInfos:         file_app_data_v1_data_proto_enumTypes,
		MessageInfos:      file_app_data_v1_data_proto_msgTypes,
	}.Build()
	File_app_data_v1_data_proto = out.File
	file_app_data_v1_data_proto_rawDesc = nil
	file_app_data_v1_data_proto_goTypes = nil
	file_app_data_v1_data_proto_depIdxs = nil
}
