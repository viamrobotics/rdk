// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: app/datasync/v1/data_sync.proto

package v1

import (
	v1 "go.viam.com/api/app/data/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MimeType int32

const (
	MimeType_MIME_TYPE_UNSPECIFIED     MimeType = 0
	MimeType_MIME_TYPE_IMAGE_JPEG      MimeType = 1
	MimeType_MIME_TYPE_IMAGE_PNG       MimeType = 2
	MimeType_MIME_TYPE_APPLICATION_PCD MimeType = 3
)

// Enum value maps for MimeType.
var (
	MimeType_name = map[int32]string{
		0: "MIME_TYPE_UNSPECIFIED",
		1: "MIME_TYPE_IMAGE_JPEG",
		2: "MIME_TYPE_IMAGE_PNG",
		3: "MIME_TYPE_APPLICATION_PCD",
	}
	MimeType_value = map[string]int32{
		"MIME_TYPE_UNSPECIFIED":     0,
		"MIME_TYPE_IMAGE_JPEG":      1,
		"MIME_TYPE_IMAGE_PNG":       2,
		"MIME_TYPE_APPLICATION_PCD": 3,
	}
)

func (x MimeType) Enum() *MimeType {
	p := new(MimeType)
	*p = x
	return p
}

func (x MimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_datasync_v1_data_sync_proto_enumTypes[0].Descriptor()
}

func (MimeType) Type() protoreflect.EnumType {
	return &file_app_datasync_v1_data_sync_proto_enumTypes[0]
}

func (x MimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MimeType.Descriptor instead.
func (MimeType) EnumDescriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{0}
}

// DataType specifies the type of data uploaded.
type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED    DataType = 0
	DataType_DATA_TYPE_BINARY_SENSOR  DataType = 1
	DataType_DATA_TYPE_TABULAR_SENSOR DataType = 2
	DataType_DATA_TYPE_FILE           DataType = 3
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_UNSPECIFIED",
		1: "DATA_TYPE_BINARY_SENSOR",
		2: "DATA_TYPE_TABULAR_SENSOR",
		3: "DATA_TYPE_FILE",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED":    0,
		"DATA_TYPE_BINARY_SENSOR":  1,
		"DATA_TYPE_TABULAR_SENSOR": 2,
		"DATA_TYPE_FILE":           3,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_datasync_v1_data_sync_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_app_datasync_v1_data_sync_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{1}
}

// DataCaptureUploadRequest requests to upload the contents and metadata for tabular data.
type DataCaptureUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *UploadMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SensorContents []*SensorData   `protobuf:"bytes,2,rep,name=sensor_contents,json=sensorContents,proto3" json:"sensor_contents,omitempty"`
}

func (x *DataCaptureUploadRequest) Reset() {
	*x = DataCaptureUploadRequest{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCaptureUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCaptureUploadRequest) ProtoMessage() {}

func (x *DataCaptureUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCaptureUploadRequest.ProtoReflect.Descriptor instead.
func (*DataCaptureUploadRequest) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{0}
}

func (x *DataCaptureUploadRequest) GetMetadata() *UploadMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataCaptureUploadRequest) GetSensorContents() []*SensorData {
	if x != nil {
		return x.SensorContents
	}
	return nil
}

// DataCaptureUploadResponse returns the file id of the uploaded contents and metadata for tabular data.
type DataCaptureUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	BinaryDataId string `protobuf:"bytes,2,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
}

func (x *DataCaptureUploadResponse) Reset() {
	*x = DataCaptureUploadResponse{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCaptureUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCaptureUploadResponse) ProtoMessage() {}

func (x *DataCaptureUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCaptureUploadResponse.ProtoReflect.Descriptor instead.
func (*DataCaptureUploadResponse) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{1}
}

func (x *DataCaptureUploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *DataCaptureUploadResponse) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

// FileUploadRequest requests to upload the contents and metadata for binary (image + file) data.
// The first packet must be the UploadMetadata associated with the binary data.
type FileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadPacket:
	//
	//	*FileUploadRequest_Metadata
	//	*FileUploadRequest_FileContents
	UploadPacket isFileUploadRequest_UploadPacket `protobuf_oneof:"upload_packet"`
}

func (x *FileUploadRequest) Reset() {
	*x = FileUploadRequest{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRequest) ProtoMessage() {}

func (x *FileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRequest.ProtoReflect.Descriptor instead.
func (*FileUploadRequest) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{2}
}

func (m *FileUploadRequest) GetUploadPacket() isFileUploadRequest_UploadPacket {
	if m != nil {
		return m.UploadPacket
	}
	return nil
}

func (x *FileUploadRequest) GetMetadata() *UploadMetadata {
	if x, ok := x.GetUploadPacket().(*FileUploadRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *FileUploadRequest) GetFileContents() *FileData {
	if x, ok := x.GetUploadPacket().(*FileUploadRequest_FileContents); ok {
		return x.FileContents
	}
	return nil
}

type isFileUploadRequest_UploadPacket interface {
	isFileUploadRequest_UploadPacket()
}

type FileUploadRequest_Metadata struct {
	Metadata *UploadMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type FileUploadRequest_FileContents struct {
	FileContents *FileData `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3,oneof"`
}

func (*FileUploadRequest_Metadata) isFileUploadRequest_UploadPacket() {}

func (*FileUploadRequest_FileContents) isFileUploadRequest_UploadPacket() {}

// FileUploadResponse returns the file id of the uploaded contents and metadata for binary (image + file) data.
type FileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	BinaryDataId string `protobuf:"bytes,2,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
}

func (x *FileUploadResponse) Reset() {
	*x = FileUploadResponse{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadResponse) ProtoMessage() {}

func (x *FileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadResponse.ProtoReflect.Descriptor instead.
func (*FileUploadResponse) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{3}
}

func (x *FileUploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileUploadResponse) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

// StreamingDataCaptureUploadRequest requests to upload the contents and metadata for streaming binary (image + file) data.
// The first packet must be the DataCaptureUploadMetadata associated with the data.
type StreamingDataCaptureUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadPacket:
	//
	//	*StreamingDataCaptureUploadRequest_Metadata
	//	*StreamingDataCaptureUploadRequest_Data
	UploadPacket isStreamingDataCaptureUploadRequest_UploadPacket `protobuf_oneof:"upload_packet"`
}

func (x *StreamingDataCaptureUploadRequest) Reset() {
	*x = StreamingDataCaptureUploadRequest{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingDataCaptureUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingDataCaptureUploadRequest) ProtoMessage() {}

func (x *StreamingDataCaptureUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingDataCaptureUploadRequest.ProtoReflect.Descriptor instead.
func (*StreamingDataCaptureUploadRequest) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingDataCaptureUploadRequest) GetUploadPacket() isStreamingDataCaptureUploadRequest_UploadPacket {
	if m != nil {
		return m.UploadPacket
	}
	return nil
}

func (x *StreamingDataCaptureUploadRequest) GetMetadata() *DataCaptureUploadMetadata {
	if x, ok := x.GetUploadPacket().(*StreamingDataCaptureUploadRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *StreamingDataCaptureUploadRequest) GetData() []byte {
	if x, ok := x.GetUploadPacket().(*StreamingDataCaptureUploadRequest_Data); ok {
		return x.Data
	}
	return nil
}

type isStreamingDataCaptureUploadRequest_UploadPacket interface {
	isStreamingDataCaptureUploadRequest_UploadPacket()
}

type StreamingDataCaptureUploadRequest_Metadata struct {
	Metadata *DataCaptureUploadMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type StreamingDataCaptureUploadRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StreamingDataCaptureUploadRequest_Metadata) isStreamingDataCaptureUploadRequest_UploadPacket() {
}

func (*StreamingDataCaptureUploadRequest_Data) isStreamingDataCaptureUploadRequest_UploadPacket() {}

// StreamingDataCaptureUploadResponse returns the file id of the uploaded contents and metadata for streaming binary (image + file) data.
type StreamingDataCaptureUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	BinaryDataId string `protobuf:"bytes,2,opt,name=binary_data_id,json=binaryDataId,proto3" json:"binary_data_id,omitempty"`
}

func (x *StreamingDataCaptureUploadResponse) Reset() {
	*x = StreamingDataCaptureUploadResponse{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingDataCaptureUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingDataCaptureUploadResponse) ProtoMessage() {}

func (x *StreamingDataCaptureUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingDataCaptureUploadResponse.ProtoReflect.Descriptor instead.
func (*StreamingDataCaptureUploadResponse) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingDataCaptureUploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *StreamingDataCaptureUploadResponse) GetBinaryDataId() string {
	if x != nil {
		return x.BinaryDataId
	}
	return ""
}

// SensorMetadata contains the time the sensor data was requested and was
// received.
type SensorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRequested *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_requested,json=timeRequested,proto3" json:"time_requested,omitempty"`
	TimeReceived  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
	MimeType      MimeType               `protobuf:"varint,3,opt,name=mime_type,json=mimeType,proto3,enum=viam.app.datasync.v1.MimeType" json:"mime_type,omitempty"`
	Annotations   *v1.Annotations        `protobuf:"bytes,4,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *SensorMetadata) Reset() {
	*x = SensorMetadata{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMetadata) ProtoMessage() {}

func (x *SensorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMetadata.ProtoReflect.Descriptor instead.
func (*SensorMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{6}
}

func (x *SensorMetadata) GetTimeRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeRequested
	}
	return nil
}

func (x *SensorMetadata) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

func (x *SensorMetadata) GetMimeType() MimeType {
	if x != nil {
		return x.MimeType
	}
	return MimeType_MIME_TYPE_UNSPECIFIED
}

func (x *SensorMetadata) GetAnnotations() *v1.Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// SensorData contains the contents and metadata for tabular data.
type SensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *SensorMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SensorData_Struct
	//	*SensorData_Binary
	Data isSensorData_Data `protobuf_oneof:"data"`
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{7}
}

func (x *SensorData) GetMetadata() *SensorMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *SensorData) GetData() isSensorData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SensorData) GetStruct() *structpb.Struct {
	if x, ok := x.GetData().(*SensorData_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *SensorData) GetBinary() []byte {
	if x, ok := x.GetData().(*SensorData_Binary); ok {
		return x.Binary
	}
	return nil
}

type isSensorData_Data interface {
	isSensorData_Data()
}

type SensorData_Struct struct {
	Struct *structpb.Struct `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

type SensorData_Binary struct {
	Binary []byte `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}

func (*SensorData_Struct) isSensorData_Data() {}

func (*SensorData_Binary) isSensorData_Data() {}

// FileData contains the contents of binary (image + file) data.
type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{8}
}

func (x *FileData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// UploadMetadata contains the metadata for binary (image + file) data.
type UploadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId           string                `protobuf:"bytes,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	ComponentType    string                `protobuf:"bytes,2,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentName    string                `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	MethodName       string                `protobuf:"bytes,5,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Type             DataType              `protobuf:"varint,6,opt,name=type,proto3,enum=viam.app.datasync.v1.DataType" json:"type,omitempty"`
	FileName         string                `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,8,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileExtension    string                `protobuf:"bytes,9,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	Tags             []string              `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UploadMetadata) Reset() {
	*x = UploadMetadata{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMetadata) ProtoMessage() {}

func (x *UploadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMetadata.ProtoReflect.Descriptor instead.
func (*UploadMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{9}
}

func (x *UploadMetadata) GetPartId() string {
	if x != nil {
		return x.PartId
	}
	return ""
}

func (x *UploadMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *UploadMetadata) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *UploadMetadata) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *UploadMetadata) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *UploadMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadMetadata) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *UploadMetadata) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *UploadMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// CaptureInterval specifies the start and end times of the data capture.
type CaptureInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CaptureInterval) Reset() {
	*x = CaptureInterval{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInterval) ProtoMessage() {}

func (x *CaptureInterval) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInterval.ProtoReflect.Descriptor instead.
func (*CaptureInterval) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{10}
}

func (x *CaptureInterval) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CaptureInterval) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// DataCaptureMetadata contains the metadata for data captured by collectors.
type DataCaptureMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType    string                `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentName    string                `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	MethodName       string                `protobuf:"bytes,4,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Type             DataType              `protobuf:"varint,5,opt,name=type,proto3,enum=viam.app.datasync.v1.DataType" json:"type,omitempty"`
	MethodParameters map[string]*anypb.Any `protobuf:"bytes,6,rep,name=method_parameters,json=methodParameters,proto3" json:"method_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileExtension    string                `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	Tags             []string              `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DataCaptureMetadata) Reset() {
	*x = DataCaptureMetadata{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCaptureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCaptureMetadata) ProtoMessage() {}

func (x *DataCaptureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCaptureMetadata.ProtoReflect.Descriptor instead.
func (*DataCaptureMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{11}
}

func (x *DataCaptureMetadata) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *DataCaptureMetadata) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *DataCaptureMetadata) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *DataCaptureMetadata) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *DataCaptureMetadata) GetMethodParameters() map[string]*anypb.Any {
	if x != nil {
		return x.MethodParameters
	}
	return nil
}

func (x *DataCaptureMetadata) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *DataCaptureMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// DataCaptureUploadMetadata contains the metadata for streaming binary (image + file) data.
type DataCaptureUploadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadMetadata *UploadMetadata `protobuf:"bytes,1,opt,name=upload_metadata,json=uploadMetadata,proto3" json:"upload_metadata,omitempty"`
	SensorMetadata *SensorMetadata `protobuf:"bytes,2,opt,name=sensor_metadata,json=sensorMetadata,proto3" json:"sensor_metadata,omitempty"`
}

func (x *DataCaptureUploadMetadata) Reset() {
	*x = DataCaptureUploadMetadata{}
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCaptureUploadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCaptureUploadMetadata) ProtoMessage() {}

func (x *DataCaptureUploadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_app_datasync_v1_data_sync_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCaptureUploadMetadata.ProtoReflect.Descriptor instead.
func (*DataCaptureUploadMetadata) Descriptor() ([]byte, []int) {
	return file_app_datasync_v1_data_sync_proto_rawDescGZIP(), []int{12}
}

func (x *DataCaptureUploadMetadata) GetUploadMetadata() *UploadMetadata {
	if x != nil {
		return x.UploadMetadata
	}
	return nil
}

func (x *DataCaptureUploadMetadata) GetSensorMetadata() *SensorMetadata {
	if x != nil {
		return x.SensorMetadata
	}
	return nil
}

var File_app_datasync_v1_data_sync_proto protoreflect.FileDescriptor

var file_app_datasync_v1_data_sync_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x5a, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x53, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0f, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x63, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x91, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x11,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xe5, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x15, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0xb9, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a,
	0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x77, 0x0a, 0x08, 0x4d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x43, 0x44, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x32, 0x80, 0x04, 0x0a, 0x0f, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9e,
	0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x83, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x28, 0x01, 0x12, 0xc5, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22,
	0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x28, 0x01, 0x42, 0x21, 0x5a,
	0x1f, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_datasync_v1_data_sync_proto_rawDescOnce sync.Once
	file_app_datasync_v1_data_sync_proto_rawDescData = file_app_datasync_v1_data_sync_proto_rawDesc
)

func file_app_datasync_v1_data_sync_proto_rawDescGZIP() []byte {
	file_app_datasync_v1_data_sync_proto_rawDescOnce.Do(func() {
		file_app_datasync_v1_data_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_datasync_v1_data_sync_proto_rawDescData)
	})
	return file_app_datasync_v1_data_sync_proto_rawDescData
}

var file_app_datasync_v1_data_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_app_datasync_v1_data_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_app_datasync_v1_data_sync_proto_goTypes = []any{
	(MimeType)(0),                              // 0: viam.app.datasync.v1.MimeType
	(DataType)(0),                              // 1: viam.app.datasync.v1.DataType
	(*DataCaptureUploadRequest)(nil),           // 2: viam.app.datasync.v1.DataCaptureUploadRequest
	(*DataCaptureUploadResponse)(nil),          // 3: viam.app.datasync.v1.DataCaptureUploadResponse
	(*FileUploadRequest)(nil),                  // 4: viam.app.datasync.v1.FileUploadRequest
	(*FileUploadResponse)(nil),                 // 5: viam.app.datasync.v1.FileUploadResponse
	(*StreamingDataCaptureUploadRequest)(nil),  // 6: viam.app.datasync.v1.StreamingDataCaptureUploadRequest
	(*StreamingDataCaptureUploadResponse)(nil), // 7: viam.app.datasync.v1.StreamingDataCaptureUploadResponse
	(*SensorMetadata)(nil),                     // 8: viam.app.datasync.v1.SensorMetadata
	(*SensorData)(nil),                         // 9: viam.app.datasync.v1.SensorData
	(*FileData)(nil),                           // 10: viam.app.datasync.v1.FileData
	(*UploadMetadata)(nil),                     // 11: viam.app.datasync.v1.UploadMetadata
	(*CaptureInterval)(nil),                    // 12: viam.app.datasync.v1.CaptureInterval
	(*DataCaptureMetadata)(nil),                // 13: viam.app.datasync.v1.DataCaptureMetadata
	(*DataCaptureUploadMetadata)(nil),          // 14: viam.app.datasync.v1.DataCaptureUploadMetadata
	nil,                                        // 15: viam.app.datasync.v1.UploadMetadata.MethodParametersEntry
	nil,                                        // 16: viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry
	(*timestamppb.Timestamp)(nil),              // 17: google.protobuf.Timestamp
	(*v1.Annotations)(nil),                     // 18: viam.app.data.v1.Annotations
	(*structpb.Struct)(nil),                    // 19: google.protobuf.Struct
	(*anypb.Any)(nil),                          // 20: google.protobuf.Any
}
var file_app_datasync_v1_data_sync_proto_depIdxs = []int32{
	11, // 0: viam.app.datasync.v1.DataCaptureUploadRequest.metadata:type_name -> viam.app.datasync.v1.UploadMetadata
	9,  // 1: viam.app.datasync.v1.DataCaptureUploadRequest.sensor_contents:type_name -> viam.app.datasync.v1.SensorData
	11, // 2: viam.app.datasync.v1.FileUploadRequest.metadata:type_name -> viam.app.datasync.v1.UploadMetadata
	10, // 3: viam.app.datasync.v1.FileUploadRequest.file_contents:type_name -> viam.app.datasync.v1.FileData
	14, // 4: viam.app.datasync.v1.StreamingDataCaptureUploadRequest.metadata:type_name -> viam.app.datasync.v1.DataCaptureUploadMetadata
	17, // 5: viam.app.datasync.v1.SensorMetadata.time_requested:type_name -> google.protobuf.Timestamp
	17, // 6: viam.app.datasync.v1.SensorMetadata.time_received:type_name -> google.protobuf.Timestamp
	0,  // 7: viam.app.datasync.v1.SensorMetadata.mime_type:type_name -> viam.app.datasync.v1.MimeType
	18, // 8: viam.app.datasync.v1.SensorMetadata.annotations:type_name -> viam.app.data.v1.Annotations
	8,  // 9: viam.app.datasync.v1.SensorData.metadata:type_name -> viam.app.datasync.v1.SensorMetadata
	19, // 10: viam.app.datasync.v1.SensorData.struct:type_name -> google.protobuf.Struct
	1,  // 11: viam.app.datasync.v1.UploadMetadata.type:type_name -> viam.app.datasync.v1.DataType
	15, // 12: viam.app.datasync.v1.UploadMetadata.method_parameters:type_name -> viam.app.datasync.v1.UploadMetadata.MethodParametersEntry
	17, // 13: viam.app.datasync.v1.CaptureInterval.start:type_name -> google.protobuf.Timestamp
	17, // 14: viam.app.datasync.v1.CaptureInterval.end:type_name -> google.protobuf.Timestamp
	1,  // 15: viam.app.datasync.v1.DataCaptureMetadata.type:type_name -> viam.app.datasync.v1.DataType
	16, // 16: viam.app.datasync.v1.DataCaptureMetadata.method_parameters:type_name -> viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry
	11, // 17: viam.app.datasync.v1.DataCaptureUploadMetadata.upload_metadata:type_name -> viam.app.datasync.v1.UploadMetadata
	8,  // 18: viam.app.datasync.v1.DataCaptureUploadMetadata.sensor_metadata:type_name -> viam.app.datasync.v1.SensorMetadata
	20, // 19: viam.app.datasync.v1.UploadMetadata.MethodParametersEntry.value:type_name -> google.protobuf.Any
	20, // 20: viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry.value:type_name -> google.protobuf.Any
	2,  // 21: viam.app.datasync.v1.DataSyncService.DataCaptureUpload:input_type -> viam.app.datasync.v1.DataCaptureUploadRequest
	4,  // 22: viam.app.datasync.v1.DataSyncService.FileUpload:input_type -> viam.app.datasync.v1.FileUploadRequest
	6,  // 23: viam.app.datasync.v1.DataSyncService.StreamingDataCaptureUpload:input_type -> viam.app.datasync.v1.StreamingDataCaptureUploadRequest
	3,  // 24: viam.app.datasync.v1.DataSyncService.DataCaptureUpload:output_type -> viam.app.datasync.v1.DataCaptureUploadResponse
	5,  // 25: viam.app.datasync.v1.DataSyncService.FileUpload:output_type -> viam.app.datasync.v1.FileUploadResponse
	7,  // 26: viam.app.datasync.v1.DataSyncService.StreamingDataCaptureUpload:output_type -> viam.app.datasync.v1.StreamingDataCaptureUploadResponse
	24, // [24:27] is the sub-list for method output_type
	21, // [21:24] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_app_datasync_v1_data_sync_proto_init() }
func file_app_datasync_v1_data_sync_proto_init() {
	if File_app_datasync_v1_data_sync_proto != nil {
		return
	}
	file_app_datasync_v1_data_sync_proto_msgTypes[2].OneofWrappers = []any{
		(*FileUploadRequest_Metadata)(nil),
		(*FileUploadRequest_FileContents)(nil),
	}
	file_app_datasync_v1_data_sync_proto_msgTypes[4].OneofWrappers = []any{
		(*StreamingDataCaptureUploadRequest_Metadata)(nil),
		(*StreamingDataCaptureUploadRequest_Data)(nil),
	}
	file_app_datasync_v1_data_sync_proto_msgTypes[7].OneofWrappers = []any{
		(*SensorData_Struct)(nil),
		(*SensorData_Binary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_datasync_v1_data_sync_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_datasync_v1_data_sync_proto_goTypes,
		DependencyIndexes: file_app_datasync_v1_data_sync_proto_depIdxs,
		EnumInfos:         file_app_datasync_v1_data_sync_proto_enumTypes,
		MessageInfos:      file_app_datasync_v1_data_sync_proto_msgTypes,
	}.Build()
	File_app_datasync_v1_data_sync_proto = out.File
	file_app_datasync_v1_data_sync_proto_rawDesc = nil
	file_app_datasync_v1_data_sync_proto_goTypes = nil
	file_app_datasync_v1_data_sync_proto_depIdxs = nil
}
