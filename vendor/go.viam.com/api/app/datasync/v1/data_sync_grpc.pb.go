// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/datasync/v1/data_sync.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataSyncServiceClient is the client API for DataSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSyncServiceClient interface {
	// DataCaptureUpload uploads the contents and metadata for tabular data.
	DataCaptureUpload(ctx context.Context, in *DataCaptureUploadRequest, opts ...grpc.CallOption) (*DataCaptureUploadResponse, error)
	// FileUpload uploads the contents and metadata for binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_FileUploadClient, error)
	// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	StreamingDataCaptureUpload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_StreamingDataCaptureUploadClient, error)
}

type dataSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSyncServiceClient(cc grpc.ClientConnInterface) DataSyncServiceClient {
	return &dataSyncServiceClient{cc}
}

func (c *dataSyncServiceClient) DataCaptureUpload(ctx context.Context, in *DataCaptureUploadRequest, opts ...grpc.CallOption) (*DataCaptureUploadResponse, error) {
	out := new(DataCaptureUploadResponse)
	err := c.cc.Invoke(ctx, "/viam.app.datasync.v1.DataSyncService/DataCaptureUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_FileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataSyncService_ServiceDesc.Streams[0], "/viam.app.datasync.v1.DataSyncService/FileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSyncServiceFileUploadClient{stream}
	return x, nil
}

type DataSyncService_FileUploadClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type dataSyncServiceFileUploadClient struct {
	grpc.ClientStream
}

func (x *dataSyncServiceFileUploadClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataSyncServiceFileUploadClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataSyncServiceClient) StreamingDataCaptureUpload(ctx context.Context, opts ...grpc.CallOption) (DataSyncService_StreamingDataCaptureUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataSyncService_ServiceDesc.Streams[1], "/viam.app.datasync.v1.DataSyncService/StreamingDataCaptureUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataSyncServiceStreamingDataCaptureUploadClient{stream}
	return x, nil
}

type DataSyncService_StreamingDataCaptureUploadClient interface {
	Send(*StreamingDataCaptureUploadRequest) error
	CloseAndRecv() (*StreamingDataCaptureUploadResponse, error)
	grpc.ClientStream
}

type dataSyncServiceStreamingDataCaptureUploadClient struct {
	grpc.ClientStream
}

func (x *dataSyncServiceStreamingDataCaptureUploadClient) Send(m *StreamingDataCaptureUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataSyncServiceStreamingDataCaptureUploadClient) CloseAndRecv() (*StreamingDataCaptureUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamingDataCaptureUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataSyncServiceServer is the server API for DataSyncService service.
// All implementations must embed UnimplementedDataSyncServiceServer
// for forward compatibility
type DataSyncServiceServer interface {
	// DataCaptureUpload uploads the contents and metadata for tabular data.
	DataCaptureUpload(context.Context, *DataCaptureUploadRequest) (*DataCaptureUploadResponse, error)
	// FileUpload uploads the contents and metadata for binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	FileUpload(DataSyncService_FileUploadServer) error
	// StreamingDataCaptureUpload uploads the streaming contents and metadata for streaming binary (image + file) data,
	// where the first packet must be the UploadMetadata.
	StreamingDataCaptureUpload(DataSyncService_StreamingDataCaptureUploadServer) error
	mustEmbedUnimplementedDataSyncServiceServer()
}

// UnimplementedDataSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataSyncServiceServer struct {
}

func (UnimplementedDataSyncServiceServer) DataCaptureUpload(context.Context, *DataCaptureUploadRequest) (*DataCaptureUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCaptureUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) FileUpload(DataSyncService_FileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) StreamingDataCaptureUpload(DataSyncService_StreamingDataCaptureUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDataCaptureUpload not implemented")
}
func (UnimplementedDataSyncServiceServer) mustEmbedUnimplementedDataSyncServiceServer() {}

// UnsafeDataSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSyncServiceServer will
// result in compilation errors.
type UnsafeDataSyncServiceServer interface {
	mustEmbedUnimplementedDataSyncServiceServer()
}

func RegisterDataSyncServiceServer(s grpc.ServiceRegistrar, srv DataSyncServiceServer) {
	s.RegisterService(&DataSyncService_ServiceDesc, srv)
}

func _DataSyncService_DataCaptureUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCaptureUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).DataCaptureUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.datasync.v1.DataSyncService/DataCaptureUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).DataCaptureUpload(ctx, req.(*DataCaptureUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataSyncServiceServer).FileUpload(&dataSyncServiceFileUploadServer{stream})
}

type DataSyncService_FileUploadServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type dataSyncServiceFileUploadServer struct {
	grpc.ServerStream
}

func (x *dataSyncServiceFileUploadServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataSyncServiceFileUploadServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataSyncService_StreamingDataCaptureUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataSyncServiceServer).StreamingDataCaptureUpload(&dataSyncServiceStreamingDataCaptureUploadServer{stream})
}

type DataSyncService_StreamingDataCaptureUploadServer interface {
	SendAndClose(*StreamingDataCaptureUploadResponse) error
	Recv() (*StreamingDataCaptureUploadRequest, error)
	grpc.ServerStream
}

type dataSyncServiceStreamingDataCaptureUploadServer struct {
	grpc.ServerStream
}

func (x *dataSyncServiceStreamingDataCaptureUploadServer) SendAndClose(m *StreamingDataCaptureUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataSyncServiceStreamingDataCaptureUploadServer) Recv() (*StreamingDataCaptureUploadRequest, error) {
	m := new(StreamingDataCaptureUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataSyncService_ServiceDesc is the grpc.ServiceDesc for DataSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.datasync.v1.DataSyncService",
	HandlerType: (*DataSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataCaptureUpload",
			Handler:    _DataSyncService_DataCaptureUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _DataSyncService_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingDataCaptureUpload",
			Handler:       _DataSyncService_StreamingDataCaptureUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "app/datasync/v1/data_sync.proto",
}
