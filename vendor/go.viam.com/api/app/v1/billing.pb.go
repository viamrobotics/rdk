// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: app/v1/billing.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentMethodType int32

const (
	PaymentMethodType_PAYMENT_METHOD_TYPE_UNSPECIFIED PaymentMethodType = 0
	PaymentMethodType_PAYMENT_METHOD_TYPE_CARD        PaymentMethodType = 1
)

// Enum value maps for PaymentMethodType.
var (
	PaymentMethodType_name = map[int32]string{
		0: "PAYMENT_METHOD_TYPE_UNSPECIFIED",
		1: "PAYMENT_METHOD_TYPE_CARD",
	}
	PaymentMethodType_value = map[string]int32{
		"PAYMENT_METHOD_TYPE_UNSPECIFIED": 0,
		"PAYMENT_METHOD_TYPE_CARD":        1,
	}
)

func (x PaymentMethodType) Enum() *PaymentMethodType {
	p := new(PaymentMethodType)
	*p = x
	return p
}

func (x PaymentMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_billing_proto_enumTypes[0].Descriptor()
}

func (PaymentMethodType) Type() protoreflect.EnumType {
	return &file_app_v1_billing_proto_enumTypes[0]
}

func (x PaymentMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodType.Descriptor instead.
func (PaymentMethodType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{0}
}

type UsageCostType int32

const (
	UsageCostType_USAGE_COST_TYPE_UNSPECIFIED UsageCostType = 0
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	UsageCostType_USAGE_COST_TYPE_DATA_UPLOAD UsageCostType = 1
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	UsageCostType_USAGE_COST_TYPE_DATA_EGRESS      UsageCostType = 2
	UsageCostType_USAGE_COST_TYPE_REMOTE_CONTROL   UsageCostType = 3
	UsageCostType_USAGE_COST_TYPE_STANDARD_COMPUTE UsageCostType = 4
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	UsageCostType_USAGE_COST_TYPE_CLOUD_STORAGE             UsageCostType = 5
	UsageCostType_USAGE_COST_TYPE_BINARY_DATA_CLOUD_STORAGE UsageCostType = 6
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	UsageCostType_USAGE_COST_TYPE_OTHER_CLOUD_STORAGE                 UsageCostType = 7
	UsageCostType_USAGE_COST_TYPE_PER_MACHINE                         UsageCostType = 8
	UsageCostType_USAGE_COST_TYPE_TRIGGER_NOTIFICATION                UsageCostType = 9
	UsageCostType_USAGE_COST_TYPE_TABULAR_DATA_CLOUD_STORAGE          UsageCostType = 10
	UsageCostType_USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_STORAGE        UsageCostType = 11
	UsageCostType_USAGE_COST_TYPE_LOGS_CLOUD_STORAGE                  UsageCostType = 12
	UsageCostType_USAGE_COST_TYPE_TRAINING_LOGS_CLOUD_STORAGE         UsageCostType = 13
	UsageCostType_USAGE_COST_TYPE_PACKAGES_CLOUD_STORAGE              UsageCostType = 14
	UsageCostType_USAGE_COST_TYPE_BINARY_DATA_UPLOAD                  UsageCostType = 15
	UsageCostType_USAGE_COST_TYPE_TABULAR_DATA_UPLOAD                 UsageCostType = 16
	UsageCostType_USAGE_COST_TYPE_LOGS_UPLOAD                         UsageCostType = 17
	UsageCostType_USAGE_COST_TYPE_BINARY_DATA_EGRESS                  UsageCostType = 18
	UsageCostType_USAGE_COST_TYPE_TABULAR_DATA_EGRESS                 UsageCostType = 19
	UsageCostType_USAGE_COST_TYPE_LOGS_EGRESS                         UsageCostType = 20
	UsageCostType_USAGE_COST_TYPE_TRAINING_LOGS_EGRESS                UsageCostType = 21
	UsageCostType_USAGE_COST_TYPE_TABULAR_DATA_DATABASE_CLOUD_STORAGE UsageCostType = 22
	UsageCostType_USAGE_COST_TYPE_TABULAR_DATA_DATABASE_COMPUTE       UsageCostType = 23
)

// Enum value maps for UsageCostType.
var (
	UsageCostType_name = map[int32]string{
		0:  "USAGE_COST_TYPE_UNSPECIFIED",
		1:  "USAGE_COST_TYPE_DATA_UPLOAD",
		2:  "USAGE_COST_TYPE_DATA_EGRESS",
		3:  "USAGE_COST_TYPE_REMOTE_CONTROL",
		4:  "USAGE_COST_TYPE_STANDARD_COMPUTE",
		5:  "USAGE_COST_TYPE_CLOUD_STORAGE",
		6:  "USAGE_COST_TYPE_BINARY_DATA_CLOUD_STORAGE",
		7:  "USAGE_COST_TYPE_OTHER_CLOUD_STORAGE",
		8:  "USAGE_COST_TYPE_PER_MACHINE",
		9:  "USAGE_COST_TYPE_TRIGGER_NOTIFICATION",
		10: "USAGE_COST_TYPE_TABULAR_DATA_CLOUD_STORAGE",
		11: "USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_STORAGE",
		12: "USAGE_COST_TYPE_LOGS_CLOUD_STORAGE",
		13: "USAGE_COST_TYPE_TRAINING_LOGS_CLOUD_STORAGE",
		14: "USAGE_COST_TYPE_PACKAGES_CLOUD_STORAGE",
		15: "USAGE_COST_TYPE_BINARY_DATA_UPLOAD",
		16: "USAGE_COST_TYPE_TABULAR_DATA_UPLOAD",
		17: "USAGE_COST_TYPE_LOGS_UPLOAD",
		18: "USAGE_COST_TYPE_BINARY_DATA_EGRESS",
		19: "USAGE_COST_TYPE_TABULAR_DATA_EGRESS",
		20: "USAGE_COST_TYPE_LOGS_EGRESS",
		21: "USAGE_COST_TYPE_TRAINING_LOGS_EGRESS",
		22: "USAGE_COST_TYPE_TABULAR_DATA_DATABASE_CLOUD_STORAGE",
		23: "USAGE_COST_TYPE_TABULAR_DATA_DATABASE_COMPUTE",
	}
	UsageCostType_value = map[string]int32{
		"USAGE_COST_TYPE_UNSPECIFIED":                         0,
		"USAGE_COST_TYPE_DATA_UPLOAD":                         1,
		"USAGE_COST_TYPE_DATA_EGRESS":                         2,
		"USAGE_COST_TYPE_REMOTE_CONTROL":                      3,
		"USAGE_COST_TYPE_STANDARD_COMPUTE":                    4,
		"USAGE_COST_TYPE_CLOUD_STORAGE":                       5,
		"USAGE_COST_TYPE_BINARY_DATA_CLOUD_STORAGE":           6,
		"USAGE_COST_TYPE_OTHER_CLOUD_STORAGE":                 7,
		"USAGE_COST_TYPE_PER_MACHINE":                         8,
		"USAGE_COST_TYPE_TRIGGER_NOTIFICATION":                9,
		"USAGE_COST_TYPE_TABULAR_DATA_CLOUD_STORAGE":          10,
		"USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_STORAGE":        11,
		"USAGE_COST_TYPE_LOGS_CLOUD_STORAGE":                  12,
		"USAGE_COST_TYPE_TRAINING_LOGS_CLOUD_STORAGE":         13,
		"USAGE_COST_TYPE_PACKAGES_CLOUD_STORAGE":              14,
		"USAGE_COST_TYPE_BINARY_DATA_UPLOAD":                  15,
		"USAGE_COST_TYPE_TABULAR_DATA_UPLOAD":                 16,
		"USAGE_COST_TYPE_LOGS_UPLOAD":                         17,
		"USAGE_COST_TYPE_BINARY_DATA_EGRESS":                  18,
		"USAGE_COST_TYPE_TABULAR_DATA_EGRESS":                 19,
		"USAGE_COST_TYPE_LOGS_EGRESS":                         20,
		"USAGE_COST_TYPE_TRAINING_LOGS_EGRESS":                21,
		"USAGE_COST_TYPE_TABULAR_DATA_DATABASE_CLOUD_STORAGE": 22,
		"USAGE_COST_TYPE_TABULAR_DATA_DATABASE_COMPUTE":       23,
	}
)

func (x UsageCostType) Enum() *UsageCostType {
	p := new(UsageCostType)
	*p = x
	return p
}

func (x UsageCostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageCostType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_billing_proto_enumTypes[1].Descriptor()
}

func (UsageCostType) Type() protoreflect.EnumType {
	return &file_app_v1_billing_proto_enumTypes[1]
}

func (x UsageCostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageCostType.Descriptor instead.
func (UsageCostType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{1}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_ORG         SourceType = 1
	SourceType_SOURCE_TYPE_FRAGMENT    SourceType = 2
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_ORG",
		2: "SOURCE_TYPE_FRAGMENT",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_ORG":         1,
		"SOURCE_TYPE_FRAGMENT":    2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_billing_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_app_v1_billing_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{2}
}

type InvoiceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InvoiceDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=invoice_date,json=invoiceDate,proto3" json:"invoice_date,omitempty"`
	InvoiceAmount float64                `protobuf:"fixed64,3,opt,name=invoice_amount,json=invoiceAmount,proto3" json:"invoice_amount,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	PaidDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=paid_date,json=paidDate,proto3" json:"paid_date,omitempty"`
}

func (x *InvoiceSummary) Reset() {
	*x = InvoiceSummary{}
	mi := &file_app_v1_billing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceSummary) ProtoMessage() {}

func (x *InvoiceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceSummary.ProtoReflect.Descriptor instead.
func (*InvoiceSummary) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{0}
}

func (x *InvoiceSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvoiceSummary) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *InvoiceSummary) GetInvoiceAmount() float64 {
	if x != nil {
		return x.InvoiceAmount
	}
	return 0
}

func (x *InvoiceSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InvoiceSummary) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *InvoiceSummary) GetPaidDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidDate
	}
	return nil
}

type PaymentMethodCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brand          string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	LastFourDigits string `protobuf:"bytes,2,opt,name=last_four_digits,json=lastFourDigits,proto3" json:"last_four_digits,omitempty"`
}

func (x *PaymentMethodCard) Reset() {
	*x = PaymentMethodCard{}
	mi := &file_app_v1_billing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentMethodCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodCard) ProtoMessage() {}

func (x *PaymentMethodCard) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodCard.ProtoReflect.Descriptor instead.
func (*PaymentMethodCard) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{1}
}

func (x *PaymentMethodCard) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *PaymentMethodCard) GetLastFourDigits() string {
	if x != nil {
		return x.LastFourDigits
	}
	return ""
}

type GetCurrentMonthUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetCurrentMonthUsageRequest) Reset() {
	*x = GetCurrentMonthUsageRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentMonthUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentMonthUsageRequest) ProtoMessage() {}

func (x *GetCurrentMonthUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentMonthUsageRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentMonthUsageRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{2}
}

func (x *GetCurrentMonthUsageRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type UsageCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType UsageCostType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=viam.app.v1.UsageCostType" json:"resource_type,omitempty"`
	Cost         float64       `protobuf:"fixed64,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *UsageCost) Reset() {
	*x = UsageCost{}
	mi := &file_app_v1_billing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageCost) ProtoMessage() {}

func (x *UsageCost) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageCost.ProtoReflect.Descriptor instead.
func (*UsageCost) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{3}
}

func (x *UsageCost) GetResourceType() UsageCostType {
	if x != nil {
		return x.ResourceType
	}
	return UsageCostType_USAGE_COST_TYPE_UNSPECIFIED
}

func (x *UsageCost) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type ResourceUsageCostsBySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType         SourceType          `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=viam.app.v1.SourceType" json:"source_type,omitempty"`
	ResourceUsageCosts *ResourceUsageCosts `protobuf:"bytes,2,opt,name=resource_usage_costs,json=resourceUsageCosts,proto3" json:"resource_usage_costs,omitempty"`
	TierName           string              `protobuf:"bytes,3,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
}

func (x *ResourceUsageCostsBySource) Reset() {
	*x = ResourceUsageCostsBySource{}
	mi := &file_app_v1_billing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceUsageCostsBySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsageCostsBySource) ProtoMessage() {}

func (x *ResourceUsageCostsBySource) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsageCostsBySource.ProtoReflect.Descriptor instead.
func (*ResourceUsageCostsBySource) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceUsageCostsBySource) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *ResourceUsageCostsBySource) GetResourceUsageCosts() *ResourceUsageCosts {
	if x != nil {
		return x.ResourceUsageCosts
	}
	return nil
}

func (x *ResourceUsageCostsBySource) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

type ResourceUsageCosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsageCosts           []*UsageCost `protobuf:"bytes,1,rep,name=usage_costs,json=usageCosts,proto3" json:"usage_costs,omitempty"`
	Discount             float64      `protobuf:"fixed64,2,opt,name=discount,proto3" json:"discount,omitempty"`
	TotalWithDiscount    float64      `protobuf:"fixed64,3,opt,name=total_with_discount,json=totalWithDiscount,proto3" json:"total_with_discount,omitempty"`
	TotalWithoutDiscount float64      `protobuf:"fixed64,4,opt,name=total_without_discount,json=totalWithoutDiscount,proto3" json:"total_without_discount,omitempty"`
}

func (x *ResourceUsageCosts) Reset() {
	*x = ResourceUsageCosts{}
	mi := &file_app_v1_billing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceUsageCosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsageCosts) ProtoMessage() {}

func (x *ResourceUsageCosts) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsageCosts.ProtoReflect.Descriptor instead.
func (*ResourceUsageCosts) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceUsageCosts) GetUsageCosts() []*UsageCost {
	if x != nil {
		return x.UsageCosts
	}
	return nil
}

func (x *ResourceUsageCosts) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ResourceUsageCosts) GetTotalWithDiscount() float64 {
	if x != nil {
		return x.TotalWithDiscount
	}
	return 0
}

func (x *ResourceUsageCosts) GetTotalWithoutDiscount() float64 {
	if x != nil {
		return x.TotalWithoutDiscount
	}
	return 0
}

type GetCurrentMonthUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate                  *timestamppb.Timestamp        `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                    *timestamppb.Timestamp        `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ResourceUsageCostsBySource []*ResourceUsageCostsBySource `protobuf:"bytes,14,rep,name=resource_usage_costs_by_source,json=resourceUsageCostsBySource,proto3" json:"resource_usage_costs_by_source,omitempty"`
	Subtotal                   float64                       `protobuf:"fixed64,15,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	// all fields below are deprecated
	//
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	CloudStorageUsageCost float64 `protobuf:"fixed64,3,opt,name=cloud_storage_usage_cost,json=cloudStorageUsageCost,proto3" json:"cloud_storage_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	DataUploadUsageCost float64 `protobuf:"fixed64,4,opt,name=data_upload_usage_cost,json=dataUploadUsageCost,proto3" json:"data_upload_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	DataEgresUsageCost float64 `protobuf:"fixed64,5,opt,name=data_egres_usage_cost,json=dataEgresUsageCost,proto3" json:"data_egres_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	RemoteControlUsageCost float64 `protobuf:"fixed64,6,opt,name=remote_control_usage_cost,json=remoteControlUsageCost,proto3" json:"remote_control_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	StandardComputeUsageCost float64 `protobuf:"fixed64,7,opt,name=standard_compute_usage_cost,json=standardComputeUsageCost,proto3" json:"standard_compute_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	DiscountAmount float64 `protobuf:"fixed64,8,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	TotalUsageWithDiscount float64 `protobuf:"fixed64,9,opt,name=total_usage_with_discount,json=totalUsageWithDiscount,proto3" json:"total_usage_with_discount,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	TotalUsageWithoutDiscount float64 `protobuf:"fixed64,10,opt,name=total_usage_without_discount,json=totalUsageWithoutDiscount,proto3" json:"total_usage_without_discount,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	PerMachineUsageCost float64 `protobuf:"fixed64,11,opt,name=per_machine_usage_cost,json=perMachineUsageCost,proto3" json:"per_machine_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	BinaryDataCloudStorageUsageCost float64 `protobuf:"fixed64,12,opt,name=binary_data_cloud_storage_usage_cost,json=binaryDataCloudStorageUsageCost,proto3" json:"binary_data_cloud_storage_usage_cost,omitempty"`
	// Deprecated: Marked as deprecated in app/v1/billing.proto.
	OtherCloudStorageUsageCost float64 `protobuf:"fixed64,13,opt,name=other_cloud_storage_usage_cost,json=otherCloudStorageUsageCost,proto3" json:"other_cloud_storage_usage_cost,omitempty"`
}

func (x *GetCurrentMonthUsageResponse) Reset() {
	*x = GetCurrentMonthUsageResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentMonthUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentMonthUsageResponse) ProtoMessage() {}

func (x *GetCurrentMonthUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentMonthUsageResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentMonthUsageResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{6}
}

func (x *GetCurrentMonthUsageResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetCurrentMonthUsageResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetCurrentMonthUsageResponse) GetResourceUsageCostsBySource() []*ResourceUsageCostsBySource {
	if x != nil {
		return x.ResourceUsageCostsBySource
	}
	return nil
}

func (x *GetCurrentMonthUsageResponse) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetCloudStorageUsageCost() float64 {
	if x != nil {
		return x.CloudStorageUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetDataUploadUsageCost() float64 {
	if x != nil {
		return x.DataUploadUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetDataEgresUsageCost() float64 {
	if x != nil {
		return x.DataEgresUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetRemoteControlUsageCost() float64 {
	if x != nil {
		return x.RemoteControlUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetStandardComputeUsageCost() float64 {
	if x != nil {
		return x.StandardComputeUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetTotalUsageWithDiscount() float64 {
	if x != nil {
		return x.TotalUsageWithDiscount
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetTotalUsageWithoutDiscount() float64 {
	if x != nil {
		return x.TotalUsageWithoutDiscount
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetPerMachineUsageCost() float64 {
	if x != nil {
		return x.PerMachineUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetBinaryDataCloudStorageUsageCost() float64 {
	if x != nil {
		return x.BinaryDataCloudStorageUsageCost
	}
	return 0
}

// Deprecated: Marked as deprecated in app/v1/billing.proto.
func (x *GetCurrentMonthUsageResponse) GetOtherCloudStorageUsageCost() float64 {
	if x != nil {
		return x.OtherCloudStorageUsageCost
	}
	return 0
}

type GetOrgBillingInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetOrgBillingInformationRequest) Reset() {
	*x = GetOrgBillingInformationRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgBillingInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgBillingInformationRequest) ProtoMessage() {}

func (x *GetOrgBillingInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgBillingInformationRequest.ProtoReflect.Descriptor instead.
func (*GetOrgBillingInformationRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrgBillingInformationRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetOrgBillingInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         PaymentMethodType `protobuf:"varint,1,opt,name=type,proto3,enum=viam.app.v1.PaymentMethodType" json:"type,omitempty"`
	BillingEmail string            `protobuf:"bytes,2,opt,name=billing_email,json=billingEmail,proto3" json:"billing_email,omitempty"`
	// defined if type is PAYMENT_METHOD_TYPE_CARD
	Method *PaymentMethodCard `protobuf:"bytes,3,opt,name=method,proto3,oneof" json:"method,omitempty"`
	// Only return billing_tier for billing dashboard admin users
	BillingTier *string `protobuf:"bytes,4,opt,name=billing_tier,json=billingTier,proto3,oneof" json:"billing_tier,omitempty"`
}

func (x *GetOrgBillingInformationResponse) Reset() {
	*x = GetOrgBillingInformationResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgBillingInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgBillingInformationResponse) ProtoMessage() {}

func (x *GetOrgBillingInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgBillingInformationResponse.ProtoReflect.Descriptor instead.
func (*GetOrgBillingInformationResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrgBillingInformationResponse) GetType() PaymentMethodType {
	if x != nil {
		return x.Type
	}
	return PaymentMethodType_PAYMENT_METHOD_TYPE_UNSPECIFIED
}

func (x *GetOrgBillingInformationResponse) GetBillingEmail() string {
	if x != nil {
		return x.BillingEmail
	}
	return ""
}

func (x *GetOrgBillingInformationResponse) GetMethod() *PaymentMethodCard {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *GetOrgBillingInformationResponse) GetBillingTier() string {
	if x != nil && x.BillingTier != nil {
		return *x.BillingTier
	}
	return ""
}

type GetInvoicesSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetInvoicesSummaryRequest) Reset() {
	*x = GetInvoicesSummaryRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesSummaryRequest) ProtoMessage() {}

func (x *GetInvoicesSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetInvoicesSummaryRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{9}
}

func (x *GetInvoicesSummaryRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetInvoicesSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all unpaid balances at the end of the last billing cycle
	OutstandingBalance float64 `protobuf:"fixed64,1,opt,name=outstanding_balance,json=outstandingBalance,proto3" json:"outstanding_balance,omitempty"`
	// all previous invoices
	Invoices []*InvoiceSummary `protobuf:"bytes,2,rep,name=invoices,proto3" json:"invoices,omitempty"`
}

func (x *GetInvoicesSummaryResponse) Reset() {
	*x = GetInvoicesSummaryResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicesSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicesSummaryResponse) ProtoMessage() {}

func (x *GetInvoicesSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicesSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetInvoicesSummaryResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{10}
}

func (x *GetInvoicesSummaryResponse) GetOutstandingBalance() float64 {
	if x != nil {
		return x.OutstandingBalance
	}
	return 0
}

func (x *GetInvoicesSummaryResponse) GetInvoices() []*InvoiceSummary {
	if x != nil {
		return x.Invoices
	}
	return nil
}

type GetInvoicePdfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetInvoicePdfRequest) Reset() {
	*x = GetInvoicePdfRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicePdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicePdfRequest) ProtoMessage() {}

func (x *GetInvoicePdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicePdfRequest.ProtoReflect.Descriptor instead.
func (*GetInvoicePdfRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{11}
}

func (x *GetInvoicePdfRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetInvoicePdfRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetInvoicePdfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetInvoicePdfResponse) Reset() {
	*x = GetInvoicePdfResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvoicePdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoicePdfResponse) ProtoMessage() {}

func (x *GetInvoicePdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoicePdfResponse.ProtoReflect.Descriptor instead.
func (*GetInvoicePdfResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{12}
}

func (x *GetInvoicePdfResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type SendPaymentRequiredEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerOrgId     string `protobuf:"bytes,1,opt,name=customer_org_id,json=customerOrgId,proto3" json:"customer_org_id,omitempty"`
	BillingOwnerOrgId string `protobuf:"bytes,2,opt,name=billing_owner_org_id,json=billingOwnerOrgId,proto3" json:"billing_owner_org_id,omitempty"`
}

func (x *SendPaymentRequiredEmailRequest) Reset() {
	*x = SendPaymentRequiredEmailRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPaymentRequiredEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentRequiredEmailRequest) ProtoMessage() {}

func (x *SendPaymentRequiredEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentRequiredEmailRequest.ProtoReflect.Descriptor instead.
func (*SendPaymentRequiredEmailRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{13}
}

func (x *SendPaymentRequiredEmailRequest) GetCustomerOrgId() string {
	if x != nil {
		return x.CustomerOrgId
	}
	return ""
}

func (x *SendPaymentRequiredEmailRequest) GetBillingOwnerOrgId() string {
	if x != nil {
		return x.BillingOwnerOrgId
	}
	return ""
}

type SendPaymentRequiredEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendPaymentRequiredEmailResponse) Reset() {
	*x = SendPaymentRequiredEmailResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPaymentRequiredEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentRequiredEmailResponse) ProtoMessage() {}

func (x *SendPaymentRequiredEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentRequiredEmailResponse.ProtoReflect.Descriptor instead.
func (*SendPaymentRequiredEmailResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{14}
}

type GetAvailableBillingTiersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAvailableBillingTiersRequest) Reset() {
	*x = GetAvailableBillingTiersRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableBillingTiersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableBillingTiersRequest) ProtoMessage() {}

func (x *GetAvailableBillingTiersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableBillingTiersRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableBillingTiersRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{15}
}

type GetAvailableBillingTiersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tiers []string `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (x *GetAvailableBillingTiersResponse) Reset() {
	*x = GetAvailableBillingTiersResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableBillingTiersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableBillingTiersResponse) ProtoMessage() {}

func (x *GetAvailableBillingTiersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableBillingTiersResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableBillingTiersResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{16}
}

func (x *GetAvailableBillingTiersResponse) GetTiers() []string {
	if x != nil {
		return x.Tiers
	}
	return nil
}

type UpdateOrganizationBillingTierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	BillingTier    string `protobuf:"bytes,2,opt,name=billing_tier,json=billingTier,proto3" json:"billing_tier,omitempty"`
}

func (x *UpdateOrganizationBillingTierRequest) Reset() {
	*x = UpdateOrganizationBillingTierRequest{}
	mi := &file_app_v1_billing_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationBillingTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationBillingTierRequest) ProtoMessage() {}

func (x *UpdateOrganizationBillingTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationBillingTierRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationBillingTierRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOrganizationBillingTierRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *UpdateOrganizationBillingTierRequest) GetBillingTier() string {
	if x != nil {
		return x.BillingTier
	}
	return ""
}

type UpdateOrganizationBillingTierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrganizationBillingTierResponse) Reset() {
	*x = UpdateOrganizationBillingTierResponse{}
	mi := &file_app_v1_billing_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationBillingTierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationBillingTierResponse) ProtoMessage() {}

func (x *UpdateOrganizationBillingTierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_billing_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationBillingTierResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationBillingTierResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_billing_proto_rawDescGZIP(), []int{18}
}

var File_app_v1_billing_proto protoreflect.FileDescriptor

var file_app_v1_billing_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x61, 0x69,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x6f, 0x75, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x07,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x6b, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x18, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x45, 0x67, 0x72, 0x65, 0x73, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x24, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x1f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x38, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x75, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x50, 0x64, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x22, 0x7a, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x22, 0x0a,
	0x20, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x22, 0x72,
	0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x65, 0x72, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x56, 0x0a, 0x11, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x2a, 0xf3, 0x07, 0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x05, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x2b, 0x0a, 0x23, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x28,
	0x0a, 0x24, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x4f, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x0d, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12,
	0x26, 0x0a, 0x22, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x55, 0x4c,
	0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x10,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x11, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x15, 0x12, 0x37, 0x0a,
	0x33, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x16, 0x12, 0x31, 0x0a, 0x2d, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x17, 0x2a, 0x58, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x32, 0xb2, 0x06, 0x0a, 0x0e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x50, 0x64, 0x66, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x64, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a,
	0x18, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x6f, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_v1_billing_proto_rawDescOnce sync.Once
	file_app_v1_billing_proto_rawDescData = file_app_v1_billing_proto_rawDesc
)

func file_app_v1_billing_proto_rawDescGZIP() []byte {
	file_app_v1_billing_proto_rawDescOnce.Do(func() {
		file_app_v1_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_v1_billing_proto_rawDescData)
	})
	return file_app_v1_billing_proto_rawDescData
}

var file_app_v1_billing_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_app_v1_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_app_v1_billing_proto_goTypes = []any{
	(PaymentMethodType)(0),                        // 0: viam.app.v1.PaymentMethodType
	(UsageCostType)(0),                            // 1: viam.app.v1.UsageCostType
	(SourceType)(0),                               // 2: viam.app.v1.SourceType
	(*InvoiceSummary)(nil),                        // 3: viam.app.v1.InvoiceSummary
	(*PaymentMethodCard)(nil),                     // 4: viam.app.v1.PaymentMethodCard
	(*GetCurrentMonthUsageRequest)(nil),           // 5: viam.app.v1.GetCurrentMonthUsageRequest
	(*UsageCost)(nil),                             // 6: viam.app.v1.UsageCost
	(*ResourceUsageCostsBySource)(nil),            // 7: viam.app.v1.ResourceUsageCostsBySource
	(*ResourceUsageCosts)(nil),                    // 8: viam.app.v1.ResourceUsageCosts
	(*GetCurrentMonthUsageResponse)(nil),          // 9: viam.app.v1.GetCurrentMonthUsageResponse
	(*GetOrgBillingInformationRequest)(nil),       // 10: viam.app.v1.GetOrgBillingInformationRequest
	(*GetOrgBillingInformationResponse)(nil),      // 11: viam.app.v1.GetOrgBillingInformationResponse
	(*GetInvoicesSummaryRequest)(nil),             // 12: viam.app.v1.GetInvoicesSummaryRequest
	(*GetInvoicesSummaryResponse)(nil),            // 13: viam.app.v1.GetInvoicesSummaryResponse
	(*GetInvoicePdfRequest)(nil),                  // 14: viam.app.v1.GetInvoicePdfRequest
	(*GetInvoicePdfResponse)(nil),                 // 15: viam.app.v1.GetInvoicePdfResponse
	(*SendPaymentRequiredEmailRequest)(nil),       // 16: viam.app.v1.SendPaymentRequiredEmailRequest
	(*SendPaymentRequiredEmailResponse)(nil),      // 17: viam.app.v1.SendPaymentRequiredEmailResponse
	(*GetAvailableBillingTiersRequest)(nil),       // 18: viam.app.v1.GetAvailableBillingTiersRequest
	(*GetAvailableBillingTiersResponse)(nil),      // 19: viam.app.v1.GetAvailableBillingTiersResponse
	(*UpdateOrganizationBillingTierRequest)(nil),  // 20: viam.app.v1.UpdateOrganizationBillingTierRequest
	(*UpdateOrganizationBillingTierResponse)(nil), // 21: viam.app.v1.UpdateOrganizationBillingTierResponse
	(*timestamppb.Timestamp)(nil),                 // 22: google.protobuf.Timestamp
}
var file_app_v1_billing_proto_depIdxs = []int32{
	22, // 0: viam.app.v1.InvoiceSummary.invoice_date:type_name -> google.protobuf.Timestamp
	22, // 1: viam.app.v1.InvoiceSummary.due_date:type_name -> google.protobuf.Timestamp
	22, // 2: viam.app.v1.InvoiceSummary.paid_date:type_name -> google.protobuf.Timestamp
	1,  // 3: viam.app.v1.UsageCost.resource_type:type_name -> viam.app.v1.UsageCostType
	2,  // 4: viam.app.v1.ResourceUsageCostsBySource.source_type:type_name -> viam.app.v1.SourceType
	8,  // 5: viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs:type_name -> viam.app.v1.ResourceUsageCosts
	6,  // 6: viam.app.v1.ResourceUsageCosts.usage_costs:type_name -> viam.app.v1.UsageCost
	22, // 7: viam.app.v1.GetCurrentMonthUsageResponse.start_date:type_name -> google.protobuf.Timestamp
	22, // 8: viam.app.v1.GetCurrentMonthUsageResponse.end_date:type_name -> google.protobuf.Timestamp
	7,  // 9: viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source:type_name -> viam.app.v1.ResourceUsageCostsBySource
	0,  // 10: viam.app.v1.GetOrgBillingInformationResponse.type:type_name -> viam.app.v1.PaymentMethodType
	4,  // 11: viam.app.v1.GetOrgBillingInformationResponse.method:type_name -> viam.app.v1.PaymentMethodCard
	3,  // 12: viam.app.v1.GetInvoicesSummaryResponse.invoices:type_name -> viam.app.v1.InvoiceSummary
	5,  // 13: viam.app.v1.BillingService.GetCurrentMonthUsage:input_type -> viam.app.v1.GetCurrentMonthUsageRequest
	10, // 14: viam.app.v1.BillingService.GetOrgBillingInformation:input_type -> viam.app.v1.GetOrgBillingInformationRequest
	12, // 15: viam.app.v1.BillingService.GetInvoicesSummary:input_type -> viam.app.v1.GetInvoicesSummaryRequest
	14, // 16: viam.app.v1.BillingService.GetInvoicePdf:input_type -> viam.app.v1.GetInvoicePdfRequest
	16, // 17: viam.app.v1.BillingService.SendPaymentRequiredEmail:input_type -> viam.app.v1.SendPaymentRequiredEmailRequest
	18, // 18: viam.app.v1.BillingService.GetAvailableBillingTiers:input_type -> viam.app.v1.GetAvailableBillingTiersRequest
	20, // 19: viam.app.v1.BillingService.UpdateOrganizationBillingTier:input_type -> viam.app.v1.UpdateOrganizationBillingTierRequest
	9,  // 20: viam.app.v1.BillingService.GetCurrentMonthUsage:output_type -> viam.app.v1.GetCurrentMonthUsageResponse
	11, // 21: viam.app.v1.BillingService.GetOrgBillingInformation:output_type -> viam.app.v1.GetOrgBillingInformationResponse
	13, // 22: viam.app.v1.BillingService.GetInvoicesSummary:output_type -> viam.app.v1.GetInvoicesSummaryResponse
	15, // 23: viam.app.v1.BillingService.GetInvoicePdf:output_type -> viam.app.v1.GetInvoicePdfResponse
	17, // 24: viam.app.v1.BillingService.SendPaymentRequiredEmail:output_type -> viam.app.v1.SendPaymentRequiredEmailResponse
	19, // 25: viam.app.v1.BillingService.GetAvailableBillingTiers:output_type -> viam.app.v1.GetAvailableBillingTiersResponse
	21, // 26: viam.app.v1.BillingService.UpdateOrganizationBillingTier:output_type -> viam.app.v1.UpdateOrganizationBillingTierResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_app_v1_billing_proto_init() }
func file_app_v1_billing_proto_init() {
	if File_app_v1_billing_proto != nil {
		return
	}
	file_app_v1_billing_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_v1_billing_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_v1_billing_proto_goTypes,
		DependencyIndexes: file_app_v1_billing_proto_depIdxs,
		EnumInfos:         file_app_v1_billing_proto_enumTypes,
		MessageInfos:      file_app_v1_billing_proto_msgTypes,
	}.Build()
	File_app_v1_billing_proto = out.File
	file_app_v1_billing_proto_rawDesc = nil
	file_app_v1_billing_proto_goTypes = nil
	file_app_v1_billing_proto_depIdxs = nil
}
