// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/v1/billing.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (BillingService_GetInvoicePdfClient, error)
	// Send an email with a prompt to the user's org's billing page.
	SendPaymentRequiredEmail(ctx context.Context, in *SendPaymentRequiredEmailRequest, opts ...grpc.CallOption) (*SendPaymentRequiredEmailResponse, error)
	// Get available billing tiers that can be assigned to organizations
	GetAvailableBillingTiers(ctx context.Context, in *GetAvailableBillingTiersRequest, opts ...grpc.CallOption) (*GetAvailableBillingTiersResponse, error)
	// Update an organization's billing tier
	UpdateOrganizationBillingTier(ctx context.Context, in *UpdateOrganizationBillingTierRequest, opts ...grpc.CallOption) (*UpdateOrganizationBillingTierResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetCurrentMonthUsage(ctx context.Context, in *GetCurrentMonthUsageRequest, opts ...grpc.CallOption) (*GetCurrentMonthUsageResponse, error) {
	out := new(GetCurrentMonthUsageResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetCurrentMonthUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrgBillingInformation(ctx context.Context, in *GetOrgBillingInformationRequest, opts ...grpc.CallOption) (*GetOrgBillingInformationResponse, error) {
	out := new(GetOrgBillingInformationResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetOrgBillingInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicesSummary(ctx context.Context, in *GetInvoicesSummaryRequest, opts ...grpc.CallOption) (*GetInvoicesSummaryResponse, error) {
	out := new(GetInvoicesSummaryResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetInvoicesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicePdf(ctx context.Context, in *GetInvoicePdfRequest, opts ...grpc.CallOption) (BillingService_GetInvoicePdfClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingService_ServiceDesc.Streams[0], "/viam.app.v1.BillingService/GetInvoicePdf", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingServiceGetInvoicePdfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingService_GetInvoicePdfClient interface {
	Recv() (*GetInvoicePdfResponse, error)
	grpc.ClientStream
}

type billingServiceGetInvoicePdfClient struct {
	grpc.ClientStream
}

func (x *billingServiceGetInvoicePdfClient) Recv() (*GetInvoicePdfResponse, error) {
	m := new(GetInvoicePdfResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingServiceClient) SendPaymentRequiredEmail(ctx context.Context, in *SendPaymentRequiredEmailRequest, opts ...grpc.CallOption) (*SendPaymentRequiredEmailResponse, error) {
	out := new(SendPaymentRequiredEmailResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/SendPaymentRequiredEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetAvailableBillingTiers(ctx context.Context, in *GetAvailableBillingTiersRequest, opts ...grpc.CallOption) (*GetAvailableBillingTiersResponse, error) {
	out := new(GetAvailableBillingTiersResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/GetAvailableBillingTiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateOrganizationBillingTier(ctx context.Context, in *UpdateOrganizationBillingTierRequest, opts ...grpc.CallOption) (*UpdateOrganizationBillingTierResponse, error) {
	out := new(UpdateOrganizationBillingTierResponse)
	err := c.cc.Invoke(ctx, "/viam.app.v1.BillingService/UpdateOrganizationBillingTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	// Detailed breakdown of current month's costs
	GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error)
	// Org-level information (like billing email and payment details)
	GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error)
	// Total outstanding balance and previous invoices
	GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error)
	// Download a PDF invoice
	GetInvoicePdf(*GetInvoicePdfRequest, BillingService_GetInvoicePdfServer) error
	// Send an email with a prompt to the user's org's billing page.
	SendPaymentRequiredEmail(context.Context, *SendPaymentRequiredEmailRequest) (*SendPaymentRequiredEmailResponse, error)
	// Get available billing tiers that can be assigned to organizations
	GetAvailableBillingTiers(context.Context, *GetAvailableBillingTiersRequest) (*GetAvailableBillingTiersResponse, error)
	// Update an organization's billing tier
	UpdateOrganizationBillingTier(context.Context, *UpdateOrganizationBillingTierRequest) (*UpdateOrganizationBillingTierResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) GetCurrentMonthUsage(context.Context, *GetCurrentMonthUsageRequest) (*GetCurrentMonthUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMonthUsage not implemented")
}
func (UnimplementedBillingServiceServer) GetOrgBillingInformation(context.Context, *GetOrgBillingInformationRequest) (*GetOrgBillingInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgBillingInformation not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicesSummary(context.Context, *GetInvoicesSummaryRequest) (*GetInvoicesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicesSummary not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicePdf(*GetInvoicePdfRequest, BillingService_GetInvoicePdfServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInvoicePdf not implemented")
}
func (UnimplementedBillingServiceServer) SendPaymentRequiredEmail(context.Context, *SendPaymentRequiredEmailRequest) (*SendPaymentRequiredEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPaymentRequiredEmail not implemented")
}
func (UnimplementedBillingServiceServer) GetAvailableBillingTiers(context.Context, *GetAvailableBillingTiersRequest) (*GetAvailableBillingTiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBillingTiers not implemented")
}
func (UnimplementedBillingServiceServer) UpdateOrganizationBillingTier(context.Context, *UpdateOrganizationBillingTierRequest) (*UpdateOrganizationBillingTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationBillingTier not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetCurrentMonthUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentMonthUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetCurrentMonthUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCurrentMonthUsage(ctx, req.(*GetCurrentMonthUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrgBillingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgBillingInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetOrgBillingInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrgBillingInformation(ctx, req.(*GetOrgBillingInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetInvoicesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicesSummary(ctx, req.(*GetInvoicesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicePdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInvoicePdfRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServiceServer).GetInvoicePdf(m, &billingServiceGetInvoicePdfServer{stream})
}

type BillingService_GetInvoicePdfServer interface {
	Send(*GetInvoicePdfResponse) error
	grpc.ServerStream
}

type billingServiceGetInvoicePdfServer struct {
	grpc.ServerStream
}

func (x *billingServiceGetInvoicePdfServer) Send(m *GetInvoicePdfResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingService_SendPaymentRequiredEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequiredEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SendPaymentRequiredEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/SendPaymentRequiredEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SendPaymentRequiredEmail(ctx, req.(*SendPaymentRequiredEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetAvailableBillingTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableBillingTiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAvailableBillingTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/GetAvailableBillingTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAvailableBillingTiers(ctx, req.(*GetAvailableBillingTiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateOrganizationBillingTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationBillingTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateOrganizationBillingTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.app.v1.BillingService/UpdateOrganizationBillingTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateOrganizationBillingTier(ctx, req.(*UpdateOrganizationBillingTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.app.v1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentMonthUsage",
			Handler:    _BillingService_GetCurrentMonthUsage_Handler,
		},
		{
			MethodName: "GetOrgBillingInformation",
			Handler:    _BillingService_GetOrgBillingInformation_Handler,
		},
		{
			MethodName: "GetInvoicesSummary",
			Handler:    _BillingService_GetInvoicesSummary_Handler,
		},
		{
			MethodName: "SendPaymentRequiredEmail",
			Handler:    _BillingService_SendPaymentRequiredEmail_Handler,
		},
		{
			MethodName: "GetAvailableBillingTiers",
			Handler:    _BillingService_GetAvailableBillingTiers_Handler,
		},
		{
			MethodName: "UpdateOrganizationBillingTier",
			Handler:    _BillingService_UpdateOrganizationBillingTier_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInvoicePdf",
			Handler:       _BillingService_GetInvoicePdf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/v1/billing.proto",
}
