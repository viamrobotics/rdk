// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: app/v1/robot.proto

package v1

import (
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	v1 "go.viam.com/api/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialsType int32

const (
	CredentialsType_CREDENTIALS_TYPE_UNSPECIFIED           CredentialsType = 0
	CredentialsType_CREDENTIALS_TYPE_INTERNAL              CredentialsType = 1
	CredentialsType_CREDENTIALS_TYPE_API_KEY               CredentialsType = 2
	CredentialsType_CREDENTIALS_TYPE_ROBOT_SECRET          CredentialsType = 3
	CredentialsType_CREDENTIALS_TYPE_ROBOT_LOCATION_SECRET CredentialsType = 4
)

// Enum value maps for CredentialsType.
var (
	CredentialsType_name = map[int32]string{
		0: "CREDENTIALS_TYPE_UNSPECIFIED",
		1: "CREDENTIALS_TYPE_INTERNAL",
		2: "CREDENTIALS_TYPE_API_KEY",
		3: "CREDENTIALS_TYPE_ROBOT_SECRET",
		4: "CREDENTIALS_TYPE_ROBOT_LOCATION_SECRET",
	}
	CredentialsType_value = map[string]int32{
		"CREDENTIALS_TYPE_UNSPECIFIED":           0,
		"CREDENTIALS_TYPE_INTERNAL":              1,
		"CREDENTIALS_TYPE_API_KEY":               2,
		"CREDENTIALS_TYPE_ROBOT_SECRET":          3,
		"CREDENTIALS_TYPE_ROBOT_LOCATION_SECRET": 4,
	}
)

func (x CredentialsType) Enum() *CredentialsType {
	p := new(CredentialsType)
	*p = x
	return p
}

func (x CredentialsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialsType) Descriptor() protoreflect.EnumDescriptor {
	return file_app_v1_robot_proto_enumTypes[0].Descriptor()
}

func (CredentialsType) Type() protoreflect.EnumType {
	return &file_app_v1_robot_proto_enumTypes[0]
}

func (x CredentialsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialsType.Descriptor instead.
func (CredentialsType) EnumDescriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{0}
}

type RobotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cloud      *CloudConfig       `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Remotes    []*RemoteConfig    `protobuf:"bytes,2,rep,name=remotes,proto3" json:"remotes,omitempty"`
	Components []*ComponentConfig `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	Processes  []*ProcessConfig   `protobuf:"bytes,4,rep,name=processes,proto3" json:"processes,omitempty"`
	Services   []*ServiceConfig   `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty"`
	Network    *NetworkConfig     `protobuf:"bytes,6,opt,name=network,proto3,oneof" json:"network,omitempty"`
	Auth       *AuthConfig        `protobuf:"bytes,7,opt,name=auth,proto3,oneof" json:"auth,omitempty"`
	// Turns on debug mode for robot, adding an echo server and more logging and tracing. Only works after restart
	Debug                   *bool                  `protobuf:"varint,8,opt,name=debug,proto3,oneof" json:"debug,omitempty"`
	Modules                 []*ModuleConfig        `protobuf:"bytes,9,rep,name=modules,proto3" json:"modules,omitempty"`
	DisablePartialStart     *bool                  `protobuf:"varint,10,opt,name=disable_partial_start,json=disablePartialStart,proto3,oneof" json:"disable_partial_start,omitempty"`
	Packages                []*PackageConfig       `protobuf:"bytes,11,rep,name=packages,proto3" json:"packages,omitempty"`
	OverwriteFragmentStatus []*AppValidationStatus `protobuf:"bytes,12,rep,name=overwrite_fragment_status,json=overwriteFragmentStatus,proto3" json:"overwrite_fragment_status,omitempty"`
	// Turns on pprof http server on localhost. By default false.
	EnableWebProfile bool                `protobuf:"varint,13,opt,name=enable_web_profile,json=enableWebProfile,proto3" json:"enable_web_profile,omitempty"`
	Log              []*LogPatternConfig `protobuf:"bytes,14,rep,name=log,proto3" json:"log,omitempty"`
	// Attributes a particular revision to the config.
	Revision    string             `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	Maintenance *MaintenanceConfig `protobuf:"bytes,16,opt,name=maintenance,proto3,oneof" json:"maintenance,omitempty"`
	// Disables the robot's log deduplication (identical, noisy logs will still
	// be output individually instead of aggregated.)
	DisableLogDeduplication bool `protobuf:"varint,17,opt,name=disable_log_deduplication,json=disableLogDeduplication,proto3" json:"disable_log_deduplication,omitempty"`
}

func (x *RobotConfig) Reset() {
	*x = RobotConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RobotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotConfig) ProtoMessage() {}

func (x *RobotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotConfig.ProtoReflect.Descriptor instead.
func (*RobotConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{0}
}

func (x *RobotConfig) GetCloud() *CloudConfig {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RobotConfig) GetRemotes() []*RemoteConfig {
	if x != nil {
		return x.Remotes
	}
	return nil
}

func (x *RobotConfig) GetComponents() []*ComponentConfig {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *RobotConfig) GetProcesses() []*ProcessConfig {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *RobotConfig) GetServices() []*ServiceConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *RobotConfig) GetNetwork() *NetworkConfig {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *RobotConfig) GetAuth() *AuthConfig {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RobotConfig) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *RobotConfig) GetModules() []*ModuleConfig {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *RobotConfig) GetDisablePartialStart() bool {
	if x != nil && x.DisablePartialStart != nil {
		return *x.DisablePartialStart
	}
	return false
}

func (x *RobotConfig) GetPackages() []*PackageConfig {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *RobotConfig) GetOverwriteFragmentStatus() []*AppValidationStatus {
	if x != nil {
		return x.OverwriteFragmentStatus
	}
	return nil
}

func (x *RobotConfig) GetEnableWebProfile() bool {
	if x != nil {
		return x.EnableWebProfile
	}
	return false
}

func (x *RobotConfig) GetLog() []*LogPatternConfig {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *RobotConfig) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *RobotConfig) GetMaintenance() *MaintenanceConfig {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

func (x *RobotConfig) GetDisableLogDeduplication() bool {
	if x != nil {
		return x.DisableLogDeduplication
	}
	return false
}

// LogPatternConfig allows you to specify a 2-tuple consisting
// of a logger name and its corresponding log level.
type LogPatternConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Level   string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *LogPatternConfig) Reset() {
	*x = LogPatternConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogPatternConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPatternConfig) ProtoMessage() {}

func (x *LogPatternConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPatternConfig.ProtoReflect.Descriptor instead.
func (*LogPatternConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{1}
}

func (x *LogPatternConfig) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *LogPatternConfig) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

// Valid location secret that can be used for authentication to the robot.
type LocationSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// secret payload
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *LocationSecret) Reset() {
	*x = LocationSecret{}
	mi := &file_app_v1_robot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationSecret) ProtoMessage() {}

func (x *LocationSecret) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationSecret.ProtoReflect.Descriptor instead.
func (*LocationSecret) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{2}
}

func (x *LocationSecret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocationSecret) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type AppValidationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AppValidationStatus) Reset() {
	*x = AppValidationStatus{}
	mi := &file_app_v1_robot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppValidationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppValidationStatus) ProtoMessage() {}

func (x *AppValidationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppValidationStatus.ProtoReflect.Descriptor instead.
func (*AppValidationStatus) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{3}
}

func (x *AppValidationStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fqdn              string `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	LocalFqdn         string `protobuf:"bytes,3,opt,name=local_fqdn,json=localFqdn,proto3" json:"local_fqdn,omitempty"`
	ManagedBy         string `protobuf:"bytes,4,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	SignalingAddress  string `protobuf:"bytes,5,opt,name=signaling_address,json=signalingAddress,proto3" json:"signaling_address,omitempty"`
	SignalingInsecure bool   `protobuf:"varint,6,opt,name=signaling_insecure,json=signalingInsecure,proto3" json:"signaling_insecure,omitempty"`
	// Deprecated use location_secrets
	//
	// Deprecated: Marked as deprecated in app/v1/robot.proto.
	LocationSecret string `protobuf:"bytes,7,opt,name=location_secret,json=locationSecret,proto3" json:"location_secret,omitempty"`
	// Robot part secret
	Secret string `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// All valid location secrets.
	LocationSecrets []*LocationSecret `protobuf:"bytes,9,rep,name=location_secrets,json=locationSecrets,proto3" json:"location_secrets,omitempty"`
	PrimaryOrgId    string            `protobuf:"bytes,10,opt,name=primary_org_id,json=primaryOrgId,proto3" json:"primary_org_id,omitempty"`
	LocationId      string            `protobuf:"bytes,11,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	MachineId       string            `protobuf:"bytes,12,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (x *CloudConfig) Reset() {
	*x = CloudConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfig) ProtoMessage() {}

func (x *CloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfig.ProtoReflect.Descriptor instead.
func (*CloudConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{4}
}

func (x *CloudConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudConfig) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *CloudConfig) GetLocalFqdn() string {
	if x != nil {
		return x.LocalFqdn
	}
	return ""
}

func (x *CloudConfig) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *CloudConfig) GetSignalingAddress() string {
	if x != nil {
		return x.SignalingAddress
	}
	return ""
}

func (x *CloudConfig) GetSignalingInsecure() bool {
	if x != nil {
		return x.SignalingInsecure
	}
	return false
}

// Deprecated: Marked as deprecated in app/v1/robot.proto.
func (x *CloudConfig) GetLocationSecret() string {
	if x != nil {
		return x.LocationSecret
	}
	return ""
}

func (x *CloudConfig) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CloudConfig) GetLocationSecrets() []*LocationSecret {
	if x != nil {
		return x.LocationSecrets
	}
	return nil
}

func (x *CloudConfig) GetPrimaryOrgId() string {
	if x != nil {
		return x.PrimaryOrgId
	}
	return ""
}

func (x *CloudConfig) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *CloudConfig) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type ComponentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace        string                        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` // deprecated; use api
	Type             string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`           // deprecated; use api
	Model            string                        `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Frame            *Frame                        `protobuf:"bytes,5,opt,name=frame,proto3" json:"frame,omitempty"`
	DependsOn        []string                      `protobuf:"bytes,6,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	ServiceConfigs   []*ResourceLevelServiceConfig `protobuf:"bytes,7,rep,name=service_configs,json=serviceConfigs,proto3" json:"service_config"`
	Attributes       *structpb.Struct              `protobuf:"bytes,8,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Api              string                        `protobuf:"bytes,9,opt,name=api,proto3" json:"api,omitempty"`
	LogConfiguration *LogConfiguration             `protobuf:"bytes,10,opt,name=log_configuration,json=logConfiguration,proto3" json:"log_configuration,omitempty"`
}

func (x *ComponentConfig) Reset() {
	*x = ComponentConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentConfig) ProtoMessage() {}

func (x *ComponentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentConfig.ProtoReflect.Descriptor instead.
func (*ComponentConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{5}
}

func (x *ComponentConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComponentConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComponentConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ComponentConfig) GetFrame() *Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *ComponentConfig) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *ComponentConfig) GetServiceConfigs() []*ResourceLevelServiceConfig {
	if x != nil {
		return x.ServiceConfigs
	}
	return nil
}

func (x *ComponentConfig) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ComponentConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ComponentConfig) GetLogConfiguration() *LogConfiguration {
	if x != nil {
		return x.LogConfiguration
	}
	return nil
}

// A ResourceLevelServiceConfig describes component or remote configuration for a service.
type ResourceLevelServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// TODO(adam): Should this be move to a structured type as defined in the typescript frontend.
	Attributes *structpb.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ResourceLevelServiceConfig) Reset() {
	*x = ResourceLevelServiceConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLevelServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLevelServiceConfig) ProtoMessage() {}

func (x *ResourceLevelServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLevelServiceConfig.ProtoReflect.Descriptor instead.
func (*ResourceLevelServiceConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceLevelServiceConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceLevelServiceConfig) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// A ProcessConfig describes how to manage a system process.
type ProcessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Args        []string             `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Cwd         string               `protobuf:"bytes,4,opt,name=cwd,proto3" json:"cwd,omitempty"`
	OneShot     bool                 `protobuf:"varint,5,opt,name=one_shot,json=oneShot,proto3" json:"one_shot,omitempty"`
	Log         bool                 `protobuf:"varint,6,opt,name=log,proto3" json:"log,omitempty"`
	StopSignal  int32                `protobuf:"varint,7,opt,name=stop_signal,json=stopSignal,proto3" json:"stop_signal,omitempty"`
	StopTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=stop_timeout,json=stopTimeout,proto3" json:"stop_timeout,omitempty"`
	// additional environment variables passed to the process
	Env      map[string]string `protobuf:"bytes,9,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Username string            `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ProcessConfig) Reset() {
	*x = ProcessConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfig) ProtoMessage() {}

func (x *ProcessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfig.ProtoReflect.Descriptor instead.
func (*ProcessConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessConfig) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProcessConfig) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *ProcessConfig) GetOneShot() bool {
	if x != nil {
		return x.OneShot
	}
	return false
}

func (x *ProcessConfig) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *ProcessConfig) GetStopSignal() int32 {
	if x != nil {
		return x.StopSignal
	}
	return 0
}

func (x *ProcessConfig) GetStopTimeout() *durationpb.Duration {
	if x != nil {
		return x.StopTimeout
	}
	return nil
}

func (x *ProcessConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ProcessConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type ServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace        string                        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` // deprecated; use api
	Type             string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`           // deprecated; use api
	Attributes       *structpb.Struct              `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	DependsOn        []string                      `protobuf:"bytes,5,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	Model            string                        `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	Api              string                        `protobuf:"bytes,9,opt,name=api,proto3" json:"api,omitempty"`
	ServiceConfigs   []*ResourceLevelServiceConfig `protobuf:"bytes,10,rep,name=service_configs,json=serviceConfigs,proto3" json:"service_config"`
	LogConfiguration *LogConfiguration             `protobuf:"bytes,11,opt,name=log_configuration,json=logConfiguration,proto3" json:"log_configuration,omitempty"`
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceConfig) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ServiceConfig) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *ServiceConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ServiceConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ServiceConfig) GetServiceConfigs() []*ResourceLevelServiceConfig {
	if x != nil {
		return x.ServiceConfigs
	}
	return nil
}

func (x *ServiceConfig) GetLogConfiguration() *LogConfiguration {
	if x != nil {
		return x.LogConfiguration
	}
	return nil
}

type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn                   string                   `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	BindAddress            string                   `protobuf:"bytes,2,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	TlsCertFile            string                   `protobuf:"bytes,3,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty"`
	TlsKeyFile             string                   `protobuf:"bytes,4,opt,name=tls_key_file,json=tlsKeyFile,proto3" json:"tls_key_file,omitempty"`
	Sessions               *SessionsConfig          `protobuf:"bytes,5,opt,name=sessions,proto3" json:"sessions,omitempty"`
	TrafficTunnelEndpoints []*TrafficTunnelEndpoint `protobuf:"bytes,6,rep,name=traffic_tunnel_endpoints,json=trafficTunnelEndpoints,proto3" json:"traffic_tunnel_endpoints,omitempty"`
	NoTls                  bool                     `protobuf:"varint,7,opt,name=no_tls,json=noTls,proto3" json:"no_tls,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkConfig) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *NetworkConfig) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

func (x *NetworkConfig) GetTlsCertFile() string {
	if x != nil {
		return x.TlsCertFile
	}
	return ""
}

func (x *NetworkConfig) GetTlsKeyFile() string {
	if x != nil {
		return x.TlsKeyFile
	}
	return ""
}

func (x *NetworkConfig) GetSessions() *SessionsConfig {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *NetworkConfig) GetTrafficTunnelEndpoints() []*TrafficTunnelEndpoint {
	if x != nil {
		return x.TrafficTunnelEndpoints
	}
	return nil
}

func (x *NetworkConfig) GetNoTls() bool {
	if x != nil {
		return x.NoTls
	}
	return false
}

type SessionsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=heartbeat_window,json=heartbeatWindow,proto3" json:"heartbeat_window,omitempty"`
}

func (x *SessionsConfig) Reset() {
	*x = SessionsConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsConfig) ProtoMessage() {}

func (x *SessionsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsConfig.ProtoReflect.Descriptor instead.
func (*SessionsConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{10}
}

func (x *SessionsConfig) GetHeartbeatWindow() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatWindow
	}
	return nil
}

type TrafficTunnelEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port              int32                `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	ConnectionTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
}

func (x *TrafficTunnelEndpoint) Reset() {
	*x = TrafficTunnelEndpoint{}
	mi := &file_app_v1_robot_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficTunnelEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficTunnelEndpoint) ProtoMessage() {}

func (x *TrafficTunnelEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficTunnelEndpoint.ProtoReflect.Descriptor instead.
func (*TrafficTunnelEndpoint) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{11}
}

func (x *TrafficTunnelEndpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TrafficTunnelEndpoint) GetConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

type AuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handlers           []*AuthHandlerConfig `protobuf:"bytes,1,rep,name=handlers,proto3" json:"handlers,omitempty"`
	TlsAuthEntities    []string             `protobuf:"bytes,2,rep,name=tls_auth_entities,json=tlsAuthEntities,proto3" json:"tls_auth_entities,omitempty"`
	ExternalAuthConfig *ExternalAuthConfig  `protobuf:"bytes,3,opt,name=external_auth_config,json=externalAuthConfig,proto3,oneof" json:"external_auth_config,omitempty"`
}

func (x *AuthConfig) Reset() {
	*x = AuthConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthConfig) ProtoMessage() {}

func (x *AuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthConfig.ProtoReflect.Descriptor instead.
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{12}
}

func (x *AuthConfig) GetHandlers() []*AuthHandlerConfig {
	if x != nil {
		return x.Handlers
	}
	return nil
}

func (x *AuthConfig) GetTlsAuthEntities() []string {
	if x != nil {
		return x.TlsAuthEntities
	}
	return nil
}

func (x *AuthConfig) GetExternalAuthConfig() *ExternalAuthConfig {
	if x != nil {
		return x.ExternalAuthConfig
	}
	return nil
}

type JWKSFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON Web Keys (JWKS) file as arbitary json.
	// See https://www.rfc-editor.org/rfc/rfc7517
	Json *structpb.Struct `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *JWKSFile) Reset() {
	*x = JWKSFile{}
	mi := &file_app_v1_robot_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWKSFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWKSFile) ProtoMessage() {}

func (x *JWKSFile) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWKSFile.ProtoReflect.Descriptor instead.
func (*JWKSFile) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{13}
}

func (x *JWKSFile) GetJson() *structpb.Struct {
	if x != nil {
		return x.Json
	}
	return nil
}

// ExternalAuthConfig describes how a viam managed robot can accept
// credentials signed by the cloud app.
type ExternalAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwks *JWKSFile `protobuf:"bytes,1,opt,name=jwks,proto3" json:"jwks,omitempty"`
}

func (x *ExternalAuthConfig) Reset() {
	*x = ExternalAuthConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAuthConfig) ProtoMessage() {}

func (x *ExternalAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAuthConfig.ProtoReflect.Descriptor instead.
func (*ExternalAuthConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{14}
}

func (x *ExternalAuthConfig) GetJwks() *JWKSFile {
	if x != nil {
		return x.Jwks
	}
	return nil
}

type AuthHandlerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CredentialsType  `protobuf:"varint,1,opt,name=type,proto3,enum=viam.app.v1.CredentialsType" json:"type,omitempty"`
	Config *structpb.Struct `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *AuthHandlerConfig) Reset() {
	*x = AuthHandlerConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthHandlerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthHandlerConfig) ProtoMessage() {}

func (x *AuthHandlerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthHandlerConfig.ProtoReflect.Descriptor instead.
func (*AuthHandlerConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{15}
}

func (x *AuthHandlerConfig) GetType() CredentialsType {
	if x != nil {
		return x.Type
	}
	return CredentialsType_CREDENTIALS_TYPE_UNSPECIFIED
}

func (x *AuthHandlerConfig) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent      string       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Translation *Translation `protobuf:"bytes,2,opt,name=translation,proto3" json:"translation,omitempty"`
	Orientation *Orientation `protobuf:"bytes,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Geometry    *v1.Geometry `protobuf:"bytes,4,opt,name=geometry,proto3" json:"geometry,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_app_v1_robot_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{16}
}

func (x *Frame) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Frame) GetTranslation() *Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *Frame) GetOrientation() *Orientation {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *Frame) GetGeometry() *v1.Geometry {
	if x != nil {
		return x.Geometry
	}
	return nil
}

type LogConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *LogConfiguration) Reset() {
	*x = LogConfiguration{}
	mi := &file_app_v1_robot_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfiguration) ProtoMessage() {}

func (x *LogConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfiguration.ProtoReflect.Descriptor instead.
func (*LogConfiguration) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{17}
}

func (x *LogConfiguration) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type Translation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Translation) Reset() {
	*x = Translation{}
	mi := &file_app_v1_robot_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation) ProtoMessage() {}

func (x *Translation) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation.ProtoReflect.Descriptor instead.
func (*Translation) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{18}
}

func (x *Translation) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Translation) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Translation) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Orientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Orientation_NoOrientation_
	//	*Orientation_VectorRadians
	//	*Orientation_VectorDegrees
	//	*Orientation_EulerAngles_
	//	*Orientation_AxisAngles_
	//	*Orientation_Quaternion_
	Type isOrientation_Type `protobuf_oneof:"type"`
}

func (x *Orientation) Reset() {
	*x = Orientation{}
	mi := &file_app_v1_robot_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation) ProtoMessage() {}

func (x *Orientation) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation.ProtoReflect.Descriptor instead.
func (*Orientation) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19}
}

func (m *Orientation) GetType() isOrientation_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Orientation) GetNoOrientation() *Orientation_NoOrientation {
	if x, ok := x.GetType().(*Orientation_NoOrientation_); ok {
		return x.NoOrientation
	}
	return nil
}

func (x *Orientation) GetVectorRadians() *Orientation_OrientationVectorRadians {
	if x, ok := x.GetType().(*Orientation_VectorRadians); ok {
		return x.VectorRadians
	}
	return nil
}

func (x *Orientation) GetVectorDegrees() *Orientation_OrientationVectorDegrees {
	if x, ok := x.GetType().(*Orientation_VectorDegrees); ok {
		return x.VectorDegrees
	}
	return nil
}

func (x *Orientation) GetEulerAngles() *Orientation_EulerAngles {
	if x, ok := x.GetType().(*Orientation_EulerAngles_); ok {
		return x.EulerAngles
	}
	return nil
}

func (x *Orientation) GetAxisAngles() *Orientation_AxisAngles {
	if x, ok := x.GetType().(*Orientation_AxisAngles_); ok {
		return x.AxisAngles
	}
	return nil
}

func (x *Orientation) GetQuaternion() *Orientation_Quaternion {
	if x, ok := x.GetType().(*Orientation_Quaternion_); ok {
		return x.Quaternion
	}
	return nil
}

type isOrientation_Type interface {
	isOrientation_Type()
}

type Orientation_NoOrientation_ struct {
	NoOrientation *Orientation_NoOrientation `protobuf:"bytes,1,opt,name=no_orientation,json=noOrientation,proto3,oneof"`
}

type Orientation_VectorRadians struct {
	VectorRadians *Orientation_OrientationVectorRadians `protobuf:"bytes,2,opt,name=vector_radians,json=vectorRadians,proto3,oneof"`
}

type Orientation_VectorDegrees struct {
	VectorDegrees *Orientation_OrientationVectorDegrees `protobuf:"bytes,3,opt,name=vector_degrees,json=vectorDegrees,proto3,oneof"`
}

type Orientation_EulerAngles_ struct {
	EulerAngles *Orientation_EulerAngles `protobuf:"bytes,4,opt,name=euler_angles,json=eulerAngles,proto3,oneof"`
}

type Orientation_AxisAngles_ struct {
	AxisAngles *Orientation_AxisAngles `protobuf:"bytes,5,opt,name=axis_angles,json=axisAngles,proto3,oneof"`
}

type Orientation_Quaternion_ struct {
	Quaternion *Orientation_Quaternion `protobuf:"bytes,6,opt,name=quaternion,proto3,oneof"`
}

func (*Orientation_NoOrientation_) isOrientation_Type() {}

func (*Orientation_VectorRadians) isOrientation_Type() {}

func (*Orientation_VectorDegrees) isOrientation_Type() {}

func (*Orientation_EulerAngles_) isOrientation_Type() {}

func (*Orientation_AxisAngles_) isOrientation_Type() {}

func (*Orientation_Quaternion_) isOrientation_Type() {}

// A RemoteConfig describes a remote robot that should be integrated.
// The Frame field defines how the "world" node of the remote robot should be reconciled with the "world" node of the
// the current robot. All components of the remote robot who have Parent as "world" will be attached to the parent defined
// in Frame, and with the given offset as well.
type RemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address                 string                        `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Frame                   *Frame                        `protobuf:"bytes,3,opt,name=frame,proto3" json:"frame,omitempty"`
	Auth                    *RemoteAuth                   `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	ManagedBy               string                        `protobuf:"bytes,5,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	Insecure                bool                          `protobuf:"varint,6,opt,name=insecure,proto3" json:"insecure,omitempty"`
	ConnectionCheckInterval *durationpb.Duration          `protobuf:"bytes,7,opt,name=connection_check_interval,json=connectionCheckInterval,proto3" json:"connection_check_interval,omitempty"`
	ReconnectInterval       *durationpb.Duration          `protobuf:"bytes,8,opt,name=reconnect_interval,json=reconnectInterval,proto3" json:"reconnect_interval,omitempty"`
	ServiceConfigs          []*ResourceLevelServiceConfig `protobuf:"bytes,9,rep,name=service_configs,json=serviceConfigs,proto3" json:"service_config"`
	// Secret is a helper for a robot location secret.
	Secret string `protobuf:"bytes,10,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RemoteConfig) Reset() {
	*x = RemoteConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfig) ProtoMessage() {}

func (x *RemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfig.ProtoReflect.Descriptor instead.
func (*RemoteConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{20}
}

func (x *RemoteConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemoteConfig) GetFrame() *Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *RemoteConfig) GetAuth() *RemoteAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RemoteConfig) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *RemoteConfig) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *RemoteConfig) GetConnectionCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.ConnectionCheckInterval
	}
	return nil
}

func (x *RemoteConfig) GetReconnectInterval() *durationpb.Duration {
	if x != nil {
		return x.ReconnectInterval
	}
	return nil
}

func (x *RemoteConfig) GetServiceConfigs() []*ResourceLevelServiceConfig {
	if x != nil {
		return x.ServiceConfigs
	}
	return nil
}

func (x *RemoteConfig) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

// RemoteAuth specifies how to authenticate against a remote. If no credentials are
// specified, authentication does not happen. If an entity is specified, the
// authentication request will specify it.
type RemoteAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials *RemoteAuth_Credentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Entity      string                  `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *RemoteAuth) Reset() {
	*x = RemoteAuth{}
	mi := &file_app_v1_robot_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAuth) ProtoMessage() {}

func (x *RemoteAuth) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAuth.ProtoReflect.Descriptor instead.
func (*RemoteAuth) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{21}
}

func (x *RemoteAuth) GetCredentials() *RemoteAuth_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *RemoteAuth) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Os   string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"` // Will soon be deprecated, use platform instead
	// list of all ipv4 ips.
	Ips []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
	// RDK version
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	GitRevision string `protobuf:"bytes,5,opt,name=git_revision,json=gitRevision,proto3" json:"git_revision,omitempty"`
	// The platform the RDK is running on. For example linux/amd64
	Platform *string `protobuf:"bytes,6,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	// Optional tags to further constrain which artifact is returned for modules.
	PlatformTags []string `protobuf:"bytes,7,rep,name=platform_tags,json=platformTags,proto3" json:"platform_tags,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	mi := &file_app_v1_robot_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{22}
}

func (x *AgentInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AgentInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AgentInfo) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *AgentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentInfo) GetGitRevision() string {
	if x != nil {
		return x.GitRevision
	}
	return ""
}

func (x *AgentInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *AgentInfo) GetPlatformTags() []string {
	if x != nil {
		return x.PlatformTags
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Details about the RDK (os, version) are updated during this request.
	AgentInfo *AgentInfo `protobuf:"bytes,2,opt,name=agent_info,json=agentInfo,proto3,oneof" json:"agent_info,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	mi := &file_app_v1_robot_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{23}
}

func (x *ConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigRequest) GetAgentInfo() *AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *RobotConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	mi := &file_app_v1_robot_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigResponse) GetConfig() *RobotConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CertificateRequest) Reset() {
	*x = CertificateRequest{}
	mi := &file_app_v1_robot_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRequest) ProtoMessage() {}

func (x *CertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRequest.ProtoReflect.Descriptor instead.
func (*CertificateRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{25}
}

func (x *CertificateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TlsCertificate string `protobuf:"bytes,2,opt,name=tls_certificate,json=tlsCertificate,proto3" json:"tls_certificate,omitempty"`
	TlsPrivateKey  string `protobuf:"bytes,3,opt,name=tls_private_key,json=tlsPrivateKey,proto3" json:"tls_private_key,omitempty"`
}

func (x *CertificateResponse) Reset() {
	*x = CertificateResponse{}
	mi := &file_app_v1_robot_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateResponse) ProtoMessage() {}

func (x *CertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateResponse.ProtoReflect.Descriptor instead.
func (*CertificateResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{26}
}

func (x *CertificateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CertificateResponse) GetTlsCertificate() string {
	if x != nil {
		return x.TlsCertificate
	}
	return ""
}

func (x *CertificateResponse) GetTlsPrivateKey() string {
	if x != nil {
		return x.TlsPrivateKey
	}
	return ""
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Logs []*v1.LogEntry `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_app_v1_robot_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{27}
}

func (x *LogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogRequest) GetLogs() []*v1.LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_app_v1_robot_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{28}
}

type NeedsRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NeedsRestartRequest) Reset() {
	*x = NeedsRestartRequest{}
	mi := &file_app_v1_robot_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeedsRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedsRestartRequest) ProtoMessage() {}

func (x *NeedsRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedsRestartRequest.ProtoReflect.Descriptor instead.
func (*NeedsRestartRequest) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{29}
}

func (x *NeedsRestartRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NeedsRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot part id.
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MustRestart          bool                 `protobuf:"varint,2,opt,name=must_restart,json=mustRestart,proto3" json:"must_restart,omitempty"`
	RestartCheckInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=restart_check_interval,json=restartCheckInterval,proto3" json:"restart_check_interval,omitempty"`
}

func (x *NeedsRestartResponse) Reset() {
	*x = NeedsRestartResponse{}
	mi := &file_app_v1_robot_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeedsRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedsRestartResponse) ProtoMessage() {}

func (x *NeedsRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedsRestartResponse.ProtoReflect.Descriptor instead.
func (*NeedsRestartResponse) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{30}
}

func (x *NeedsRestartResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NeedsRestartResponse) GetMustRestart() bool {
	if x != nil {
		return x.MustRestart
	}
	return false
}

func (x *NeedsRestartResponse) GetRestartCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.RestartCheckInterval
	}
	return nil
}

// ModuleConfig is the configuration for a module.
type ModuleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// path to the executable
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// log level for module
	LogLevel string `protobuf:"bytes,3,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// type of the module ("local" or "registry")
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// the id of the module if it is a registry module
	ModuleId string `protobuf:"bytes,5,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// additional environment variables passed to the module process
	Env map[string]string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// info about the validity of the module
	Status *AppValidationStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// timeout for first_run script
	FirstRunTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=first_run_timeout,json=firstRunTimeout,proto3" json:"first_run_timeout,omitempty"`
}

func (x *ModuleConfig) Reset() {
	*x = ModuleConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleConfig) ProtoMessage() {}

func (x *ModuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleConfig.ProtoReflect.Descriptor instead.
func (*ModuleConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{31}
}

func (x *ModuleConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ModuleConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *ModuleConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ModuleConfig) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *ModuleConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ModuleConfig) GetStatus() *AppValidationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ModuleConfig) GetFirstRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.FirstRunTimeout
	}
	return nil
}

// PackageConfig is the configration for deployed Packages.
type PackageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the local name of the package on the RDK. Must be unique across Packages. Must not be empty.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Package is the unique package name hosted by Viam. Must not be empty.
	Package string `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	// version of the package ID hosted by Viam. If not specified "latest" is assumed.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// type of the package
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// info about the validity of the package
	Status *AppValidationStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PackageConfig) Reset() {
	*x = PackageConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageConfig) ProtoMessage() {}

func (x *PackageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageConfig.ProtoReflect.Descriptor instead.
func (*PackageConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{32}
}

func (x *PackageConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageConfig) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *PackageConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageConfig) GetStatus() *AppValidationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MaintenanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorName            *v1.ResourceName `protobuf:"bytes,1,opt,name=sensor_name,json=sensorName,proto3" json:"sensor_name,omitempty"`
	MaintenanceAllowedKey string           `protobuf:"bytes,2,opt,name=maintenance_allowed_key,json=maintenanceAllowedKey,proto3" json:"maintenance_allowed_key,omitempty"`
}

func (x *MaintenanceConfig) Reset() {
	*x = MaintenanceConfig{}
	mi := &file_app_v1_robot_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaintenanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceConfig) ProtoMessage() {}

func (x *MaintenanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceConfig.ProtoReflect.Descriptor instead.
func (*MaintenanceConfig) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{33}
}

func (x *MaintenanceConfig) GetSensorName() *v1.ResourceName {
	if x != nil {
		return x.SensorName
	}
	return nil
}

func (x *MaintenanceConfig) GetMaintenanceAllowedKey() string {
	if x != nil {
		return x.MaintenanceAllowedKey
	}
	return ""
}

type Orientation_NoOrientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Orientation_NoOrientation) Reset() {
	*x = Orientation_NoOrientation{}
	mi := &file_app_v1_robot_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_NoOrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_NoOrientation) ProtoMessage() {}

func (x *Orientation_NoOrientation) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_NoOrientation.ProtoReflect.Descriptor instead.
func (*Orientation_NoOrientation) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 0}
}

// OrientationVector containing ox, oy, oz, theta represents an orientation vector
// Structured similarly to an angle axis, an orientation vector works differently. Rather than representing an orientation
// with an arbitrary axis and a rotation around it from an origin, an orientation vector represents orientation
// such that the ox/oy/oz components represent the point on the cartesian unit sphere at which your end effector is pointing
// from the origin, and that unit vector forms an axis around which theta rotates. This means that incrementing/decrementing
// theta will perform an in-line rotation of the end effector.
// Theta is defined as rotation between two planes: the plane defined by the origin, the point (0,0,1), and the rx,ry,rz
// point, and the plane defined by the origin, the rx,ry,rz point, and the new local Z axis. So if theta is kept at
// zero as the north/south pole is circled, the Roll will correct itself to remain in-line.
type Orientation_OrientationVectorRadians struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theta float64 `protobuf:"fixed64,1,opt,name=theta,proto3" json:"th"`
	X     float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y     float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z     float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Orientation_OrientationVectorRadians) Reset() {
	*x = Orientation_OrientationVectorRadians{}
	mi := &file_app_v1_robot_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_OrientationVectorRadians) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_OrientationVectorRadians) ProtoMessage() {}

func (x *Orientation_OrientationVectorRadians) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_OrientationVectorRadians.ProtoReflect.Descriptor instead.
func (*Orientation_OrientationVectorRadians) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Orientation_OrientationVectorRadians) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Orientation_OrientationVectorRadians) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Orientation_OrientationVectorRadians) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Orientation_OrientationVectorRadians) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// OrientationVectorDegrees is the orientation vector between two objects, but expressed in degrees rather than radians.
// Because protobuf Pose is in degrees, this is necessary.
type Orientation_OrientationVectorDegrees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theta float64 `protobuf:"fixed64,1,opt,name=theta,proto3" json:"th"`
	X     float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y     float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z     float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Orientation_OrientationVectorDegrees) Reset() {
	*x = Orientation_OrientationVectorDegrees{}
	mi := &file_app_v1_robot_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_OrientationVectorDegrees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_OrientationVectorDegrees) ProtoMessage() {}

func (x *Orientation_OrientationVectorDegrees) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_OrientationVectorDegrees.ProtoReflect.Descriptor instead.
func (*Orientation_OrientationVectorDegrees) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 2}
}

func (x *Orientation_OrientationVectorDegrees) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Orientation_OrientationVectorDegrees) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Orientation_OrientationVectorDegrees) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Orientation_OrientationVectorDegrees) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// EulerAngles are three angles (in radians) used to represent the rotation of an object in 3D Euclidean space
// The Tait–Bryan angle formalism is used, with rotations around three distinct axes in the z-y′-x″ sequence.
type Orientation_EulerAngles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roll  float64 `protobuf:"fixed64,1,opt,name=roll,proto3" json:"roll,omitempty"`
	Pitch float64 `protobuf:"fixed64,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Yaw   float64 `protobuf:"fixed64,3,opt,name=yaw,proto3" json:"yaw,omitempty"`
}

func (x *Orientation_EulerAngles) Reset() {
	*x = Orientation_EulerAngles{}
	mi := &file_app_v1_robot_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_EulerAngles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_EulerAngles) ProtoMessage() {}

func (x *Orientation_EulerAngles) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_EulerAngles.ProtoReflect.Descriptor instead.
func (*Orientation_EulerAngles) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 3}
}

func (x *Orientation_EulerAngles) GetRoll() float64 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *Orientation_EulerAngles) GetPitch() float64 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Orientation_EulerAngles) GetYaw() float64 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

// See here for a thorough explanation: https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation
// Basic explanation: Imagine a 3d cartesian grid centered at 0,0,0, and a sphere of radius 1 centered at
// that same point. An orientation can be expressed by first specifying an axis, i.e. a line from the origin
// to a point on that sphere, represented by (rx, ry, rz), and a rotation around that axis, theta.
// These four numbers can be used as-is (R4), or they can be converted to R3, where theta is multiplied by each of
// the unit sphere components to give a vector whose length is theta and whose direction is the original axis.
// AxisAngles represents an R4 axis angle.
type Orientation_AxisAngles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theta float64 `protobuf:"fixed64,1,opt,name=theta,proto3" json:"th"`
	X     float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y     float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z     float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Orientation_AxisAngles) Reset() {
	*x = Orientation_AxisAngles{}
	mi := &file_app_v1_robot_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_AxisAngles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_AxisAngles) ProtoMessage() {}

func (x *Orientation_AxisAngles) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_AxisAngles.ProtoReflect.Descriptor instead.
func (*Orientation_AxisAngles) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 4}
}

func (x *Orientation_AxisAngles) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *Orientation_AxisAngles) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Orientation_AxisAngles) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Orientation_AxisAngles) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Quaternion is a float64 precision quaternion.
type Orientation_Quaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	W float64 `protobuf:"fixed64,1,opt,name=w,proto3" json:"w,omitempty"`
	X float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Orientation_Quaternion) Reset() {
	*x = Orientation_Quaternion{}
	mi := &file_app_v1_robot_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Orientation_Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orientation_Quaternion) ProtoMessage() {}

func (x *Orientation_Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orientation_Quaternion.ProtoReflect.Descriptor instead.
func (*Orientation_Quaternion) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{19, 5}
}

func (x *Orientation_Quaternion) GetW() float64 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Orientation_Quaternion) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Orientation_Quaternion) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Orientation_Quaternion) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Credentials packages up both a type of credential along with its payload which
// is formatted specific to the type.
type RemoteAuth_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    CredentialsType `protobuf:"varint,1,opt,name=type,proto3,enum=viam.app.v1.CredentialsType" json:"type,omitempty"`
	Payload string          `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RemoteAuth_Credentials) Reset() {
	*x = RemoteAuth_Credentials{}
	mi := &file_app_v1_robot_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAuth_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAuth_Credentials) ProtoMessage() {}

func (x *RemoteAuth_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_app_v1_robot_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAuth_Credentials.ProtoReflect.Descriptor instead.
func (*RemoteAuth_Credentials) Descriptor() ([]byte, []int) {
	return file_app_v1_robot_proto_rawDescGZIP(), []int{21, 0}
}

func (x *RemoteAuth_Credentials) GetType() CredentialsType {
	if x != nil {
		return x.Type
	}
	return CredentialsType_CREDENTIALS_TYPE_UNSPECIFIED
}

func (x *RemoteAuth_Credentials) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

var File_app_v1_robot_proto protoreflect.FileDescriptor

var file_app_v1_robot_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf5, 0x07, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12,
	0x33, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x38, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xbe, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x66, 0x71, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0xbb, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x6c, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a,
	0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x69, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf0, 0x02, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x6e, 0x65, 0x53,
	0x68, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8f, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x6c, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x16, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x74, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x54, 0x6c, 0x73, 0x22, 0x56,
	0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x44, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x75, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xe5, 0x01,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6c, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x37, 0x0a, 0x08, 0x4a, 0x57, 0x4b, 0x53, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x3f,
	0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x57, 0x4b, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6a, 0x77, 0x6b, 0x73, 0x22,
	0x76, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcd, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x28, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x37, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0xd0, 0x07, 0x0a, 0x0b, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x6e, 0x6f,
	0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x0b, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x78,
	0x69, 0x73, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x78, 0x69, 0x73,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72,
	0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x0a,
	0x0d, 0x4e, 0x6f, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6a,
	0x0a, 0x18, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x68, 0x22, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a, 0x6a, 0x0a, 0x18, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x74, 0x68, 0x22, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a, 0x49, 0x0a, 0x0b, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79, 0x61,
	0x77, 0x1a, 0x5c, 0x0a, 0x0a, 0x41, 0x78, 0x69, 0x73, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x68, 0x22, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a,
	0x44, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x7a, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf5, 0x03,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x05,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x55,
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x6c, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x1a, 0x59, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd1,
	0x01, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x22, 0x6a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x42,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x4a, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x0d, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4f,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xf3, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x36, 0x0a,
	0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01,
	0x0a, 0x11, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x2a, 0xbf, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x32, 0xb2, 0x02, 0x0a,
	0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_app_v1_robot_proto_rawDescOnce sync.Once
	file_app_v1_robot_proto_rawDescData = file_app_v1_robot_proto_rawDesc
)

func file_app_v1_robot_proto_rawDescGZIP() []byte {
	file_app_v1_robot_proto_rawDescOnce.Do(func() {
		file_app_v1_robot_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_v1_robot_proto_rawDescData)
	})
	return file_app_v1_robot_proto_rawDescData
}

var file_app_v1_robot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_app_v1_robot_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_app_v1_robot_proto_goTypes = []any{
	(CredentialsType)(0),                         // 0: viam.app.v1.CredentialsType
	(*RobotConfig)(nil),                          // 1: viam.app.v1.RobotConfig
	(*LogPatternConfig)(nil),                     // 2: viam.app.v1.LogPatternConfig
	(*LocationSecret)(nil),                       // 3: viam.app.v1.LocationSecret
	(*AppValidationStatus)(nil),                  // 4: viam.app.v1.AppValidationStatus
	(*CloudConfig)(nil),                          // 5: viam.app.v1.CloudConfig
	(*ComponentConfig)(nil),                      // 6: viam.app.v1.ComponentConfig
	(*ResourceLevelServiceConfig)(nil),           // 7: viam.app.v1.ResourceLevelServiceConfig
	(*ProcessConfig)(nil),                        // 8: viam.app.v1.ProcessConfig
	(*ServiceConfig)(nil),                        // 9: viam.app.v1.ServiceConfig
	(*NetworkConfig)(nil),                        // 10: viam.app.v1.NetworkConfig
	(*SessionsConfig)(nil),                       // 11: viam.app.v1.SessionsConfig
	(*TrafficTunnelEndpoint)(nil),                // 12: viam.app.v1.TrafficTunnelEndpoint
	(*AuthConfig)(nil),                           // 13: viam.app.v1.AuthConfig
	(*JWKSFile)(nil),                             // 14: viam.app.v1.JWKSFile
	(*ExternalAuthConfig)(nil),                   // 15: viam.app.v1.ExternalAuthConfig
	(*AuthHandlerConfig)(nil),                    // 16: viam.app.v1.AuthHandlerConfig
	(*Frame)(nil),                                // 17: viam.app.v1.Frame
	(*LogConfiguration)(nil),                     // 18: viam.app.v1.LogConfiguration
	(*Translation)(nil),                          // 19: viam.app.v1.Translation
	(*Orientation)(nil),                          // 20: viam.app.v1.Orientation
	(*RemoteConfig)(nil),                         // 21: viam.app.v1.RemoteConfig
	(*RemoteAuth)(nil),                           // 22: viam.app.v1.RemoteAuth
	(*AgentInfo)(nil),                            // 23: viam.app.v1.AgentInfo
	(*ConfigRequest)(nil),                        // 24: viam.app.v1.ConfigRequest
	(*ConfigResponse)(nil),                       // 25: viam.app.v1.ConfigResponse
	(*CertificateRequest)(nil),                   // 26: viam.app.v1.CertificateRequest
	(*CertificateResponse)(nil),                  // 27: viam.app.v1.CertificateResponse
	(*LogRequest)(nil),                           // 28: viam.app.v1.LogRequest
	(*LogResponse)(nil),                          // 29: viam.app.v1.LogResponse
	(*NeedsRestartRequest)(nil),                  // 30: viam.app.v1.NeedsRestartRequest
	(*NeedsRestartResponse)(nil),                 // 31: viam.app.v1.NeedsRestartResponse
	(*ModuleConfig)(nil),                         // 32: viam.app.v1.ModuleConfig
	(*PackageConfig)(nil),                        // 33: viam.app.v1.PackageConfig
	(*MaintenanceConfig)(nil),                    // 34: viam.app.v1.MaintenanceConfig
	nil,                                          // 35: viam.app.v1.ProcessConfig.EnvEntry
	(*Orientation_NoOrientation)(nil),            // 36: viam.app.v1.Orientation.NoOrientation
	(*Orientation_OrientationVectorRadians)(nil), // 37: viam.app.v1.Orientation.OrientationVectorRadians
	(*Orientation_OrientationVectorDegrees)(nil), // 38: viam.app.v1.Orientation.OrientationVectorDegrees
	(*Orientation_EulerAngles)(nil),              // 39: viam.app.v1.Orientation.EulerAngles
	(*Orientation_AxisAngles)(nil),               // 40: viam.app.v1.Orientation.AxisAngles
	(*Orientation_Quaternion)(nil),               // 41: viam.app.v1.Orientation.Quaternion
	(*RemoteAuth_Credentials)(nil),               // 42: viam.app.v1.RemoteAuth.Credentials
	nil,                                          // 43: viam.app.v1.ModuleConfig.EnvEntry
	(*structpb.Struct)(nil),                      // 44: google.protobuf.Struct
	(*durationpb.Duration)(nil),                  // 45: google.protobuf.Duration
	(*v1.Geometry)(nil),                          // 46: viam.common.v1.Geometry
	(*v1.LogEntry)(nil),                          // 47: viam.common.v1.LogEntry
	(*v1.ResourceName)(nil),                      // 48: viam.common.v1.ResourceName
}
var file_app_v1_robot_proto_depIdxs = []int32{
	5,  // 0: viam.app.v1.RobotConfig.cloud:type_name -> viam.app.v1.CloudConfig
	21, // 1: viam.app.v1.RobotConfig.remotes:type_name -> viam.app.v1.RemoteConfig
	6,  // 2: viam.app.v1.RobotConfig.components:type_name -> viam.app.v1.ComponentConfig
	8,  // 3: viam.app.v1.RobotConfig.processes:type_name -> viam.app.v1.ProcessConfig
	9,  // 4: viam.app.v1.RobotConfig.services:type_name -> viam.app.v1.ServiceConfig
	10, // 5: viam.app.v1.RobotConfig.network:type_name -> viam.app.v1.NetworkConfig
	13, // 6: viam.app.v1.RobotConfig.auth:type_name -> viam.app.v1.AuthConfig
	32, // 7: viam.app.v1.RobotConfig.modules:type_name -> viam.app.v1.ModuleConfig
	33, // 8: viam.app.v1.RobotConfig.packages:type_name -> viam.app.v1.PackageConfig
	4,  // 9: viam.app.v1.RobotConfig.overwrite_fragment_status:type_name -> viam.app.v1.AppValidationStatus
	2,  // 10: viam.app.v1.RobotConfig.log:type_name -> viam.app.v1.LogPatternConfig
	34, // 11: viam.app.v1.RobotConfig.maintenance:type_name -> viam.app.v1.MaintenanceConfig
	3,  // 12: viam.app.v1.CloudConfig.location_secrets:type_name -> viam.app.v1.LocationSecret
	17, // 13: viam.app.v1.ComponentConfig.frame:type_name -> viam.app.v1.Frame
	7,  // 14: viam.app.v1.ComponentConfig.service_configs:type_name -> viam.app.v1.ResourceLevelServiceConfig
	44, // 15: viam.app.v1.ComponentConfig.attributes:type_name -> google.protobuf.Struct
	18, // 16: viam.app.v1.ComponentConfig.log_configuration:type_name -> viam.app.v1.LogConfiguration
	44, // 17: viam.app.v1.ResourceLevelServiceConfig.attributes:type_name -> google.protobuf.Struct
	45, // 18: viam.app.v1.ProcessConfig.stop_timeout:type_name -> google.protobuf.Duration
	35, // 19: viam.app.v1.ProcessConfig.env:type_name -> viam.app.v1.ProcessConfig.EnvEntry
	44, // 20: viam.app.v1.ServiceConfig.attributes:type_name -> google.protobuf.Struct
	7,  // 21: viam.app.v1.ServiceConfig.service_configs:type_name -> viam.app.v1.ResourceLevelServiceConfig
	18, // 22: viam.app.v1.ServiceConfig.log_configuration:type_name -> viam.app.v1.LogConfiguration
	11, // 23: viam.app.v1.NetworkConfig.sessions:type_name -> viam.app.v1.SessionsConfig
	12, // 24: viam.app.v1.NetworkConfig.traffic_tunnel_endpoints:type_name -> viam.app.v1.TrafficTunnelEndpoint
	45, // 25: viam.app.v1.SessionsConfig.heartbeat_window:type_name -> google.protobuf.Duration
	45, // 26: viam.app.v1.TrafficTunnelEndpoint.connection_timeout:type_name -> google.protobuf.Duration
	16, // 27: viam.app.v1.AuthConfig.handlers:type_name -> viam.app.v1.AuthHandlerConfig
	15, // 28: viam.app.v1.AuthConfig.external_auth_config:type_name -> viam.app.v1.ExternalAuthConfig
	44, // 29: viam.app.v1.JWKSFile.json:type_name -> google.protobuf.Struct
	14, // 30: viam.app.v1.ExternalAuthConfig.jwks:type_name -> viam.app.v1.JWKSFile
	0,  // 31: viam.app.v1.AuthHandlerConfig.type:type_name -> viam.app.v1.CredentialsType
	44, // 32: viam.app.v1.AuthHandlerConfig.config:type_name -> google.protobuf.Struct
	19, // 33: viam.app.v1.Frame.translation:type_name -> viam.app.v1.Translation
	20, // 34: viam.app.v1.Frame.orientation:type_name -> viam.app.v1.Orientation
	46, // 35: viam.app.v1.Frame.geometry:type_name -> viam.common.v1.Geometry
	36, // 36: viam.app.v1.Orientation.no_orientation:type_name -> viam.app.v1.Orientation.NoOrientation
	37, // 37: viam.app.v1.Orientation.vector_radians:type_name -> viam.app.v1.Orientation.OrientationVectorRadians
	38, // 38: viam.app.v1.Orientation.vector_degrees:type_name -> viam.app.v1.Orientation.OrientationVectorDegrees
	39, // 39: viam.app.v1.Orientation.euler_angles:type_name -> viam.app.v1.Orientation.EulerAngles
	40, // 40: viam.app.v1.Orientation.axis_angles:type_name -> viam.app.v1.Orientation.AxisAngles
	41, // 41: viam.app.v1.Orientation.quaternion:type_name -> viam.app.v1.Orientation.Quaternion
	17, // 42: viam.app.v1.RemoteConfig.frame:type_name -> viam.app.v1.Frame
	22, // 43: viam.app.v1.RemoteConfig.auth:type_name -> viam.app.v1.RemoteAuth
	45, // 44: viam.app.v1.RemoteConfig.connection_check_interval:type_name -> google.protobuf.Duration
	45, // 45: viam.app.v1.RemoteConfig.reconnect_interval:type_name -> google.protobuf.Duration
	7,  // 46: viam.app.v1.RemoteConfig.service_configs:type_name -> viam.app.v1.ResourceLevelServiceConfig
	42, // 47: viam.app.v1.RemoteAuth.credentials:type_name -> viam.app.v1.RemoteAuth.Credentials
	23, // 48: viam.app.v1.ConfigRequest.agent_info:type_name -> viam.app.v1.AgentInfo
	1,  // 49: viam.app.v1.ConfigResponse.config:type_name -> viam.app.v1.RobotConfig
	47, // 50: viam.app.v1.LogRequest.logs:type_name -> viam.common.v1.LogEntry
	45, // 51: viam.app.v1.NeedsRestartResponse.restart_check_interval:type_name -> google.protobuf.Duration
	43, // 52: viam.app.v1.ModuleConfig.env:type_name -> viam.app.v1.ModuleConfig.EnvEntry
	4,  // 53: viam.app.v1.ModuleConfig.status:type_name -> viam.app.v1.AppValidationStatus
	45, // 54: viam.app.v1.ModuleConfig.first_run_timeout:type_name -> google.protobuf.Duration
	4,  // 55: viam.app.v1.PackageConfig.status:type_name -> viam.app.v1.AppValidationStatus
	48, // 56: viam.app.v1.MaintenanceConfig.sensor_name:type_name -> viam.common.v1.ResourceName
	0,  // 57: viam.app.v1.RemoteAuth.Credentials.type:type_name -> viam.app.v1.CredentialsType
	24, // 58: viam.app.v1.RobotService.Config:input_type -> viam.app.v1.ConfigRequest
	26, // 59: viam.app.v1.RobotService.Certificate:input_type -> viam.app.v1.CertificateRequest
	28, // 60: viam.app.v1.RobotService.Log:input_type -> viam.app.v1.LogRequest
	30, // 61: viam.app.v1.RobotService.NeedsRestart:input_type -> viam.app.v1.NeedsRestartRequest
	25, // 62: viam.app.v1.RobotService.Config:output_type -> viam.app.v1.ConfigResponse
	27, // 63: viam.app.v1.RobotService.Certificate:output_type -> viam.app.v1.CertificateResponse
	29, // 64: viam.app.v1.RobotService.Log:output_type -> viam.app.v1.LogResponse
	31, // 65: viam.app.v1.RobotService.NeedsRestart:output_type -> viam.app.v1.NeedsRestartResponse
	62, // [62:66] is the sub-list for method output_type
	58, // [58:62] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_app_v1_robot_proto_init() }
func file_app_v1_robot_proto_init() {
	if File_app_v1_robot_proto != nil {
		return
	}
	file_app_v1_robot_proto_msgTypes[0].OneofWrappers = []any{}
	file_app_v1_robot_proto_msgTypes[12].OneofWrappers = []any{}
	file_app_v1_robot_proto_msgTypes[19].OneofWrappers = []any{
		(*Orientation_NoOrientation_)(nil),
		(*Orientation_VectorRadians)(nil),
		(*Orientation_VectorDegrees)(nil),
		(*Orientation_EulerAngles_)(nil),
		(*Orientation_AxisAngles_)(nil),
		(*Orientation_Quaternion_)(nil),
	}
	file_app_v1_robot_proto_msgTypes[22].OneofWrappers = []any{}
	file_app_v1_robot_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_v1_robot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_v1_robot_proto_goTypes,
		DependencyIndexes: file_app_v1_robot_proto_depIdxs,
		EnumInfos:         file_app_v1_robot_proto_enumTypes,
		MessageInfos:      file_app_v1_robot_proto_msgTypes,
	}.Build()
	File_app_v1_robot_proto = out.File
	file_app_v1_robot_proto_rawDesc = nil
	file_app_v1_robot_proto_goTypes = nil
	file_app_v1_robot_proto_depIdxs = nil
}
