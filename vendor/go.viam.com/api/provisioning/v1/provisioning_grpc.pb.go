// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: provisioning/v1/provisioning.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvisioningServiceClient is the client API for ProvisioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisioningServiceClient interface {
	// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
	GetSmartMachineStatus(ctx context.Context, in *GetSmartMachineStatusRequest, opts ...grpc.CallOption) (*GetSmartMachineStatusResponse, error)
	// SetNetworkCredentials is to set the wifi credentials.
	SetNetworkCredentials(ctx context.Context, in *SetNetworkCredentialsRequest, opts ...grpc.CallOption) (*SetNetworkCredentialsResponse, error)
	// SetSmartMachineCredentials is to set the smart machine credentials.
	SetSmartMachineCredentials(ctx context.Context, in *SetSmartMachineCredentialsRequest, opts ...grpc.CallOption) (*SetSmartMachineCredentialsResponse, error)
	// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
	GetNetworkList(ctx context.Context, in *GetNetworkListRequest, opts ...grpc.CallOption) (*GetNetworkListResponse, error)
}

type provisioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisioningServiceClient(cc grpc.ClientConnInterface) ProvisioningServiceClient {
	return &provisioningServiceClient{cc}
}

func (c *provisioningServiceClient) GetSmartMachineStatus(ctx context.Context, in *GetSmartMachineStatusRequest, opts ...grpc.CallOption) (*GetSmartMachineStatusResponse, error) {
	out := new(GetSmartMachineStatusResponse)
	err := c.cc.Invoke(ctx, "/viam.provisioning.v1.ProvisioningService/GetSmartMachineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) SetNetworkCredentials(ctx context.Context, in *SetNetworkCredentialsRequest, opts ...grpc.CallOption) (*SetNetworkCredentialsResponse, error) {
	out := new(SetNetworkCredentialsResponse)
	err := c.cc.Invoke(ctx, "/viam.provisioning.v1.ProvisioningService/SetNetworkCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) SetSmartMachineCredentials(ctx context.Context, in *SetSmartMachineCredentialsRequest, opts ...grpc.CallOption) (*SetSmartMachineCredentialsResponse, error) {
	out := new(SetSmartMachineCredentialsResponse)
	err := c.cc.Invoke(ctx, "/viam.provisioning.v1.ProvisioningService/SetSmartMachineCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisioningServiceClient) GetNetworkList(ctx context.Context, in *GetNetworkListRequest, opts ...grpc.CallOption) (*GetNetworkListResponse, error) {
	out := new(GetNetworkListResponse)
	err := c.cc.Invoke(ctx, "/viam.provisioning.v1.ProvisioningService/GetNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisioningServiceServer is the server API for ProvisioningService service.
// All implementations must embed UnimplementedProvisioningServiceServer
// for forward compatibility
type ProvisioningServiceServer interface {
	// GetSmartMachineStatus is for retrieving the status of the smart machine including networking.
	GetSmartMachineStatus(context.Context, *GetSmartMachineStatusRequest) (*GetSmartMachineStatusResponse, error)
	// SetNetworkCredentials is to set the wifi credentials.
	SetNetworkCredentials(context.Context, *SetNetworkCredentialsRequest) (*SetNetworkCredentialsResponse, error)
	// SetSmartMachineCredentials is to set the smart machine credentials.
	SetSmartMachineCredentials(context.Context, *SetSmartMachineCredentialsRequest) (*SetSmartMachineCredentialsResponse, error)
	// GetNetworkList is to retrieve the list of networks that are visible to the smart machine.
	GetNetworkList(context.Context, *GetNetworkListRequest) (*GetNetworkListResponse, error)
	mustEmbedUnimplementedProvisioningServiceServer()
}

// UnimplementedProvisioningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvisioningServiceServer struct {
}

func (UnimplementedProvisioningServiceServer) GetSmartMachineStatus(context.Context, *GetSmartMachineStatusRequest) (*GetSmartMachineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartMachineStatus not implemented")
}
func (UnimplementedProvisioningServiceServer) SetNetworkCredentials(context.Context, *SetNetworkCredentialsRequest) (*SetNetworkCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetworkCredentials not implemented")
}
func (UnimplementedProvisioningServiceServer) SetSmartMachineCredentials(context.Context, *SetSmartMachineCredentialsRequest) (*SetSmartMachineCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmartMachineCredentials not implemented")
}
func (UnimplementedProvisioningServiceServer) GetNetworkList(context.Context, *GetNetworkListRequest) (*GetNetworkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkList not implemented")
}
func (UnimplementedProvisioningServiceServer) mustEmbedUnimplementedProvisioningServiceServer() {}

// UnsafeProvisioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisioningServiceServer will
// result in compilation errors.
type UnsafeProvisioningServiceServer interface {
	mustEmbedUnimplementedProvisioningServiceServer()
}

func RegisterProvisioningServiceServer(s grpc.ServiceRegistrar, srv ProvisioningServiceServer) {
	s.RegisterService(&ProvisioningService_ServiceDesc, srv)
}

func _ProvisioningService_GetSmartMachineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmartMachineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).GetSmartMachineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.provisioning.v1.ProvisioningService/GetSmartMachineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).GetSmartMachineStatus(ctx, req.(*GetSmartMachineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_SetNetworkCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNetworkCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).SetNetworkCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.provisioning.v1.ProvisioningService/SetNetworkCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).SetNetworkCredentials(ctx, req.(*SetNetworkCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_SetSmartMachineCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSmartMachineCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).SetSmartMachineCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.provisioning.v1.ProvisioningService/SetSmartMachineCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).SetSmartMachineCredentials(ctx, req.(*SetSmartMachineCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvisioningService_GetNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServiceServer).GetNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.provisioning.v1.ProvisioningService/GetNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServiceServer).GetNetworkList(ctx, req.(*GetNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvisioningService_ServiceDesc is the grpc.ServiceDesc for ProvisioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.provisioning.v1.ProvisioningService",
	HandlerType: (*ProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSmartMachineStatus",
			Handler:    _ProvisioningService_GetSmartMachineStatus_Handler,
		},
		{
			MethodName: "SetNetworkCredentials",
			Handler:    _ProvisioningService_SetNetworkCredentials_Handler,
		},
		{
			MethodName: "SetSmartMachineCredentials",
			Handler:    _ProvisioningService_SetSmartMachineCredentials_Handler,
		},
		{
			MethodName: "GetNetworkList",
			Handler:    _ProvisioningService_GetNetworkList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provisioning/v1/provisioning.proto",
}
