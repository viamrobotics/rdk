// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: service/mlmodel/v1/mlmodel.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LabelType int32

const (
	LabelType_LABEL_TYPE_UNSPECIFIED LabelType = 0
	// the value of the arrays/tensor is the label index
	LabelType_LABEL_TYPE_TENSOR_VALUE LabelType = 1
	// the position of the tensor value in the axis is the label index
	LabelType_LABEL_TYPE_TENSOR_AXIS LabelType = 2
)

// Enum value maps for LabelType.
var (
	LabelType_name = map[int32]string{
		0: "LABEL_TYPE_UNSPECIFIED",
		1: "LABEL_TYPE_TENSOR_VALUE",
		2: "LABEL_TYPE_TENSOR_AXIS",
	}
	LabelType_value = map[string]int32{
		"LABEL_TYPE_UNSPECIFIED":  0,
		"LABEL_TYPE_TENSOR_VALUE": 1,
		"LABEL_TYPE_TENSOR_AXIS":  2,
	}
)

func (x LabelType) Enum() *LabelType {
	p := new(LabelType)
	*p = x
	return p
}

func (x LabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_mlmodel_v1_mlmodel_proto_enumTypes[0].Descriptor()
}

func (LabelType) Type() protoreflect.EnumType {
	return &file_service_mlmodel_v1_mlmodel_proto_enumTypes[0]
}

func (x LabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelType.Descriptor instead.
func (LabelType) EnumDescriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{0}
}

type InferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the model service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the input data is provided as set of named flat tensors
	InputTensors *FlatTensors `protobuf:"bytes,3,opt,name=input_tensors,json=inputTensors,proto3" json:"input_tensors,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *InferRequest) Reset() {
	*x = InferRequest{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferRequest) ProtoMessage() {}

func (x *InferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferRequest.ProtoReflect.Descriptor instead.
func (*InferRequest) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{0}
}

func (x *InferRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InferRequest) GetInputTensors() *FlatTensors {
	if x != nil {
		return x.InputTensors
	}
	return nil
}

func (x *InferRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type InferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the output data is provided as a set of named flat tensors
	OutputTensors *FlatTensors `protobuf:"bytes,3,opt,name=output_tensors,json=outputTensors,proto3" json:"output_tensors,omitempty"`
}

func (x *InferResponse) Reset() {
	*x = InferResponse{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferResponse) ProtoMessage() {}

func (x *InferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferResponse.ProtoReflect.Descriptor instead.
func (*InferResponse) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{1}
}

func (x *InferResponse) GetOutputTensors() *FlatTensors {
	if x != nil {
		return x.OutputTensors
	}
	return nil
}

type MetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the model service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MetadataRequest) Reset() {
	*x = MetadataRequest{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataRequest) ProtoMessage() {}

func (x *MetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataRequest.ProtoReflect.Descriptor instead.
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{2}
}

func (x *MetadataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetadataRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is the metadata associated with the ML model
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataResponse) Reset() {
	*x = MetadataResponse{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataResponse) ProtoMessage() {}

func (x *MetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataResponse.ProtoReflect.Descriptor instead.
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{3}
}

func (x *MetadataResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the model
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type of model e.g. object_detector, text_classifier
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// description of the model
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the necessary input arrays/tensors for an inference, order matters
	InputInfo []*TensorInfo `protobuf:"bytes,4,rep,name=input_info,json=inputInfo,proto3" json:"input_info,omitempty"`
	// the output arrays/tensors of the model, order matters
	OutputInfo []*TensorInfo `protobuf:"bytes,5,rep,name=output_info,json=outputInfo,proto3" json:"output_info,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetInputInfo() []*TensorInfo {
	if x != nil {
		return x.InputInfo
	}
	return nil
}

func (x *Metadata) GetOutputInfo() []*TensorInfo {
	if x != nil {
		return x.OutputInfo
	}
	return nil
}

type TensorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the data in the array/tensor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the data in the array/tensor
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// data type of the array/tensor, e.g. float32, float64, uint8
	DataType string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// shape of the array/tensor (-1 for unknown)
	Shape []int32 `protobuf:"varint,4,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// files associated with the array/tensor, like for category labels
	AssociatedFiles []*File `protobuf:"bytes,5,rep,name=associated_files,json=associatedFiles,proto3" json:"associated_files,omitempty"`
	// anything else you want to say
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TensorInfo) Reset() {
	*x = TensorInfo{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TensorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorInfo) ProtoMessage() {}

func (x *TensorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorInfo.ProtoReflect.Descriptor instead.
func (*TensorInfo) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{5}
}

func (x *TensorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TensorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TensorInfo) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *TensorInfo) GetShape() []int32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *TensorInfo) GetAssociatedFiles() []*File {
	if x != nil {
		return x.AssociatedFiles
	}
	return nil
}

func (x *TensorInfo) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the file, with file extension
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of what the file contains
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// How to associate the arrays/tensors to the labels in the file
	LabelType LabelType `protobuf:"varint,3,opt,name=label_type,json=labelType,proto3,enum=viam.service.mlmodel.v1.LabelType" json:"label_type,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{6}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *File) GetLabelType() LabelType {
	if x != nil {
		return x.LabelType
	}
	return LabelType_LABEL_TYPE_UNSPECIFIED
}

type FlatTensorDataInt8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataInt8) Reset() {
	*x = FlatTensorDataInt8{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataInt8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataInt8) ProtoMessage() {}

func (x *FlatTensorDataInt8) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataInt8.ProtoReflect.Descriptor instead.
func (*FlatTensorDataInt8) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{7}
}

func (x *FlatTensorDataInt8) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataUInt8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataUInt8) Reset() {
	*x = FlatTensorDataUInt8{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataUInt8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataUInt8) ProtoMessage() {}

func (x *FlatTensorDataUInt8) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataUInt8.ProtoReflect.Descriptor instead.
func (*FlatTensorDataUInt8) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{8}
}

func (x *FlatTensorDataUInt8) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataInt16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// packs two 16-bit numbers per entry - explicitly little-endian
	// so big-endian producers/consumers must compensate
	Data []uint32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataInt16) Reset() {
	*x = FlatTensorDataInt16{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataInt16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataInt16) ProtoMessage() {}

func (x *FlatTensorDataInt16) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataInt16.ProtoReflect.Descriptor instead.
func (*FlatTensorDataInt16) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{9}
}

func (x *FlatTensorDataInt16) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataUInt16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// packs two 16-bit numbers per entry - explicitly little-endian
	// so big-endian producers/consumers must compensate
	Data []uint32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataUInt16) Reset() {
	*x = FlatTensorDataUInt16{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataUInt16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataUInt16) ProtoMessage() {}

func (x *FlatTensorDataUInt16) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataUInt16.ProtoReflect.Descriptor instead.
func (*FlatTensorDataUInt16) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{10}
}

func (x *FlatTensorDataUInt16) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataInt32) Reset() {
	*x = FlatTensorDataInt32{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataInt32) ProtoMessage() {}

func (x *FlatTensorDataInt32) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataInt32.ProtoReflect.Descriptor instead.
func (*FlatTensorDataInt32) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{11}
}

func (x *FlatTensorDataInt32) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataUInt32) Reset() {
	*x = FlatTensorDataUInt32{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataUInt32) ProtoMessage() {}

func (x *FlatTensorDataUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataUInt32.ProtoReflect.Descriptor instead.
func (*FlatTensorDataUInt32) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{12}
}

func (x *FlatTensorDataUInt32) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataInt64) Reset() {
	*x = FlatTensorDataInt64{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataInt64) ProtoMessage() {}

func (x *FlatTensorDataInt64) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataInt64.ProtoReflect.Descriptor instead.
func (*FlatTensorDataInt64) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{13}
}

func (x *FlatTensorDataInt64) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataUInt64) Reset() {
	*x = FlatTensorDataUInt64{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataUInt64) ProtoMessage() {}

func (x *FlatTensorDataUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataUInt64.ProtoReflect.Descriptor instead.
func (*FlatTensorDataUInt64) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{14}
}

func (x *FlatTensorDataUInt64) GetData() []uint64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataFloat) Reset() {
	*x = FlatTensorDataFloat{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataFloat) ProtoMessage() {}

func (x *FlatTensorDataFloat) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataFloat.ProtoReflect.Descriptor instead.
func (*FlatTensorDataFloat) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{15}
}

func (x *FlatTensorDataFloat) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensorDataDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *FlatTensorDataDouble) Reset() {
	*x = FlatTensorDataDouble{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensorDataDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensorDataDouble) ProtoMessage() {}

func (x *FlatTensorDataDouble) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensorDataDouble.ProtoReflect.Descriptor instead.
func (*FlatTensorDataDouble) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{16}
}

func (x *FlatTensorDataDouble) GetData() []float64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FlatTensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the shape of the provided tensor as a list of integer extents
	Shape []uint64 `protobuf:"fixed64,1,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// the flat data to be interpreted per the above shape information
	//
	// Types that are assignable to Tensor:
	//
	//	*FlatTensor_Int8Tensor
	//	*FlatTensor_Uint8Tensor
	//	*FlatTensor_Int16Tensor
	//	*FlatTensor_Uint16Tensor
	//	*FlatTensor_Int32Tensor
	//	*FlatTensor_Uint32Tensor
	//	*FlatTensor_Int64Tensor
	//	*FlatTensor_Uint64Tensor
	//	*FlatTensor_FloatTensor
	//	*FlatTensor_DoubleTensor
	Tensor isFlatTensor_Tensor `protobuf_oneof:"tensor"`
}

func (x *FlatTensor) Reset() {
	*x = FlatTensor{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensor) ProtoMessage() {}

func (x *FlatTensor) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensor.ProtoReflect.Descriptor instead.
func (*FlatTensor) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{17}
}

func (x *FlatTensor) GetShape() []uint64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (m *FlatTensor) GetTensor() isFlatTensor_Tensor {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (x *FlatTensor) GetInt8Tensor() *FlatTensorDataInt8 {
	if x, ok := x.GetTensor().(*FlatTensor_Int8Tensor); ok {
		return x.Int8Tensor
	}
	return nil
}

func (x *FlatTensor) GetUint8Tensor() *FlatTensorDataUInt8 {
	if x, ok := x.GetTensor().(*FlatTensor_Uint8Tensor); ok {
		return x.Uint8Tensor
	}
	return nil
}

func (x *FlatTensor) GetInt16Tensor() *FlatTensorDataInt16 {
	if x, ok := x.GetTensor().(*FlatTensor_Int16Tensor); ok {
		return x.Int16Tensor
	}
	return nil
}

func (x *FlatTensor) GetUint16Tensor() *FlatTensorDataUInt16 {
	if x, ok := x.GetTensor().(*FlatTensor_Uint16Tensor); ok {
		return x.Uint16Tensor
	}
	return nil
}

func (x *FlatTensor) GetInt32Tensor() *FlatTensorDataInt32 {
	if x, ok := x.GetTensor().(*FlatTensor_Int32Tensor); ok {
		return x.Int32Tensor
	}
	return nil
}

func (x *FlatTensor) GetUint32Tensor() *FlatTensorDataUInt32 {
	if x, ok := x.GetTensor().(*FlatTensor_Uint32Tensor); ok {
		return x.Uint32Tensor
	}
	return nil
}

func (x *FlatTensor) GetInt64Tensor() *FlatTensorDataInt64 {
	if x, ok := x.GetTensor().(*FlatTensor_Int64Tensor); ok {
		return x.Int64Tensor
	}
	return nil
}

func (x *FlatTensor) GetUint64Tensor() *FlatTensorDataUInt64 {
	if x, ok := x.GetTensor().(*FlatTensor_Uint64Tensor); ok {
		return x.Uint64Tensor
	}
	return nil
}

func (x *FlatTensor) GetFloatTensor() *FlatTensorDataFloat {
	if x, ok := x.GetTensor().(*FlatTensor_FloatTensor); ok {
		return x.FloatTensor
	}
	return nil
}

func (x *FlatTensor) GetDoubleTensor() *FlatTensorDataDouble {
	if x, ok := x.GetTensor().(*FlatTensor_DoubleTensor); ok {
		return x.DoubleTensor
	}
	return nil
}

type isFlatTensor_Tensor interface {
	isFlatTensor_Tensor()
}

type FlatTensor_Int8Tensor struct {
	Int8Tensor *FlatTensorDataInt8 `protobuf:"bytes,2,opt,name=int8_tensor,json=int8Tensor,proto3,oneof"`
}

type FlatTensor_Uint8Tensor struct {
	Uint8Tensor *FlatTensorDataUInt8 `protobuf:"bytes,3,opt,name=uint8_tensor,json=uint8Tensor,proto3,oneof"`
}

type FlatTensor_Int16Tensor struct {
	Int16Tensor *FlatTensorDataInt16 `protobuf:"bytes,4,opt,name=int16_tensor,json=int16Tensor,proto3,oneof"`
}

type FlatTensor_Uint16Tensor struct {
	Uint16Tensor *FlatTensorDataUInt16 `protobuf:"bytes,5,opt,name=uint16_tensor,json=uint16Tensor,proto3,oneof"`
}

type FlatTensor_Int32Tensor struct {
	Int32Tensor *FlatTensorDataInt32 `protobuf:"bytes,6,opt,name=int32_tensor,json=int32Tensor,proto3,oneof"`
}

type FlatTensor_Uint32Tensor struct {
	Uint32Tensor *FlatTensorDataUInt32 `protobuf:"bytes,7,opt,name=uint32_tensor,json=uint32Tensor,proto3,oneof"`
}

type FlatTensor_Int64Tensor struct {
	Int64Tensor *FlatTensorDataInt64 `protobuf:"bytes,8,opt,name=int64_tensor,json=int64Tensor,proto3,oneof"`
}

type FlatTensor_Uint64Tensor struct {
	Uint64Tensor *FlatTensorDataUInt64 `protobuf:"bytes,9,opt,name=uint64_tensor,json=uint64Tensor,proto3,oneof"`
}

type FlatTensor_FloatTensor struct {
	FloatTensor *FlatTensorDataFloat `protobuf:"bytes,10,opt,name=float_tensor,json=floatTensor,proto3,oneof"`
}

type FlatTensor_DoubleTensor struct {
	DoubleTensor *FlatTensorDataDouble `protobuf:"bytes,11,opt,name=double_tensor,json=doubleTensor,proto3,oneof"`
}

func (*FlatTensor_Int8Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Uint8Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Int16Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Uint16Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Int32Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Uint32Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Int64Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_Uint64Tensor) isFlatTensor_Tensor() {}

func (*FlatTensor_FloatTensor) isFlatTensor_Tensor() {}

func (*FlatTensor_DoubleTensor) isFlatTensor_Tensor() {}

type FlatTensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A name-indexed collection of flat tensor objects
	Tensors map[string]*FlatTensor `protobuf:"bytes,1,rep,name=tensors,proto3" json:"tensors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FlatTensors) Reset() {
	*x = FlatTensors{}
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatTensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatTensors) ProtoMessage() {}

func (x *FlatTensors) ProtoReflect() protoreflect.Message {
	mi := &file_service_mlmodel_v1_mlmodel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatTensors.ProtoReflect.Descriptor instead.
func (*FlatTensors) Descriptor() ([]byte, []int) {
	return file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP(), []int{18}
}

func (x *FlatTensors) GetTensors() map[string]*FlatTensor {
	if x != nil {
		return x.Tensors
	}
	return nil
}

var File_service_mlmodel_v1_mlmodel_proto protoreflect.FileDescriptor

var file_service_mlmodel_v1_mlmodel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x51, 0x0a, 0x10, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xde,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xee, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x7f, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x28, 0x0a, 0x12, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x13, 0x46,
	0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e,
	0x74, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x10, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xf3, 0x06, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x38, 0x5f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x38, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x38, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x38,
	0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e, 0x74, 0x38, 0x48, 0x00, 0x52, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x38, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x31, 0x36, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x54, 0x0a,
	0x0d, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e,
	0x74, 0x31, 0x36, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61,
	0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x54, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x61,
	0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x5f, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6c, 0x61, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x60, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x10, 0x02, 0x32, 0xb4, 0x02, 0x0a, 0x0e, 0x4d, 0x4c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x41, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x5a, 0x22,
	0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_mlmodel_v1_mlmodel_proto_rawDescOnce sync.Once
	file_service_mlmodel_v1_mlmodel_proto_rawDescData = file_service_mlmodel_v1_mlmodel_proto_rawDesc
)

func file_service_mlmodel_v1_mlmodel_proto_rawDescGZIP() []byte {
	file_service_mlmodel_v1_mlmodel_proto_rawDescOnce.Do(func() {
		file_service_mlmodel_v1_mlmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_mlmodel_v1_mlmodel_proto_rawDescData)
	})
	return file_service_mlmodel_v1_mlmodel_proto_rawDescData
}

var file_service_mlmodel_v1_mlmodel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_mlmodel_v1_mlmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_service_mlmodel_v1_mlmodel_proto_goTypes = []any{
	(LabelType)(0),               // 0: viam.service.mlmodel.v1.LabelType
	(*InferRequest)(nil),         // 1: viam.service.mlmodel.v1.InferRequest
	(*InferResponse)(nil),        // 2: viam.service.mlmodel.v1.InferResponse
	(*MetadataRequest)(nil),      // 3: viam.service.mlmodel.v1.MetadataRequest
	(*MetadataResponse)(nil),     // 4: viam.service.mlmodel.v1.MetadataResponse
	(*Metadata)(nil),             // 5: viam.service.mlmodel.v1.Metadata
	(*TensorInfo)(nil),           // 6: viam.service.mlmodel.v1.TensorInfo
	(*File)(nil),                 // 7: viam.service.mlmodel.v1.File
	(*FlatTensorDataInt8)(nil),   // 8: viam.service.mlmodel.v1.FlatTensorDataInt8
	(*FlatTensorDataUInt8)(nil),  // 9: viam.service.mlmodel.v1.FlatTensorDataUInt8
	(*FlatTensorDataInt16)(nil),  // 10: viam.service.mlmodel.v1.FlatTensorDataInt16
	(*FlatTensorDataUInt16)(nil), // 11: viam.service.mlmodel.v1.FlatTensorDataUInt16
	(*FlatTensorDataInt32)(nil),  // 12: viam.service.mlmodel.v1.FlatTensorDataInt32
	(*FlatTensorDataUInt32)(nil), // 13: viam.service.mlmodel.v1.FlatTensorDataUInt32
	(*FlatTensorDataInt64)(nil),  // 14: viam.service.mlmodel.v1.FlatTensorDataInt64
	(*FlatTensorDataUInt64)(nil), // 15: viam.service.mlmodel.v1.FlatTensorDataUInt64
	(*FlatTensorDataFloat)(nil),  // 16: viam.service.mlmodel.v1.FlatTensorDataFloat
	(*FlatTensorDataDouble)(nil), // 17: viam.service.mlmodel.v1.FlatTensorDataDouble
	(*FlatTensor)(nil),           // 18: viam.service.mlmodel.v1.FlatTensor
	(*FlatTensors)(nil),          // 19: viam.service.mlmodel.v1.FlatTensors
	nil,                          // 20: viam.service.mlmodel.v1.FlatTensors.TensorsEntry
	(*structpb.Struct)(nil),      // 21: google.protobuf.Struct
}
var file_service_mlmodel_v1_mlmodel_proto_depIdxs = []int32{
	19, // 0: viam.service.mlmodel.v1.InferRequest.input_tensors:type_name -> viam.service.mlmodel.v1.FlatTensors
	21, // 1: viam.service.mlmodel.v1.InferRequest.extra:type_name -> google.protobuf.Struct
	19, // 2: viam.service.mlmodel.v1.InferResponse.output_tensors:type_name -> viam.service.mlmodel.v1.FlatTensors
	21, // 3: viam.service.mlmodel.v1.MetadataRequest.extra:type_name -> google.protobuf.Struct
	5,  // 4: viam.service.mlmodel.v1.MetadataResponse.metadata:type_name -> viam.service.mlmodel.v1.Metadata
	6,  // 5: viam.service.mlmodel.v1.Metadata.input_info:type_name -> viam.service.mlmodel.v1.TensorInfo
	6,  // 6: viam.service.mlmodel.v1.Metadata.output_info:type_name -> viam.service.mlmodel.v1.TensorInfo
	7,  // 7: viam.service.mlmodel.v1.TensorInfo.associated_files:type_name -> viam.service.mlmodel.v1.File
	21, // 8: viam.service.mlmodel.v1.TensorInfo.extra:type_name -> google.protobuf.Struct
	0,  // 9: viam.service.mlmodel.v1.File.label_type:type_name -> viam.service.mlmodel.v1.LabelType
	8,  // 10: viam.service.mlmodel.v1.FlatTensor.int8_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataInt8
	9,  // 11: viam.service.mlmodel.v1.FlatTensor.uint8_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataUInt8
	10, // 12: viam.service.mlmodel.v1.FlatTensor.int16_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataInt16
	11, // 13: viam.service.mlmodel.v1.FlatTensor.uint16_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataUInt16
	12, // 14: viam.service.mlmodel.v1.FlatTensor.int32_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataInt32
	13, // 15: viam.service.mlmodel.v1.FlatTensor.uint32_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataUInt32
	14, // 16: viam.service.mlmodel.v1.FlatTensor.int64_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataInt64
	15, // 17: viam.service.mlmodel.v1.FlatTensor.uint64_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataUInt64
	16, // 18: viam.service.mlmodel.v1.FlatTensor.float_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataFloat
	17, // 19: viam.service.mlmodel.v1.FlatTensor.double_tensor:type_name -> viam.service.mlmodel.v1.FlatTensorDataDouble
	20, // 20: viam.service.mlmodel.v1.FlatTensors.tensors:type_name -> viam.service.mlmodel.v1.FlatTensors.TensorsEntry
	18, // 21: viam.service.mlmodel.v1.FlatTensors.TensorsEntry.value:type_name -> viam.service.mlmodel.v1.FlatTensor
	1,  // 22: viam.service.mlmodel.v1.MLModelService.Infer:input_type -> viam.service.mlmodel.v1.InferRequest
	3,  // 23: viam.service.mlmodel.v1.MLModelService.Metadata:input_type -> viam.service.mlmodel.v1.MetadataRequest
	2,  // 24: viam.service.mlmodel.v1.MLModelService.Infer:output_type -> viam.service.mlmodel.v1.InferResponse
	4,  // 25: viam.service.mlmodel.v1.MLModelService.Metadata:output_type -> viam.service.mlmodel.v1.MetadataResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_service_mlmodel_v1_mlmodel_proto_init() }
func file_service_mlmodel_v1_mlmodel_proto_init() {
	if File_service_mlmodel_v1_mlmodel_proto != nil {
		return
	}
	file_service_mlmodel_v1_mlmodel_proto_msgTypes[17].OneofWrappers = []any{
		(*FlatTensor_Int8Tensor)(nil),
		(*FlatTensor_Uint8Tensor)(nil),
		(*FlatTensor_Int16Tensor)(nil),
		(*FlatTensor_Uint16Tensor)(nil),
		(*FlatTensor_Int32Tensor)(nil),
		(*FlatTensor_Uint32Tensor)(nil),
		(*FlatTensor_Int64Tensor)(nil),
		(*FlatTensor_Uint64Tensor)(nil),
		(*FlatTensor_FloatTensor)(nil),
		(*FlatTensor_DoubleTensor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_mlmodel_v1_mlmodel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_mlmodel_v1_mlmodel_proto_goTypes,
		DependencyIndexes: file_service_mlmodel_v1_mlmodel_proto_depIdxs,
		EnumInfos:         file_service_mlmodel_v1_mlmodel_proto_enumTypes,
		MessageInfos:      file_service_mlmodel_v1_mlmodel_proto_msgTypes,
	}.Build()
	File_service_mlmodel_v1_mlmodel_proto = out.File
	file_service_mlmodel_v1_mlmodel_proto_rawDesc = nil
	file_service_mlmodel_v1_mlmodel_proto_goTypes = nil
	file_service_mlmodel_v1_mlmodel_proto_depIdxs = nil
}
