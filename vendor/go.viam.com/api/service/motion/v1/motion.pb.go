// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: service/motion/v1/motion.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The states that a plan can be in.
// InProgress if the plan is executing.
// Stopped if the plan was stopped.
// Suceeded if the robot reached its destination successfully.
// Failed if the robot did not reach its destination.
type PlanState int32

const (
	PlanState_PLAN_STATE_UNSPECIFIED PlanState = 0
	PlanState_PLAN_STATE_IN_PROGRESS PlanState = 1
	PlanState_PLAN_STATE_STOPPED     PlanState = 2
	PlanState_PLAN_STATE_SUCCEEDED   PlanState = 3
	PlanState_PLAN_STATE_FAILED      PlanState = 4
)

// Enum value maps for PlanState.
var (
	PlanState_name = map[int32]string{
		0: "PLAN_STATE_UNSPECIFIED",
		1: "PLAN_STATE_IN_PROGRESS",
		2: "PLAN_STATE_STOPPED",
		3: "PLAN_STATE_SUCCEEDED",
		4: "PLAN_STATE_FAILED",
	}
	PlanState_value = map[string]int32{
		"PLAN_STATE_UNSPECIFIED": 0,
		"PLAN_STATE_IN_PROGRESS": 1,
		"PLAN_STATE_STOPPED":     2,
		"PLAN_STATE_SUCCEEDED":   3,
		"PLAN_STATE_FAILED":      4,
	}
)

func (x PlanState) Enum() *PlanState {
	p := new(PlanState)
	*p = x
	return p
}

func (x PlanState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanState) Descriptor() protoreflect.EnumDescriptor {
	return file_service_motion_v1_motion_proto_enumTypes[0].Descriptor()
}

func (PlanState) Type() protoreflect.EnumType {
	return &file_service_motion_v1_motion_proto_enumTypes[0]
}

func (x PlanState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanState.Descriptor instead.
func (PlanState) EnumDescriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{0}
}

// Moves any component on the robot to a specified destination which can be from the reference frame of any other component on the robot.
type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Destination to move to, which can a pose in the reference frame of any frame in the robot's frame system
	Destination *v1.PoseInFrame `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Avoid obstacles by specifying their geometries in the world state
	// Augment the frame system of the robot by specifying additional transforms to add to it for the duration of the Move
	WorldState *v1.WorldState `protobuf:"bytes,4,opt,name=world_state,json=worldState,proto3,oneof" json:"world_state,omitempty"`
	// Constrain the way the robot will move
	Constraints *Constraints `protobuf:"bytes,5,opt,name=constraints,proto3,oneof" json:"constraints,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{0}
}

func (x *MoveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveRequest) GetDestination() *v1.PoseInFrame {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveRequest) GetWorldState() *v1.WorldState {
	if x != nil {
		return x.WorldState
	}
	return nil
}

func (x *MoveRequest) GetConstraints() *Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *MoveRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{1}
}

func (x *MoveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MoveOnMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specify a destination to, which can be any pose with respect to the SLAM map's origin
	Destination *v1.Pose `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Name of the slam service from which the SLAM map is requested
	SlamServiceName *v1.ResourceName `protobuf:"bytes,4,opt,name=slam_service_name,json=slamServiceName,proto3" json:"slam_service_name,omitempty"`
	// Optional set of motion configuration options
	MotionConfiguration *MotionConfiguration `protobuf:"bytes,5,opt,name=motion_configuration,json=motionConfiguration,proto3,oneof" json:"motion_configuration,omitempty"`
	// Obstacles to be considered for motion planning
	Obstacles []*v1.Geometry `protobuf:"bytes,6,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveOnMapRequest) Reset() {
	*x = MoveOnMapRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveOnMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnMapRequest) ProtoMessage() {}

func (x *MoveOnMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnMapRequest.ProtoReflect.Descriptor instead.
func (*MoveOnMapRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{2}
}

func (x *MoveOnMapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveOnMapRequest) GetDestination() *v1.Pose {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveOnMapRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveOnMapRequest) GetSlamServiceName() *v1.ResourceName {
	if x != nil {
		return x.SlamServiceName
	}
	return nil
}

func (x *MoveOnMapRequest) GetMotionConfiguration() *MotionConfiguration {
	if x != nil {
		return x.MotionConfiguration
	}
	return nil
}

func (x *MoveOnMapRequest) GetObstacles() []*v1.Geometry {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

func (x *MoveOnMapRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveOnMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID which identifies the execution.
	// Multiple plans will share the same execution_id if they were
	// generated due to replanning.
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *MoveOnMapResponse) Reset() {
	*x = MoveOnMapResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveOnMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnMapResponse) ProtoMessage() {}

func (x *MoveOnMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnMapResponse.ProtoReflect.Descriptor instead.
func (*MoveOnMapResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{3}
}

func (x *MoveOnMapResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

// Pairs a vision service with a camera, informing the service about which camera it may use
type ObstacleDetector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisionService *v1.ResourceName `protobuf:"bytes,1,opt,name=vision_service,json=visionService,proto3" json:"vision_service,omitempty"`
	Camera        *v1.ResourceName `protobuf:"bytes,2,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *ObstacleDetector) Reset() {
	*x = ObstacleDetector{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObstacleDetector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleDetector) ProtoMessage() {}

func (x *ObstacleDetector) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleDetector.ProtoReflect.Descriptor instead.
func (*ObstacleDetector) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{4}
}

func (x *ObstacleDetector) GetVisionService() *v1.ResourceName {
	if x != nil {
		return x.VisionService
	}
	return nil
}

func (x *ObstacleDetector) GetCamera() *v1.ResourceName {
	if x != nil {
		return x.Camera
	}
	return nil
}

type MotionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ObstacleDetectors that will be used for transient obstacle avoidance
	ObstacleDetectors []*ObstacleDetector `protobuf:"bytes,1,rep,name=obstacle_detectors,json=obstacleDetectors,proto3" json:"obstacle_detectors,omitempty"`
	// Sets the frequency to poll for the position of the robot
	PositionPollingFrequencyHz *float64 `protobuf:"fixed64,2,opt,name=position_polling_frequency_hz,json=positionPollingFrequencyHz,proto3,oneof" json:"position_polling_frequency_hz,omitempty"`
	// Sets the frequency to poll the vision service(s) for new obstacles
	ObstaclePollingFrequencyHz *float64 `protobuf:"fixed64,3,opt,name=obstacle_polling_frequency_hz,json=obstaclePollingFrequencyHz,proto3,oneof" json:"obstacle_polling_frequency_hz,omitempty"`
	// Sets the distance in meters that a robot is allowed to deviate from the motion plan
	PlanDeviationM *float64 `protobuf:"fixed64,4,opt,name=plan_deviation_m,json=planDeviationM,proto3,oneof" json:"plan_deviation_m,omitempty"`
	// Optional linear velocity to target when moving
	LinearMPerSec *float64 `protobuf:"fixed64,5,opt,name=linear_m_per_sec,json=linearMPerSec,proto3,oneof" json:"linear_m_per_sec,omitempty"`
	// Optional angular velocity to target when turning
	AngularDegsPerSec *float64 `protobuf:"fixed64,6,opt,name=angular_degs_per_sec,json=angularDegsPerSec,proto3,oneof" json:"angular_degs_per_sec,omitempty"`
}

func (x *MotionConfiguration) Reset() {
	*x = MotionConfiguration{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MotionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionConfiguration) ProtoMessage() {}

func (x *MotionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionConfiguration.ProtoReflect.Descriptor instead.
func (*MotionConfiguration) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{5}
}

func (x *MotionConfiguration) GetObstacleDetectors() []*ObstacleDetector {
	if x != nil {
		return x.ObstacleDetectors
	}
	return nil
}

func (x *MotionConfiguration) GetPositionPollingFrequencyHz() float64 {
	if x != nil && x.PositionPollingFrequencyHz != nil {
		return *x.PositionPollingFrequencyHz
	}
	return 0
}

func (x *MotionConfiguration) GetObstaclePollingFrequencyHz() float64 {
	if x != nil && x.ObstaclePollingFrequencyHz != nil {
		return *x.ObstaclePollingFrequencyHz
	}
	return 0
}

func (x *MotionConfiguration) GetPlanDeviationM() float64 {
	if x != nil && x.PlanDeviationM != nil {
		return *x.PlanDeviationM
	}
	return 0
}

func (x *MotionConfiguration) GetLinearMPerSec() float64 {
	if x != nil && x.LinearMPerSec != nil {
		return *x.LinearMPerSec
	}
	return 0
}

func (x *MotionConfiguration) GetAngularDegsPerSec() float64 {
	if x != nil && x.AngularDegsPerSec != nil {
		return *x.AngularDegsPerSec
	}
	return 0
}

type MoveOnGlobeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Destination, encoded as a GeoPoint
	Destination *v1.GeoPoint `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Optional compass heading to achieve at the destination, in degrees [0-360)
	Heading *float64 `protobuf:"fixed64,3,opt,name=heading,proto3,oneof" json:"heading,omitempty"`
	// Component on the robot to move to the specified destination
	ComponentName *v1.ResourceName `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Name of the movement sensor which will be used to check robot location
	MovementSensorName *v1.ResourceName `protobuf:"bytes,5,opt,name=movement_sensor_name,json=movementSensorName,proto3" json:"movement_sensor_name,omitempty"`
	// Obstacles to be considered for motion planning
	Obstacles []*v1.GeoGeometry `protobuf:"bytes,6,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	// Optional set of motion configuration options
	MotionConfiguration *MotionConfiguration `protobuf:"bytes,7,opt,name=motion_configuration,json=motionConfiguration,proto3,oneof" json:"motion_configuration,omitempty"`
	// Set of obstacles which the robot must remain within while navigating
	BoundingRegions []*v1.GeoGeometry `protobuf:"bytes,8,rep,name=bounding_regions,json=boundingRegions,proto3" json:"bounding_regions,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MoveOnGlobeRequest) Reset() {
	*x = MoveOnGlobeRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveOnGlobeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnGlobeRequest) ProtoMessage() {}

func (x *MoveOnGlobeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnGlobeRequest.ProtoReflect.Descriptor instead.
func (*MoveOnGlobeRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{6}
}

func (x *MoveOnGlobeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MoveOnGlobeRequest) GetDestination() *v1.GeoPoint {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetHeading() float64 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *MoveOnGlobeRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetMovementSensorName() *v1.ResourceName {
	if x != nil {
		return x.MovementSensorName
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetObstacles() []*v1.GeoGeometry {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetMotionConfiguration() *MotionConfiguration {
	if x != nil {
		return x.MotionConfiguration
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetBoundingRegions() []*v1.GeoGeometry {
	if x != nil {
		return x.BoundingRegions
	}
	return nil
}

func (x *MoveOnGlobeRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveOnGlobeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID which identifies the execution.
	// Multiple plans will share the same execution_id if they were
	// generated due to replanning.
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *MoveOnGlobeResponse) Reset() {
	*x = MoveOnGlobeResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveOnGlobeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOnGlobeResponse) ProtoMessage() {}

func (x *MoveOnGlobeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOnGlobeResponse.ProtoReflect.Descriptor instead.
func (*MoveOnGlobeResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{7}
}

func (x *MoveOnGlobeResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type GetPoseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the component whose pose is being requested
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// the reference frame in which the component's pose
	// should be provided, if unset this defaults
	// to the "world" reference frame
	DestinationFrame string `protobuf:"bytes,3,opt,name=destination_frame,json=destinationFrame,proto3" json:"destination_frame,omitempty"`
	// pose information on any additional reference frames that are needed
	// to compute the component's pose
	SupplementalTransforms []*v1.Transform `protobuf:"bytes,4,rep,name=supplemental_transforms,json=supplementalTransforms,proto3" json:"supplemental_transforms,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GetPoseRequest) Reset() {
	*x = GetPoseRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoseRequest) ProtoMessage() {}

func (x *GetPoseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoseRequest.ProtoReflect.Descriptor instead.
func (*GetPoseRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{8}
}

func (x *GetPoseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPoseRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *GetPoseRequest) GetDestinationFrame() string {
	if x != nil {
		return x.DestinationFrame
	}
	return ""
}

func (x *GetPoseRequest) GetSupplementalTransforms() []*v1.Transform {
	if x != nil {
		return x.SupplementalTransforms
	}
	return nil
}

func (x *GetPoseRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetPoseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose *v1.PoseInFrame `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *GetPoseResponse) Reset() {
	*x = GetPoseResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoseResponse) ProtoMessage() {}

func (x *GetPoseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoseResponse.ProtoReflect.Descriptor instead.
func (*GetPoseResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{9}
}

func (x *GetPoseResponse) GetPose() *v1.PoseInFrame {
	if x != nil {
		return x.Pose
	}
	return nil
}

type StopPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The component of the currently executing plan to stop
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *StopPlanRequest) Reset() {
	*x = StopPlanRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPlanRequest) ProtoMessage() {}

func (x *StopPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPlanRequest.ProtoReflect.Descriptor instead.
func (*StopPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{10}
}

func (x *StopPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StopPlanRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *StopPlanRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type StopPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopPlanResponse) Reset() {
	*x = StopPlanResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPlanResponse) ProtoMessage() {}

func (x *StopPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPlanResponse.ProtoReflect.Descriptor instead.
func (*StopPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{11}
}

type ListPlanStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If supplied, the response will filter the
	// plan results for the supplied state
	OnlyActivePlans bool `protobuf:"varint,2,opt,name=only_active_plans,json=onlyActivePlans,proto3" json:"only_active_plans,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ListPlanStatusesRequest) Reset() {
	*x = ListPlanStatusesRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlanStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanStatusesRequest) ProtoMessage() {}

func (x *ListPlanStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanStatusesRequest.ProtoReflect.Descriptor instead.
func (*ListPlanStatusesRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{12}
}

func (x *ListPlanStatusesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPlanStatusesRequest) GetOnlyActivePlans() bool {
	if x != nil {
		return x.OnlyActivePlans
	}
	return false
}

func (x *ListPlanStatusesRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Status of all executed / executing plan statuses with associated IDs within the 24 hour TTL
type ListPlanStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of last known statuses with the associated IDs of all plans within the TTL
	// ordered by timestamp in ascending order
	PlanStatusesWithIds []*PlanStatusWithID `protobuf:"bytes,1,rep,name=plan_statuses_with_ids,json=planStatusesWithIds,proto3" json:"plan_statuses_with_ids,omitempty"`
}

func (x *ListPlanStatusesResponse) Reset() {
	*x = ListPlanStatusesResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlanStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanStatusesResponse) ProtoMessage() {}

func (x *ListPlanStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanStatusesResponse.ProtoReflect.Descriptor instead.
func (*ListPlanStatusesResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{13}
}

func (x *ListPlanStatusesResponse) GetPlanStatusesWithIds() []*PlanStatusWithID {
	if x != nil {
		return x.PlanStatusesWithIds
	}
	return nil
}

type GetPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the motion service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the component which was requested to be moved.
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// If supplied, the response will only return
	// the the last plan for the component / execution
	LastPlanOnly bool `protobuf:"varint,3,opt,name=last_plan_only,json=lastPlanOnly,proto3" json:"last_plan_only,omitempty"`
	// If you want to know about the plans of a previous execution
	ExecutionId *string `protobuf:"bytes,4,opt,name=execution_id,json=executionId,proto3,oneof" json:"execution_id,omitempty"`
	// Additional arguments to the method
	Extra *structpb.Struct `protobuf:"bytes,99,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GetPlanRequest) Reset() {
	*x = GetPlanRequest{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRequest) ProtoMessage() {}

func (x *GetPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPlanRequest) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *GetPlanRequest) GetLastPlanOnly() bool {
	if x != nil {
		return x.LastPlanOnly
	}
	return false
}

func (x *GetPlanRequest) GetExecutionId() string {
	if x != nil && x.ExecutionId != nil {
		return *x.ExecutionId
	}
	return ""
}

func (x *GetPlanRequest) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current plan and status that matches the request query
	CurrentPlanWithStatus *PlanWithStatus `protobuf:"bytes,1,opt,name=current_plan_with_status,json=currentPlanWithStatus,proto3" json:"current_plan_with_status,omitempty"`
	// Returns the history of all previous plans that were
	// generated in ascending order.
	// This field will be empty if the motion service
	// did not need to re-plan.
	ReplanHistory []*PlanWithStatus `protobuf:"bytes,2,rep,name=replan_history,json=replanHistory,proto3" json:"replan_history,omitempty"`
}

func (x *GetPlanResponse) Reset() {
	*x = GetPlanResponse{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanResponse) ProtoMessage() {}

func (x *GetPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanResponse.ProtoReflect.Descriptor instead.
func (*GetPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{15}
}

func (x *GetPlanResponse) GetCurrentPlanWithStatus() *PlanWithStatus {
	if x != nil {
		return x.CurrentPlanWithStatus
	}
	return nil
}

func (x *GetPlanResponse) GetReplanHistory() []*PlanWithStatus {
	if x != nil {
		return x.ReplanHistory
	}
	return nil
}

// Constraints specifies all enumerated constraints to be passed to Viam's motion planning, along with any optional parameters
type Constraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Typed message for a specific constraint
	LinearConstraint       []*LinearConstraint       `protobuf:"bytes,1,rep,name=linear_constraint,json=linearConstraint,proto3" json:"linear_constraint,omitempty"`
	OrientationConstraint  []*OrientationConstraint  `protobuf:"bytes,2,rep,name=orientation_constraint,json=orientationConstraint,proto3" json:"orientation_constraint,omitempty"`
	CollisionSpecification []*CollisionSpecification `protobuf:"bytes,3,rep,name=collision_specification,json=collisionSpecification,proto3" json:"collision_specification,omitempty"` // Arc constraint, Time constraint, and others will be added here when they are supported
}

func (x *Constraints) Reset() {
	*x = Constraints{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraints) ProtoMessage() {}

func (x *Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraints.ProtoReflect.Descriptor instead.
func (*Constraints) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{16}
}

func (x *Constraints) GetLinearConstraint() []*LinearConstraint {
	if x != nil {
		return x.LinearConstraint
	}
	return nil
}

func (x *Constraints) GetOrientationConstraint() []*OrientationConstraint {
	if x != nil {
		return x.OrientationConstraint
	}
	return nil
}

func (x *Constraints) GetCollisionSpecification() []*CollisionSpecification {
	if x != nil {
		return x.CollisionSpecification
	}
	return nil
}

// LinearConstraint specifies that the component being moved should move linearly relative to its goal.
// It does not constrain the motion of components other than the `component_name` specified in motion.Move
type LinearConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineToleranceMm *float32 `protobuf:"fixed32,1,opt,name=line_tolerance_mm,json=lineToleranceMm,proto3,oneof" json:"line_tolerance_mm,omitempty"` // Max linear deviation from straight-line between start and goal, in mm.
	// Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
	OrientationToleranceDegs *float32 `protobuf:"fixed32,2,opt,name=orientation_tolerance_degs,json=orientationToleranceDegs,proto3,oneof" json:"orientation_tolerance_degs,omitempty"`
}

func (x *LinearConstraint) Reset() {
	*x = LinearConstraint{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinearConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearConstraint) ProtoMessage() {}

func (x *LinearConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearConstraint.ProtoReflect.Descriptor instead.
func (*LinearConstraint) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{17}
}

func (x *LinearConstraint) GetLineToleranceMm() float32 {
	if x != nil && x.LineToleranceMm != nil {
		return *x.LineToleranceMm
	}
	return 0
}

func (x *LinearConstraint) GetOrientationToleranceDegs() float32 {
	if x != nil && x.OrientationToleranceDegs != nil {
		return *x.OrientationToleranceDegs
	}
	return 0
}

// OrientationConstraint specifies that the component being moved will not deviate its orientation beyond some threshold relative
// to the goal. It does not constrain the motion of components other than the `component_name` specified in motion.Move
type OrientationConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max allowable orientation deviation, in degrees, while on the shortest path between start / goal states
	OrientationToleranceDegs *float32 `protobuf:"fixed32,1,opt,name=orientation_tolerance_degs,json=orientationToleranceDegs,proto3,oneof" json:"orientation_tolerance_degs,omitempty"`
}

func (x *OrientationConstraint) Reset() {
	*x = OrientationConstraint{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrientationConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrientationConstraint) ProtoMessage() {}

func (x *OrientationConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrientationConstraint.ProtoReflect.Descriptor instead.
func (*OrientationConstraint) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{18}
}

func (x *OrientationConstraint) GetOrientationToleranceDegs() float32 {
	if x != nil && x.OrientationToleranceDegs != nil {
		return *x.OrientationToleranceDegs
	}
	return 0
}

// CollisionSpecification is used to selectively apply obstacle avoidance to specific parts of the robot
type CollisionSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pairs of frame which should be allowed to collide with one another
	Allows []*CollisionSpecification_AllowedFrameCollisions `protobuf:"bytes,1,rep,name=allows,proto3" json:"allows,omitempty"`
}

func (x *CollisionSpecification) Reset() {
	*x = CollisionSpecification{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollisionSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollisionSpecification) ProtoMessage() {}

func (x *CollisionSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollisionSpecification.ProtoReflect.Descriptor instead.
func (*CollisionSpecification) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{19}
}

func (x *CollisionSpecification) GetAllows() []*CollisionSpecification_AllowedFrameCollisions {
	if x != nil {
		return x.Allows
	}
	return nil
}

// Describes a plan, its current status & all status changes
// that have occured previously on that plan
type PlanWithStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plan
	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	// The current status of the plan
	Status *PlanStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The prior status changes that have happened during plan execution
	StatusHistory []*PlanStatus `protobuf:"bytes,3,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
}

func (x *PlanWithStatus) Reset() {
	*x = PlanWithStatus{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanWithStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWithStatus) ProtoMessage() {}

func (x *PlanWithStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWithStatus.ProtoReflect.Descriptor instead.
func (*PlanWithStatus) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{20}
}

func (x *PlanWithStatus) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PlanWithStatus) GetStatus() *PlanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PlanWithStatus) GetStatusHistory() []*PlanStatus {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

// PlanStatusWithID describes the state of a given plan at a
// point in time plus the plan_id, component_name and execution_id
// the status is associated with
type PlanStatusWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the plan
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// The component to be moved.
	// Used for tracking & stopping.
	// NOTE: A plan may move more components than just the
	// component_name.
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The unique ID which identifies the plan execution.
	// Multiple plans will share the same execution_id if they were
	// generated due to replanning.
	ExecutionId string      `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status      *PlanStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PlanStatusWithID) Reset() {
	*x = PlanStatusWithID{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanStatusWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanStatusWithID) ProtoMessage() {}

func (x *PlanStatusWithID) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanStatusWithID.ProtoReflect.Descriptor instead.
func (*PlanStatusWithID) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{21}
}

func (x *PlanStatusWithID) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PlanStatusWithID) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *PlanStatusWithID) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *PlanStatusWithID) GetStatus() *PlanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Plan status describes the state of a given plan at a
// point in time
type PlanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the plan execution
	State PlanState `protobuf:"varint,1,opt,name=state,proto3,enum=viam.service.motion.v1.PlanState" json:"state,omitempty"`
	// The time the executing plan transtioned to the state
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The reason for the state change. If motion plan failed
	// this will return the error message.
	// If motion needed to re-plan, this will return
	// the re-plan reason.
	Reason *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *PlanStatus) Reset() {
	*x = PlanStatus{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanStatus) ProtoMessage() {}

func (x *PlanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanStatus.ProtoReflect.Descriptor instead.
func (*PlanStatus) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{22}
}

func (x *PlanStatus) GetState() PlanState {
	if x != nil {
		return x.State
	}
	return PlanState_PLAN_STATE_UNSPECIFIED
}

func (x *PlanStatus) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PlanStatus) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// A plan describes a motion plan
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plan's unique ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The component requested to be moved.
	// Used for tracking & stopping.
	// NOTE: A plan may move more components than just the
	// root component.
	ComponentName *v1.ResourceName `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The unique ID which identifies the execution.
	// Multiple plans will share the same execution_id if they were
	// generated due to replanning
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// The steps of a plan is an ordered list of plan steps
	Steps []*PlanStep `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{23}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetComponentName() *v1.ResourceName {
	if x != nil {
		return x.ComponentName
	}
	return nil
}

func (x *Plan) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *Plan) GetSteps() []*PlanStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type PlanStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A step is the component state each
	// component resource should reach while executing
	// that step of the plan.
	// Keys are the fully qualified component name.
	Step map[string]*ComponentState `protobuf:"bytes,1,rep,name=step,proto3" json:"step,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlanStep) Reset() {
	*x = PlanStep{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanStep) ProtoMessage() {}

func (x *PlanStep) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanStep.ProtoReflect.Descriptor instead.
func (*PlanStep) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{24}
}

func (x *PlanStep) GetStep() map[string]*ComponentState {
	if x != nil {
		return x.Step
	}
	return nil
}

// A pose
type ComponentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose *v1.Pose `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *ComponentState) Reset() {
	*x = ComponentState{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentState) ProtoMessage() {}

func (x *ComponentState) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentState.ProtoReflect.Descriptor instead.
func (*ComponentState) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{25}
}

func (x *ComponentState) GetPose() *v1.Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

type CollisionSpecification_AllowedFrameCollisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame1 string `protobuf:"bytes,1,opt,name=frame1,proto3" json:"frame1,omitempty"`
	Frame2 string `protobuf:"bytes,2,opt,name=frame2,proto3" json:"frame2,omitempty"`
}

func (x *CollisionSpecification_AllowedFrameCollisions) Reset() {
	*x = CollisionSpecification_AllowedFrameCollisions{}
	mi := &file_service_motion_v1_motion_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollisionSpecification_AllowedFrameCollisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollisionSpecification_AllowedFrameCollisions) ProtoMessage() {}

func (x *CollisionSpecification_AllowedFrameCollisions) ProtoReflect() protoreflect.Message {
	mi := &file_service_motion_v1_motion_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollisionSpecification_AllowedFrameCollisions.ProtoReflect.Descriptor instead.
func (*CollisionSpecification_AllowedFrameCollisions) Descriptor() ([]byte, []int) {
	return file_service_motion_v1_motion_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CollisionSpecification_AllowedFrameCollisions) GetFrame1() string {
	if x != nil {
		return x.Frame1
	}
	return ""
}

func (x *CollisionSpecification_AllowedFrameCollisions) GetFrame2() string {
	if x != nil {
		return x.Frame2
	}
	return ""
}

var File_service_motion_v1_motion_proto protoreflect.FileDescriptor

var file_service_motion_v1_motion_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03,
	0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd2, 0x03, 0x0a,
	0x10, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x6c, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x73, 0x6c, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x14,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x36, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4f, 0x62,
	0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x98, 0x04, 0x0a, 0x13, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x1d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x1a, 0x6f, 0x62, 0x73,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x5f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x4d, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x11, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x65, 0x67, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x88, 0x01, 0x01, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68,
	0x7a, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x22, 0xd4, 0x04, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47,
	0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x14, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x13, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x79, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb3, 0x02, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x64, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x15, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbb, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x18, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6d, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x22, 0x79, 0x0a,
	0x15, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x1a, 0x48, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x22, 0xc9, 0x01, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x1a, 0x5f, 0x0a, 0x09, 0x53, 0x74,
	0x65, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x2a, 0x8c, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xc9, 0x09, 0x0a, 0x0d, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x76,
	0x65, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x98, 0x01,
	0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76,
	0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f, 0x76, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x1a, 0x2c, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0xb4, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x42, 0x3f, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x5a, 0x21, 0x67, 0x6f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_motion_v1_motion_proto_rawDescOnce sync.Once
	file_service_motion_v1_motion_proto_rawDescData = file_service_motion_v1_motion_proto_rawDesc
)

func file_service_motion_v1_motion_proto_rawDescGZIP() []byte {
	file_service_motion_v1_motion_proto_rawDescOnce.Do(func() {
		file_service_motion_v1_motion_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_motion_v1_motion_proto_rawDescData)
	})
	return file_service_motion_v1_motion_proto_rawDescData
}

var file_service_motion_v1_motion_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_motion_v1_motion_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_service_motion_v1_motion_proto_goTypes = []any{
	(PlanState)(0),                                        // 0: viam.service.motion.v1.PlanState
	(*MoveRequest)(nil),                                   // 1: viam.service.motion.v1.MoveRequest
	(*MoveResponse)(nil),                                  // 2: viam.service.motion.v1.MoveResponse
	(*MoveOnMapRequest)(nil),                              // 3: viam.service.motion.v1.MoveOnMapRequest
	(*MoveOnMapResponse)(nil),                             // 4: viam.service.motion.v1.MoveOnMapResponse
	(*ObstacleDetector)(nil),                              // 5: viam.service.motion.v1.ObstacleDetector
	(*MotionConfiguration)(nil),                           // 6: viam.service.motion.v1.MotionConfiguration
	(*MoveOnGlobeRequest)(nil),                            // 7: viam.service.motion.v1.MoveOnGlobeRequest
	(*MoveOnGlobeResponse)(nil),                           // 8: viam.service.motion.v1.MoveOnGlobeResponse
	(*GetPoseRequest)(nil),                                // 9: viam.service.motion.v1.GetPoseRequest
	(*GetPoseResponse)(nil),                               // 10: viam.service.motion.v1.GetPoseResponse
	(*StopPlanRequest)(nil),                               // 11: viam.service.motion.v1.StopPlanRequest
	(*StopPlanResponse)(nil),                              // 12: viam.service.motion.v1.StopPlanResponse
	(*ListPlanStatusesRequest)(nil),                       // 13: viam.service.motion.v1.ListPlanStatusesRequest
	(*ListPlanStatusesResponse)(nil),                      // 14: viam.service.motion.v1.ListPlanStatusesResponse
	(*GetPlanRequest)(nil),                                // 15: viam.service.motion.v1.GetPlanRequest
	(*GetPlanResponse)(nil),                               // 16: viam.service.motion.v1.GetPlanResponse
	(*Constraints)(nil),                                   // 17: viam.service.motion.v1.Constraints
	(*LinearConstraint)(nil),                              // 18: viam.service.motion.v1.LinearConstraint
	(*OrientationConstraint)(nil),                         // 19: viam.service.motion.v1.OrientationConstraint
	(*CollisionSpecification)(nil),                        // 20: viam.service.motion.v1.CollisionSpecification
	(*PlanWithStatus)(nil),                                // 21: viam.service.motion.v1.PlanWithStatus
	(*PlanStatusWithID)(nil),                              // 22: viam.service.motion.v1.PlanStatusWithID
	(*PlanStatus)(nil),                                    // 23: viam.service.motion.v1.PlanStatus
	(*Plan)(nil),                                          // 24: viam.service.motion.v1.Plan
	(*PlanStep)(nil),                                      // 25: viam.service.motion.v1.PlanStep
	(*ComponentState)(nil),                                // 26: viam.service.motion.v1.ComponentState
	(*CollisionSpecification_AllowedFrameCollisions)(nil), // 27: viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions
	nil,                           // 28: viam.service.motion.v1.PlanStep.StepEntry
	(*v1.PoseInFrame)(nil),        // 29: viam.common.v1.PoseInFrame
	(*v1.ResourceName)(nil),       // 30: viam.common.v1.ResourceName
	(*v1.WorldState)(nil),         // 31: viam.common.v1.WorldState
	(*structpb.Struct)(nil),       // 32: google.protobuf.Struct
	(*v1.Pose)(nil),               // 33: viam.common.v1.Pose
	(*v1.Geometry)(nil),           // 34: viam.common.v1.Geometry
	(*v1.GeoPoint)(nil),           // 35: viam.common.v1.GeoPoint
	(*v1.GeoGeometry)(nil),        // 36: viam.common.v1.GeoGeometry
	(*v1.Transform)(nil),          // 37: viam.common.v1.Transform
	(*timestamppb.Timestamp)(nil), // 38: google.protobuf.Timestamp
	(*v1.DoCommandRequest)(nil),   // 39: viam.common.v1.DoCommandRequest
	(*v1.DoCommandResponse)(nil),  // 40: viam.common.v1.DoCommandResponse
}
var file_service_motion_v1_motion_proto_depIdxs = []int32{
	29, // 0: viam.service.motion.v1.MoveRequest.destination:type_name -> viam.common.v1.PoseInFrame
	30, // 1: viam.service.motion.v1.MoveRequest.component_name:type_name -> viam.common.v1.ResourceName
	31, // 2: viam.service.motion.v1.MoveRequest.world_state:type_name -> viam.common.v1.WorldState
	17, // 3: viam.service.motion.v1.MoveRequest.constraints:type_name -> viam.service.motion.v1.Constraints
	32, // 4: viam.service.motion.v1.MoveRequest.extra:type_name -> google.protobuf.Struct
	33, // 5: viam.service.motion.v1.MoveOnMapRequest.destination:type_name -> viam.common.v1.Pose
	30, // 6: viam.service.motion.v1.MoveOnMapRequest.component_name:type_name -> viam.common.v1.ResourceName
	30, // 7: viam.service.motion.v1.MoveOnMapRequest.slam_service_name:type_name -> viam.common.v1.ResourceName
	6,  // 8: viam.service.motion.v1.MoveOnMapRequest.motion_configuration:type_name -> viam.service.motion.v1.MotionConfiguration
	34, // 9: viam.service.motion.v1.MoveOnMapRequest.obstacles:type_name -> viam.common.v1.Geometry
	32, // 10: viam.service.motion.v1.MoveOnMapRequest.extra:type_name -> google.protobuf.Struct
	30, // 11: viam.service.motion.v1.ObstacleDetector.vision_service:type_name -> viam.common.v1.ResourceName
	30, // 12: viam.service.motion.v1.ObstacleDetector.camera:type_name -> viam.common.v1.ResourceName
	5,  // 13: viam.service.motion.v1.MotionConfiguration.obstacle_detectors:type_name -> viam.service.motion.v1.ObstacleDetector
	35, // 14: viam.service.motion.v1.MoveOnGlobeRequest.destination:type_name -> viam.common.v1.GeoPoint
	30, // 15: viam.service.motion.v1.MoveOnGlobeRequest.component_name:type_name -> viam.common.v1.ResourceName
	30, // 16: viam.service.motion.v1.MoveOnGlobeRequest.movement_sensor_name:type_name -> viam.common.v1.ResourceName
	36, // 17: viam.service.motion.v1.MoveOnGlobeRequest.obstacles:type_name -> viam.common.v1.GeoGeometry
	6,  // 18: viam.service.motion.v1.MoveOnGlobeRequest.motion_configuration:type_name -> viam.service.motion.v1.MotionConfiguration
	36, // 19: viam.service.motion.v1.MoveOnGlobeRequest.bounding_regions:type_name -> viam.common.v1.GeoGeometry
	32, // 20: viam.service.motion.v1.MoveOnGlobeRequest.extra:type_name -> google.protobuf.Struct
	30, // 21: viam.service.motion.v1.GetPoseRequest.component_name:type_name -> viam.common.v1.ResourceName
	37, // 22: viam.service.motion.v1.GetPoseRequest.supplemental_transforms:type_name -> viam.common.v1.Transform
	32, // 23: viam.service.motion.v1.GetPoseRequest.extra:type_name -> google.protobuf.Struct
	29, // 24: viam.service.motion.v1.GetPoseResponse.pose:type_name -> viam.common.v1.PoseInFrame
	30, // 25: viam.service.motion.v1.StopPlanRequest.component_name:type_name -> viam.common.v1.ResourceName
	32, // 26: viam.service.motion.v1.StopPlanRequest.extra:type_name -> google.protobuf.Struct
	32, // 27: viam.service.motion.v1.ListPlanStatusesRequest.extra:type_name -> google.protobuf.Struct
	22, // 28: viam.service.motion.v1.ListPlanStatusesResponse.plan_statuses_with_ids:type_name -> viam.service.motion.v1.PlanStatusWithID
	30, // 29: viam.service.motion.v1.GetPlanRequest.component_name:type_name -> viam.common.v1.ResourceName
	32, // 30: viam.service.motion.v1.GetPlanRequest.extra:type_name -> google.protobuf.Struct
	21, // 31: viam.service.motion.v1.GetPlanResponse.current_plan_with_status:type_name -> viam.service.motion.v1.PlanWithStatus
	21, // 32: viam.service.motion.v1.GetPlanResponse.replan_history:type_name -> viam.service.motion.v1.PlanWithStatus
	18, // 33: viam.service.motion.v1.Constraints.linear_constraint:type_name -> viam.service.motion.v1.LinearConstraint
	19, // 34: viam.service.motion.v1.Constraints.orientation_constraint:type_name -> viam.service.motion.v1.OrientationConstraint
	20, // 35: viam.service.motion.v1.Constraints.collision_specification:type_name -> viam.service.motion.v1.CollisionSpecification
	27, // 36: viam.service.motion.v1.CollisionSpecification.allows:type_name -> viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions
	24, // 37: viam.service.motion.v1.PlanWithStatus.plan:type_name -> viam.service.motion.v1.Plan
	23, // 38: viam.service.motion.v1.PlanWithStatus.status:type_name -> viam.service.motion.v1.PlanStatus
	23, // 39: viam.service.motion.v1.PlanWithStatus.status_history:type_name -> viam.service.motion.v1.PlanStatus
	30, // 40: viam.service.motion.v1.PlanStatusWithID.component_name:type_name -> viam.common.v1.ResourceName
	23, // 41: viam.service.motion.v1.PlanStatusWithID.status:type_name -> viam.service.motion.v1.PlanStatus
	0,  // 42: viam.service.motion.v1.PlanStatus.state:type_name -> viam.service.motion.v1.PlanState
	38, // 43: viam.service.motion.v1.PlanStatus.timestamp:type_name -> google.protobuf.Timestamp
	30, // 44: viam.service.motion.v1.Plan.component_name:type_name -> viam.common.v1.ResourceName
	25, // 45: viam.service.motion.v1.Plan.steps:type_name -> viam.service.motion.v1.PlanStep
	28, // 46: viam.service.motion.v1.PlanStep.step:type_name -> viam.service.motion.v1.PlanStep.StepEntry
	33, // 47: viam.service.motion.v1.ComponentState.pose:type_name -> viam.common.v1.Pose
	26, // 48: viam.service.motion.v1.PlanStep.StepEntry.value:type_name -> viam.service.motion.v1.ComponentState
	1,  // 49: viam.service.motion.v1.MotionService.Move:input_type -> viam.service.motion.v1.MoveRequest
	3,  // 50: viam.service.motion.v1.MotionService.MoveOnMap:input_type -> viam.service.motion.v1.MoveOnMapRequest
	7,  // 51: viam.service.motion.v1.MotionService.MoveOnGlobe:input_type -> viam.service.motion.v1.MoveOnGlobeRequest
	9,  // 52: viam.service.motion.v1.MotionService.GetPose:input_type -> viam.service.motion.v1.GetPoseRequest
	11, // 53: viam.service.motion.v1.MotionService.StopPlan:input_type -> viam.service.motion.v1.StopPlanRequest
	13, // 54: viam.service.motion.v1.MotionService.ListPlanStatuses:input_type -> viam.service.motion.v1.ListPlanStatusesRequest
	15, // 55: viam.service.motion.v1.MotionService.GetPlan:input_type -> viam.service.motion.v1.GetPlanRequest
	39, // 56: viam.service.motion.v1.MotionService.DoCommand:input_type -> viam.common.v1.DoCommandRequest
	2,  // 57: viam.service.motion.v1.MotionService.Move:output_type -> viam.service.motion.v1.MoveResponse
	4,  // 58: viam.service.motion.v1.MotionService.MoveOnMap:output_type -> viam.service.motion.v1.MoveOnMapResponse
	8,  // 59: viam.service.motion.v1.MotionService.MoveOnGlobe:output_type -> viam.service.motion.v1.MoveOnGlobeResponse
	10, // 60: viam.service.motion.v1.MotionService.GetPose:output_type -> viam.service.motion.v1.GetPoseResponse
	12, // 61: viam.service.motion.v1.MotionService.StopPlan:output_type -> viam.service.motion.v1.StopPlanResponse
	14, // 62: viam.service.motion.v1.MotionService.ListPlanStatuses:output_type -> viam.service.motion.v1.ListPlanStatusesResponse
	16, // 63: viam.service.motion.v1.MotionService.GetPlan:output_type -> viam.service.motion.v1.GetPlanResponse
	40, // 64: viam.service.motion.v1.MotionService.DoCommand:output_type -> viam.common.v1.DoCommandResponse
	57, // [57:65] is the sub-list for method output_type
	49, // [49:57] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_service_motion_v1_motion_proto_init() }
func file_service_motion_v1_motion_proto_init() {
	if File_service_motion_v1_motion_proto != nil {
		return
	}
	file_service_motion_v1_motion_proto_msgTypes[0].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[2].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[5].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[6].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[14].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[17].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[18].OneofWrappers = []any{}
	file_service_motion_v1_motion_proto_msgTypes[22].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_motion_v1_motion_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_motion_v1_motion_proto_goTypes,
		DependencyIndexes: file_service_motion_v1_motion_proto_depIdxs,
		EnumInfos:         file_service_motion_v1_motion_proto_enumTypes,
		MessageInfos:      file_service_motion_v1_motion_proto_msgTypes,
	}.Build()
	File_service_motion_v1_motion_proto = out.File
	file_service_motion_v1_motion_proto_rawDesc = nil
	file_service_motion_v1_motion_proto_goTypes = nil
	file_service_motion_v1_motion_proto_depIdxs = nil
}
