// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/shell/v1/shell.proto

package v1

import (
	context "context"
	v1 "go.viam.com/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShellServiceClient is the client API for ShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellServiceClient interface {
	// Shell starts a shell with an input and output pipe.
	Shell(ctx context.Context, opts ...grpc.CallOption) (ShellService_ShellClient, error)
	// CopyFilesToMachines copies a stream of files from a client to the connected-to machine.
	// Initially, metadata is sent to describe the destination in the filesystem in addition
	// to what kind of file(s) are being sent.
	// Once metadata is sent, the file transfer can proceed where one-by-one, file data is sent
	// until EOF per file.
	// After each file is sent, the machine must respond with an ACK before the next file can
	// be sent. This provides back-pressure and ordering.
	// The order in which individual files are sent does not matter; that is, if traversing a
	// directory, copying depth-first, breadth-first, or any other algorithm does not matter.
	// Permissions and metadata on files copied are only preserved if the preserve option is
	// set in the initial request metadata.
	CopyFilesToMachine(ctx context.Context, opts ...grpc.CallOption) (ShellService_CopyFilesToMachineClient, error)
	// CopyFilesFromMachine copies a stream of files from a connected-to machine to the calling client.
	// Essentially, it is the inverse of CopyFilesToMachine with the same ACK mechanism in reverse.
	// The initial metadata request will request the paths to copy along with if permissions should
	// be preserved (and consequently sent over the wire).
	CopyFilesFromMachine(ctx context.Context, opts ...grpc.CallOption) (ShellService_CopyFilesFromMachineClient, error)
	// DoCommand sends/receives arbitrary commands
	DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error)
}

type shellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShellServiceClient(cc grpc.ClientConnInterface) ShellServiceClient {
	return &shellServiceClient{cc}
}

func (c *shellServiceClient) Shell(ctx context.Context, opts ...grpc.CallOption) (ShellService_ShellClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[0], "/viam.service.shell.v1.ShellService/Shell", opts...)
	if err != nil {
		return nil, err
	}
	x := &shellServiceShellClient{stream}
	return x, nil
}

type ShellService_ShellClient interface {
	Send(*ShellRequest) error
	Recv() (*ShellResponse, error)
	grpc.ClientStream
}

type shellServiceShellClient struct {
	grpc.ClientStream
}

func (x *shellServiceShellClient) Send(m *ShellRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shellServiceShellClient) Recv() (*ShellResponse, error) {
	m := new(ShellResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shellServiceClient) CopyFilesToMachine(ctx context.Context, opts ...grpc.CallOption) (ShellService_CopyFilesToMachineClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[1], "/viam.service.shell.v1.ShellService/CopyFilesToMachine", opts...)
	if err != nil {
		return nil, err
	}
	x := &shellServiceCopyFilesToMachineClient{stream}
	return x, nil
}

type ShellService_CopyFilesToMachineClient interface {
	Send(*CopyFilesToMachineRequest) error
	Recv() (*CopyFilesToMachineResponse, error)
	grpc.ClientStream
}

type shellServiceCopyFilesToMachineClient struct {
	grpc.ClientStream
}

func (x *shellServiceCopyFilesToMachineClient) Send(m *CopyFilesToMachineRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shellServiceCopyFilesToMachineClient) Recv() (*CopyFilesToMachineResponse, error) {
	m := new(CopyFilesToMachineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shellServiceClient) CopyFilesFromMachine(ctx context.Context, opts ...grpc.CallOption) (ShellService_CopyFilesFromMachineClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShellService_ServiceDesc.Streams[2], "/viam.service.shell.v1.ShellService/CopyFilesFromMachine", opts...)
	if err != nil {
		return nil, err
	}
	x := &shellServiceCopyFilesFromMachineClient{stream}
	return x, nil
}

type ShellService_CopyFilesFromMachineClient interface {
	Send(*CopyFilesFromMachineRequest) error
	Recv() (*CopyFilesFromMachineResponse, error)
	grpc.ClientStream
}

type shellServiceCopyFilesFromMachineClient struct {
	grpc.ClientStream
}

func (x *shellServiceCopyFilesFromMachineClient) Send(m *CopyFilesFromMachineRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shellServiceCopyFilesFromMachineClient) Recv() (*CopyFilesFromMachineResponse, error) {
	m := new(CopyFilesFromMachineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shellServiceClient) DoCommand(ctx context.Context, in *v1.DoCommandRequest, opts ...grpc.CallOption) (*v1.DoCommandResponse, error) {
	out := new(v1.DoCommandResponse)
	err := c.cc.Invoke(ctx, "/viam.service.shell.v1.ShellService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellServiceServer is the server API for ShellService service.
// All implementations must embed UnimplementedShellServiceServer
// for forward compatibility
type ShellServiceServer interface {
	// Shell starts a shell with an input and output pipe.
	Shell(ShellService_ShellServer) error
	// CopyFilesToMachines copies a stream of files from a client to the connected-to machine.
	// Initially, metadata is sent to describe the destination in the filesystem in addition
	// to what kind of file(s) are being sent.
	// Once metadata is sent, the file transfer can proceed where one-by-one, file data is sent
	// until EOF per file.
	// After each file is sent, the machine must respond with an ACK before the next file can
	// be sent. This provides back-pressure and ordering.
	// The order in which individual files are sent does not matter; that is, if traversing a
	// directory, copying depth-first, breadth-first, or any other algorithm does not matter.
	// Permissions and metadata on files copied are only preserved if the preserve option is
	// set in the initial request metadata.
	CopyFilesToMachine(ShellService_CopyFilesToMachineServer) error
	// CopyFilesFromMachine copies a stream of files from a connected-to machine to the calling client.
	// Essentially, it is the inverse of CopyFilesToMachine with the same ACK mechanism in reverse.
	// The initial metadata request will request the paths to copy along with if permissions should
	// be preserved (and consequently sent over the wire).
	CopyFilesFromMachine(ShellService_CopyFilesFromMachineServer) error
	// DoCommand sends/receives arbitrary commands
	DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error)
	mustEmbedUnimplementedShellServiceServer()
}

// UnimplementedShellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShellServiceServer struct {
}

func (UnimplementedShellServiceServer) Shell(ShellService_ShellServer) error {
	return status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedShellServiceServer) CopyFilesToMachine(ShellService_CopyFilesToMachineServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFilesToMachine not implemented")
}
func (UnimplementedShellServiceServer) CopyFilesFromMachine(ShellService_CopyFilesFromMachineServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFilesFromMachine not implemented")
}
func (UnimplementedShellServiceServer) DoCommand(context.Context, *v1.DoCommandRequest) (*v1.DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedShellServiceServer) mustEmbedUnimplementedShellServiceServer() {}

// UnsafeShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellServiceServer will
// result in compilation errors.
type UnsafeShellServiceServer interface {
	mustEmbedUnimplementedShellServiceServer()
}

func RegisterShellServiceServer(s grpc.ServiceRegistrar, srv ShellServiceServer) {
	s.RegisterService(&ShellService_ServiceDesc, srv)
}

func _ShellService_Shell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).Shell(&shellServiceShellServer{stream})
}

type ShellService_ShellServer interface {
	Send(*ShellResponse) error
	Recv() (*ShellRequest, error)
	grpc.ServerStream
}

type shellServiceShellServer struct {
	grpc.ServerStream
}

func (x *shellServiceShellServer) Send(m *ShellResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shellServiceShellServer) Recv() (*ShellRequest, error) {
	m := new(ShellRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShellService_CopyFilesToMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).CopyFilesToMachine(&shellServiceCopyFilesToMachineServer{stream})
}

type ShellService_CopyFilesToMachineServer interface {
	Send(*CopyFilesToMachineResponse) error
	Recv() (*CopyFilesToMachineRequest, error)
	grpc.ServerStream
}

type shellServiceCopyFilesToMachineServer struct {
	grpc.ServerStream
}

func (x *shellServiceCopyFilesToMachineServer) Send(m *CopyFilesToMachineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shellServiceCopyFilesToMachineServer) Recv() (*CopyFilesToMachineRequest, error) {
	m := new(CopyFilesToMachineRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShellService_CopyFilesFromMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServiceServer).CopyFilesFromMachine(&shellServiceCopyFilesFromMachineServer{stream})
}

type ShellService_CopyFilesFromMachineServer interface {
	Send(*CopyFilesFromMachineResponse) error
	Recv() (*CopyFilesFromMachineRequest, error)
	grpc.ServerStream
}

type shellServiceCopyFilesFromMachineServer struct {
	grpc.ServerStream
}

func (x *shellServiceCopyFilesFromMachineServer) Send(m *CopyFilesFromMachineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shellServiceCopyFilesFromMachineServer) Recv() (*CopyFilesFromMachineRequest, error) {
	m := new(CopyFilesFromMachineRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShellService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viam.service.shell.v1.ShellService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServiceServer).DoCommand(ctx, req.(*v1.DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellService_ServiceDesc is the grpc.ServiceDesc for ShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viam.service.shell.v1.ShellService",
	HandlerType: (*ShellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCommand",
			Handler:    _ShellService_DoCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shell",
			Handler:       _ShellService_Shell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFilesToMachine",
			Handler:       _ShellService_CopyFilesToMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyFilesFromMachine",
			Handler:       _ShellService_CopyFilesFromMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/shell/v1/shell.proto",
}
