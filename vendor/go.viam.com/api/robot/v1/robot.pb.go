// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: robot/v1/robot.proto

package v1

import (
	v1 "go.viam.com/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerConnectionType int32

const (
	PeerConnectionType_PEER_CONNECTION_TYPE_UNSPECIFIED PeerConnectionType = 0
	PeerConnectionType_PEER_CONNECTION_TYPE_GRPC        PeerConnectionType = 1
	PeerConnectionType_PEER_CONNECTION_TYPE_WEBRTC      PeerConnectionType = 2
)

// Enum value maps for PeerConnectionType.
var (
	PeerConnectionType_name = map[int32]string{
		0: "PEER_CONNECTION_TYPE_UNSPECIFIED",
		1: "PEER_CONNECTION_TYPE_GRPC",
		2: "PEER_CONNECTION_TYPE_WEBRTC",
	}
	PeerConnectionType_value = map[string]int32{
		"PEER_CONNECTION_TYPE_UNSPECIFIED": 0,
		"PEER_CONNECTION_TYPE_GRPC":        1,
		"PEER_CONNECTION_TYPE_WEBRTC":      2,
	}
)

func (x PeerConnectionType) Enum() *PeerConnectionType {
	p := new(PeerConnectionType)
	*p = x
	return p
}

func (x PeerConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_robot_v1_robot_proto_enumTypes[0].Descriptor()
}

func (PeerConnectionType) Type() protoreflect.EnumType {
	return &file_robot_v1_robot_proto_enumTypes[0]
}

func (x PeerConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerConnectionType.Descriptor instead.
func (PeerConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{0}
}

type GetMachineStatusResponse_State int32

const (
	GetMachineStatusResponse_STATE_UNSPECIFIED GetMachineStatusResponse_State = 0
	// the machine is reachable but still in the process of configuring initial
	// modules and resources.
	GetMachineStatusResponse_STATE_INITIALIZING GetMachineStatusResponse_State = 1
	// the machine has finished initializing.
	GetMachineStatusResponse_STATE_RUNNING GetMachineStatusResponse_State = 2
)

// Enum value maps for GetMachineStatusResponse_State.
var (
	GetMachineStatusResponse_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_INITIALIZING",
		2: "STATE_RUNNING",
	}
	GetMachineStatusResponse_State_value = map[string]int32{
		"STATE_UNSPECIFIED":  0,
		"STATE_INITIALIZING": 1,
		"STATE_RUNNING":      2,
	}
)

func (x GetMachineStatusResponse_State) Enum() *GetMachineStatusResponse_State {
	p := new(GetMachineStatusResponse_State)
	*p = x
	return p
}

func (x GetMachineStatusResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMachineStatusResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_robot_v1_robot_proto_enumTypes[1].Descriptor()
}

func (GetMachineStatusResponse_State) Type() protoreflect.EnumType {
	return &file_robot_v1_robot_proto_enumTypes[1]
}

func (x GetMachineStatusResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMachineStatusResponse_State.Descriptor instead.
func (GetMachineStatusResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{52, 0}
}

type ResourceStatus_State int32

const (
	ResourceStatus_STATE_UNSPECIFIED ResourceStatus_State = 0
	// a newly created resource.
	ResourceStatus_STATE_UNCONFIGURED ResourceStatus_State = 1
	// a resource that is being configured.
	ResourceStatus_STATE_CONFIGURING ResourceStatus_State = 2
	// a resource that has been successfully configured once, and is not re-configuring,
	// being removed, or unhealthy.
	ResourceStatus_STATE_READY ResourceStatus_State = 3
	// a resource that is being removed from the robot.
	ResourceStatus_STATE_REMOVING ResourceStatus_State = 4
	// a resource that is in an unhealthy state.
	ResourceStatus_STATE_UNHEALTHY ResourceStatus_State = 5
)

// Enum value maps for ResourceStatus_State.
var (
	ResourceStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_UNCONFIGURED",
		2: "STATE_CONFIGURING",
		3: "STATE_READY",
		4: "STATE_REMOVING",
		5: "STATE_UNHEALTHY",
	}
	ResourceStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED":  0,
		"STATE_UNCONFIGURED": 1,
		"STATE_CONFIGURING":  2,
		"STATE_READY":        3,
		"STATE_REMOVING":     4,
		"STATE_UNHEALTHY":    5,
	}
)

func (x ResourceStatus_State) Enum() *ResourceStatus_State {
	p := new(ResourceStatus_State)
	*p = x
	return p
}

func (x ResourceStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_robot_v1_robot_proto_enumTypes[2].Descriptor()
}

func (ResourceStatus_State) Type() protoreflect.EnumType {
	return &file_robot_v1_robot_proto_enumTypes[2]
}

func (x ResourceStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceStatus_State.Descriptor instead.
func (ResourceStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{53, 0}
}

type TunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPort uint32 `protobuf:"varint,1,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Data            []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TunnelRequest) Reset() {
	*x = TunnelRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelRequest) ProtoMessage() {}

func (x *TunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelRequest.ProtoReflect.Descriptor instead.
func (*TunnelRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelRequest) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *TunnelRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TunnelResponse) Reset() {
	*x = TunnelResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelResponse) ProtoMessage() {}

func (x *TunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelResponse.ProtoReflect.Descriptor instead.
func (*TunnelResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTunnelsRequest) Reset() {
	*x = ListTunnelsRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsRequest) ProtoMessage() {}

func (x *ListTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsRequest.ProtoReflect.Descriptor instead.
func (*ListTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{2}
}

type ListTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels []*Tunnel `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (x *ListTunnelsResponse) Reset() {
	*x = ListTunnelsResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsResponse) ProtoMessage() {}

func (x *ListTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsResponse.ProtoReflect.Descriptor instead.
func (*ListTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{3}
}

func (x *ListTunnelsResponse) GetTunnels() []*Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port              uint32               `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	ConnectionTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	mi := &file_robot_v1_robot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{4}
}

func (x *Tunnel) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Tunnel) GetConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

type FrameSystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is an experimental API message
	Frame      *v1.Transform    `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	Kinematics *structpb.Struct `protobuf:"bytes,2,opt,name=kinematics,proto3" json:"kinematics,omitempty"`
}

func (x *FrameSystemConfig) Reset() {
	*x = FrameSystemConfig{}
	mi := &file_robot_v1_robot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameSystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSystemConfig) ProtoMessage() {}

func (x *FrameSystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSystemConfig.ProtoReflect.Descriptor instead.
func (*FrameSystemConfig) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{5}
}

func (x *FrameSystemConfig) GetFrame() *v1.Transform {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *FrameSystemConfig) GetKinematics() *structpb.Struct {
	if x != nil {
		return x.Kinematics
	}
	return nil
}

type FrameSystemConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pose information on any additional reference frames that are needed
	// to supplement the robot's frame system
	SupplementalTransforms []*v1.Transform `protobuf:"bytes,1,rep,name=supplemental_transforms,json=supplementalTransforms,proto3" json:"supplemental_transforms,omitempty"`
}

func (x *FrameSystemConfigRequest) Reset() {
	*x = FrameSystemConfigRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameSystemConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSystemConfigRequest) ProtoMessage() {}

func (x *FrameSystemConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSystemConfigRequest.ProtoReflect.Descriptor instead.
func (*FrameSystemConfigRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{6}
}

func (x *FrameSystemConfigRequest) GetSupplementalTransforms() []*v1.Transform {
	if x != nil {
		return x.SupplementalTransforms
	}
	return nil
}

type FrameSystemConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameSystemConfigs []*FrameSystemConfig `protobuf:"bytes,1,rep,name=frame_system_configs,json=frameSystemConfigs,proto3" json:"frame_system_configs,omitempty"`
}

func (x *FrameSystemConfigResponse) Reset() {
	*x = FrameSystemConfigResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameSystemConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSystemConfigResponse) ProtoMessage() {}

func (x *FrameSystemConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSystemConfigResponse.ProtoReflect.Descriptor instead.
func (*FrameSystemConfigResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{7}
}

func (x *FrameSystemConfigResponse) GetFrameSystemConfigs() []*FrameSystemConfig {
	if x != nil {
		return x.FrameSystemConfigs
	}
	return nil
}

type TransformPoseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the original pose to transform along with the reference frame in
	// which it was observed
	Source *v1.PoseInFrame `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// the reference frame into which the source pose should be transformed,
	// if unset this defaults to the "world" reference frame
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// pose information on any additional reference frames that are needed
	// to perform the transform
	SupplementalTransforms []*v1.Transform `protobuf:"bytes,3,rep,name=supplemental_transforms,json=supplementalTransforms,proto3" json:"supplemental_transforms,omitempty"`
}

func (x *TransformPoseRequest) Reset() {
	*x = TransformPoseRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformPoseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPoseRequest) ProtoMessage() {}

func (x *TransformPoseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPoseRequest.ProtoReflect.Descriptor instead.
func (*TransformPoseRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{8}
}

func (x *TransformPoseRequest) GetSource() *v1.PoseInFrame {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TransformPoseRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TransformPoseRequest) GetSupplementalTransforms() []*v1.Transform {
	if x != nil {
		return x.SupplementalTransforms
	}
	return nil
}

type TransformPoseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose *v1.PoseInFrame `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *TransformPoseResponse) Reset() {
	*x = TransformPoseResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformPoseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPoseResponse) ProtoMessage() {}

func (x *TransformPoseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPoseResponse.ProtoReflect.Descriptor instead.
func (*TransformPoseResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{9}
}

func (x *TransformPoseResponse) GetPose() *v1.PoseInFrame {
	if x != nil {
		return x.Pose
	}
	return nil
}

type TransformPCDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the point clouds to transform. This should be in the PCD format
	// encoded into bytes: https://pointclouds.org/documentation/tutorials/pcd_file_format.html
	PointCloudPcd []byte `protobuf:"bytes,1,opt,name=point_cloud_pcd,json=pointCloudPcd,proto3" json:"point_cloud_pcd,omitempty"`
	// the reference frame of the point cloud.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// the reference frame into which the source data should be transformed, if unset this defaults to the "world" reference frame.
	// Do not move the robot between the generation of the initial pointcloud and the receipt
	// of the transformed pointcloud because that will make the transformations inaccurate
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TransformPCDRequest) Reset() {
	*x = TransformPCDRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformPCDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPCDRequest) ProtoMessage() {}

func (x *TransformPCDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPCDRequest.ProtoReflect.Descriptor instead.
func (*TransformPCDRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{10}
}

func (x *TransformPCDRequest) GetPointCloudPcd() []byte {
	if x != nil {
		return x.PointCloudPcd
	}
	return nil
}

func (x *TransformPCDRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TransformPCDRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type TransformPCDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointCloudPcd []byte `protobuf:"bytes,1,opt,name=point_cloud_pcd,json=pointCloudPcd,proto3" json:"point_cloud_pcd,omitempty"`
}

func (x *TransformPCDResponse) Reset() {
	*x = TransformPCDResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformPCDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPCDResponse) ProtoMessage() {}

func (x *TransformPCDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPCDResponse.ProtoReflect.Descriptor instead.
func (*TransformPCDResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{11}
}

func (x *TransformPCDResponse) GetPointCloudPcd() []byte {
	if x != nil {
		return x.PointCloudPcd
	}
	return nil
}

type ResourceNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceNamesRequest) Reset() {
	*x = ResourceNamesRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceNamesRequest) ProtoMessage() {}

func (x *ResourceNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceNamesRequest.ProtoReflect.Descriptor instead.
func (*ResourceNamesRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{12}
}

type ResourceNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*v1.ResourceName `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ResourceNamesResponse) Reset() {
	*x = ResourceNamesResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceNamesResponse) ProtoMessage() {}

func (x *ResourceNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceNamesResponse.ProtoReflect.Descriptor instead.
func (*ResourceNamesResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceNamesResponse) GetResources() []*v1.ResourceName {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ResourceRPCSubtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtype      *v1.ResourceName `protobuf:"bytes,1,opt,name=subtype,proto3" json:"subtype,omitempty"`
	ProtoService string           `protobuf:"bytes,2,opt,name=proto_service,json=protoService,proto3" json:"proto_service,omitempty"`
}

func (x *ResourceRPCSubtype) Reset() {
	*x = ResourceRPCSubtype{}
	mi := &file_robot_v1_robot_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRPCSubtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRPCSubtype) ProtoMessage() {}

func (x *ResourceRPCSubtype) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRPCSubtype.ProtoReflect.Descriptor instead.
func (*ResourceRPCSubtype) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{14}
}

func (x *ResourceRPCSubtype) GetSubtype() *v1.ResourceName {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *ResourceRPCSubtype) GetProtoService() string {
	if x != nil {
		return x.ProtoService
	}
	return ""
}

type ResourceRPCSubtypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceRPCSubtypesRequest) Reset() {
	*x = ResourceRPCSubtypesRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRPCSubtypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRPCSubtypesRequest) ProtoMessage() {}

func (x *ResourceRPCSubtypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRPCSubtypesRequest.ProtoReflect.Descriptor instead.
func (*ResourceRPCSubtypesRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{15}
}

type ResourceRPCSubtypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceRpcSubtypes []*ResourceRPCSubtype `protobuf:"bytes,1,rep,name=resource_rpc_subtypes,json=resourceRpcSubtypes,proto3" json:"resource_rpc_subtypes,omitempty"`
}

func (x *ResourceRPCSubtypesResponse) Reset() {
	*x = ResourceRPCSubtypesResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRPCSubtypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRPCSubtypesResponse) ProtoMessage() {}

func (x *ResourceRPCSubtypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRPCSubtypesResponse.ProtoReflect.Descriptor instead.
func (*ResourceRPCSubtypesResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceRPCSubtypesResponse) GetResourceRpcSubtypes() []*ResourceRPCSubtype {
	if x != nil {
		return x.ResourceRpcSubtypes
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method    string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Arguments *structpb.Struct       `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Started   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	SessionId *string                `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_robot_v1_robot_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{17}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Operation) GetArguments() *structpb.Struct {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Operation) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Operation) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type GetOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOperationsRequest) Reset() {
	*x = GetOperationsRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsRequest) ProtoMessage() {}

func (x *GetOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsRequest.ProtoReflect.Descriptor instead.
func (*GetOperationsRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{18}
}

type GetOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *GetOperationsResponse) Reset() {
	*x = GetOperationsResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsResponse) ProtoMessage() {}

func (x *GetOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsResponse.ProtoReflect.Descriptor instead.
func (*GetOperationsResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{19}
}

func (x *GetOperationsResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type CancelOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelOperationRequest) Reset() {
	*x = CancelOperationRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOperationRequest) ProtoMessage() {}

func (x *CancelOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOperationRequest.ProtoReflect.Descriptor instead.
func (*CancelOperationRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{20}
}

func (x *CancelOperationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelOperationResponse) Reset() {
	*x = CancelOperationResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOperationResponse) ProtoMessage() {}

func (x *CancelOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOperationResponse.ProtoReflect.Descriptor instead.
func (*CancelOperationResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{21}
}

type BlockForOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlockForOperationRequest) Reset() {
	*x = BlockForOperationRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockForOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockForOperationRequest) ProtoMessage() {}

func (x *BlockForOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockForOperationRequest.ProtoReflect.Descriptor instead.
func (*BlockForOperationRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{22}
}

func (x *BlockForOperationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BlockForOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockForOperationResponse) Reset() {
	*x = BlockForOperationResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockForOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockForOperationResponse) ProtoMessage() {}

func (x *BlockForOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockForOperationResponse.ProtoReflect.Descriptor instead.
func (*BlockForOperationResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{23}
}

type PeerConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          PeerConnectionType `protobuf:"varint,1,opt,name=type,proto3,enum=viam.robot.v1.PeerConnectionType" json:"type,omitempty"`
	RemoteAddress *string            `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3,oneof" json:"remote_address,omitempty"`
	LocalAddress  *string            `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3,oneof" json:"local_address,omitempty"`
}

func (x *PeerConnectionInfo) Reset() {
	*x = PeerConnectionInfo{}
	mi := &file_robot_v1_robot_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnectionInfo) ProtoMessage() {}

func (x *PeerConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnectionInfo.ProtoReflect.Descriptor instead.
func (*PeerConnectionInfo) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{24}
}

func (x *PeerConnectionInfo) GetType() PeerConnectionType {
	if x != nil {
		return x.Type
	}
	return PeerConnectionType_PEER_CONNECTION_TYPE_UNSPECIFIED
}

func (x *PeerConnectionInfo) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *PeerConnectionInfo) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PeerConnectionInfo *PeerConnectionInfo `protobuf:"bytes,2,opt,name=peer_connection_info,json=peerConnectionInfo,proto3,oneof" json:"peer_connection_info,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_robot_v1_robot_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{25}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetPeerConnectionInfo() *PeerConnectionInfo {
	if x != nil {
		return x.PeerConnectionInfo
	}
	return nil
}

type GetSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSessionsRequest) Reset() {
	*x = GetSessionsRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionsRequest) ProtoMessage() {}

func (x *GetSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionsRequest.ProtoReflect.Descriptor instead.
func (*GetSessionsRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{26}
}

type GetSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetSessionsResponse) Reset() {
	*x = GetSessionsResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionsResponse) ProtoMessage() {}

func (x *GetSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionsResponse.ProtoReflect.Descriptor instead.
func (*GetSessionsResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{27}
}

func (x *GetSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type ModuleModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName      string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Model           string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Api             string `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`
	FromLocalModule bool   `protobuf:"varint,4,opt,name=from_local_module,json=fromLocalModule,proto3" json:"from_local_module,omitempty"`
}

func (x *ModuleModel) Reset() {
	*x = ModuleModel{}
	mi := &file_robot_v1_robot_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleModel) ProtoMessage() {}

func (x *ModuleModel) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleModel.ProtoReflect.Descriptor instead.
func (*ModuleModel) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{28}
}

func (x *ModuleModel) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *ModuleModel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ModuleModel) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ModuleModel) GetFromLocalModule() bool {
	if x != nil {
		return x.FromLocalModule
	}
	return false
}

type GetModelsFromModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetModelsFromModulesRequest) Reset() {
	*x = GetModelsFromModulesRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelsFromModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsFromModulesRequest) ProtoMessage() {}

func (x *GetModelsFromModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsFromModulesRequest.ProtoReflect.Descriptor instead.
func (*GetModelsFromModulesRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{29}
}

type GetModelsFromModulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models []*ModuleModel `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *GetModelsFromModulesResponse) Reset() {
	*x = GetModelsFromModulesResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelsFromModulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsFromModulesResponse) ProtoMessage() {}

func (x *GetModelsFromModulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsFromModulesResponse.ProtoReflect.Descriptor instead.
func (*GetModelsFromModulesResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{30}
}

func (x *GetModelsFromModulesResponse) GetModels() []*ModuleModel {
	if x != nil {
		return x.Models
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *v1.ResourceName       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status           *structpb.Struct       `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastReconfigured *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_reconfigured,json=lastReconfigured,proto3" json:"last_reconfigured,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_robot_v1_robot_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{31}
}

func (x *Status) GetName() *v1.ResourceName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Status) GetStatus() *structpb.Struct {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Status) GetLastReconfigured() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReconfigured
	}
	return nil
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceNames []*v1.ResourceName `protobuf:"bytes,1,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{32}
}

func (x *GetStatusRequest) GetResourceNames() []*v1.ResourceName {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*Status `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{33}
}

func (x *GetStatusResponse) GetStatus() []*Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type StreamStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceNames []*v1.ResourceName   `protobuf:"bytes,1,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	Every         *durationpb.Duration `protobuf:"bytes,2,opt,name=every,proto3" json:"every,omitempty"` // how often to send a new status.
}

func (x *StreamStatusRequest) Reset() {
	*x = StreamStatusRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatusRequest) ProtoMessage() {}

func (x *StreamStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatusRequest.ProtoReflect.Descriptor instead.
func (*StreamStatusRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{34}
}

func (x *StreamStatusRequest) GetResourceNames() []*v1.ResourceName {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

func (x *StreamStatusRequest) GetEvery() *durationpb.Duration {
	if x != nil {
		return x.Every
	}
	return nil
}

type StreamStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*Status `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamStatusResponse) Reset() {
	*x = StreamStatusResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatusResponse) ProtoMessage() {}

func (x *StreamStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatusResponse.ProtoReflect.Descriptor instead.
func (*StreamStatusResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{35}
}

func (x *StreamStatusResponse) GetStatus() []*Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type StopExtraParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *v1.ResourceName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params *structpb.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *StopExtraParameters) Reset() {
	*x = StopExtraParameters{}
	mi := &file_robot_v1_robot_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopExtraParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExtraParameters) ProtoMessage() {}

func (x *StopExtraParameters) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExtraParameters.ProtoReflect.Descriptor instead.
func (*StopExtraParameters) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{36}
}

func (x *StopExtraParameters) GetName() *v1.ResourceName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StopExtraParameters) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

type StopAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extra []*StopExtraParameters `protobuf:"bytes,99,rep,name=extra,proto3" json:"extra,omitempty"`
}

func (x *StopAllRequest) Reset() {
	*x = StopAllRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllRequest) ProtoMessage() {}

func (x *StopAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllRequest.ProtoReflect.Descriptor instead.
func (*StopAllRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{37}
}

func (x *StopAllRequest) GetExtra() []*StopExtraParameters {
	if x != nil {
		return x.Extra
	}
	return nil
}

type StopAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopAllResponse) Reset() {
	*x = StopAllResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllResponse) ProtoMessage() {}

func (x *StopAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllResponse.ProtoReflect.Descriptor instead.
func (*StopAllResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{38}
}

type StartSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resume can be used to attempt to continue a stream after a disconnection event. If
	// a session is not found, a new one will be created and returned.
	Resume string `protobuf:"bytes,1,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *StartSessionRequest) Reset() {
	*x = StartSessionRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionRequest) ProtoMessage() {}

func (x *StartSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionRequest.ProtoReflect.Descriptor instead.
func (*StartSessionRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{39}
}

func (x *StartSessionRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type StartSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HeartbeatWindow *durationpb.Duration `protobuf:"bytes,2,opt,name=heartbeat_window,json=heartbeatWindow,proto3" json:"heartbeat_window,omitempty"`
}

func (x *StartSessionResponse) Reset() {
	*x = StartSessionResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSessionResponse) ProtoMessage() {}

func (x *StartSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSessionResponse.ProtoReflect.Descriptor instead.
func (*StartSessionResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{40}
}

func (x *StartSessionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartSessionResponse) GetHeartbeatWindow() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatWindow
	}
	return nil
}

type SendSessionHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendSessionHeartbeatRequest) Reset() {
	*x = SendSessionHeartbeatRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSessionHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionHeartbeatRequest) ProtoMessage() {}

func (x *SendSessionHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SendSessionHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{41}
}

func (x *SendSessionHeartbeatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendSessionHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendSessionHeartbeatResponse) Reset() {
	*x = SendSessionHeartbeatResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSessionHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionHeartbeatResponse) ProtoMessage() {}

func (x *SendSessionHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*SendSessionHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{42}
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*v1.LogEntry `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{43}
}

func (x *LogRequest) GetLogs() []*v1.LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{44}
}

type GetCloudMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCloudMetadataRequest) Reset() {
	*x = GetCloudMetadataRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudMetadataRequest) ProtoMessage() {}

func (x *GetCloudMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetCloudMetadataRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{45}
}

type GetCloudMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use machine_part_id field.
	//
	// Deprecated: Marked as deprecated in robot/v1/robot.proto.
	RobotPartId   string `protobuf:"bytes,1,opt,name=robot_part_id,json=robotPartId,proto3" json:"robot_part_id,omitempty"`
	PrimaryOrgId  string `protobuf:"bytes,2,opt,name=primary_org_id,json=primaryOrgId,proto3" json:"primary_org_id,omitempty"`
	LocationId    string `protobuf:"bytes,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	MachineId     string `protobuf:"bytes,4,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	MachinePartId string `protobuf:"bytes,5,opt,name=machine_part_id,json=machinePartId,proto3" json:"machine_part_id,omitempty"`
}

func (x *GetCloudMetadataResponse) Reset() {
	*x = GetCloudMetadataResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudMetadataResponse) ProtoMessage() {}

func (x *GetCloudMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetCloudMetadataResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{46}
}

// Deprecated: Marked as deprecated in robot/v1/robot.proto.
func (x *GetCloudMetadataResponse) GetRobotPartId() string {
	if x != nil {
		return x.RobotPartId
	}
	return ""
}

func (x *GetCloudMetadataResponse) GetPrimaryOrgId() string {
	if x != nil {
		return x.PrimaryOrgId
	}
	return ""
}

func (x *GetCloudMetadataResponse) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *GetCloudMetadataResponse) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *GetCloudMetadataResponse) GetMachinePartId() string {
	if x != nil {
		return x.MachinePartId
	}
	return ""
}

type RestartModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOrName:
	//
	//	*RestartModuleRequest_ModuleId
	//	*RestartModuleRequest_ModuleName
	IdOrName isRestartModuleRequest_IdOrName `protobuf_oneof:"id_or_name"`
}

func (x *RestartModuleRequest) Reset() {
	*x = RestartModuleRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartModuleRequest) ProtoMessage() {}

func (x *RestartModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartModuleRequest.ProtoReflect.Descriptor instead.
func (*RestartModuleRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{47}
}

func (m *RestartModuleRequest) GetIdOrName() isRestartModuleRequest_IdOrName {
	if m != nil {
		return m.IdOrName
	}
	return nil
}

func (x *RestartModuleRequest) GetModuleId() string {
	if x, ok := x.GetIdOrName().(*RestartModuleRequest_ModuleId); ok {
		return x.ModuleId
	}
	return ""
}

func (x *RestartModuleRequest) GetModuleName() string {
	if x, ok := x.GetIdOrName().(*RestartModuleRequest_ModuleName); ok {
		return x.ModuleName
	}
	return ""
}

type isRestartModuleRequest_IdOrName interface {
	isRestartModuleRequest_IdOrName()
}

type RestartModuleRequest_ModuleId struct {
	// ID is for registry modules, name for local modules
	ModuleId string `protobuf:"bytes,1,opt,name=module_id,json=moduleId,proto3,oneof"`
}

type RestartModuleRequest_ModuleName struct {
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3,oneof"`
}

func (*RestartModuleRequest_ModuleId) isRestartModuleRequest_IdOrName() {}

func (*RestartModuleRequest_ModuleName) isRestartModuleRequest_IdOrName() {}

type RestartModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartModuleResponse) Reset() {
	*x = RestartModuleResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartModuleResponse) ProtoMessage() {}

func (x *RestartModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartModuleResponse.ProtoReflect.Descriptor instead.
func (*RestartModuleResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{48}
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{49}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{50}
}

type GetMachineStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMachineStatusRequest) Reset() {
	*x = GetMachineStatusRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMachineStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineStatusRequest) ProtoMessage() {}

func (x *GetMachineStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMachineStatusRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{51}
}

type GetMachineStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*ResourceStatus              `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	Config    *ConfigStatus                  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	State     GetMachineStatusResponse_State `protobuf:"varint,3,opt,name=state,proto3,enum=viam.robot.v1.GetMachineStatusResponse_State" json:"state,omitempty"`
}

func (x *GetMachineStatusResponse) Reset() {
	*x = GetMachineStatusResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMachineStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineStatusResponse) ProtoMessage() {}

func (x *GetMachineStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMachineStatusResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{52}
}

func (x *GetMachineStatusResponse) GetResources() []*ResourceStatus {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *GetMachineStatusResponse) GetConfig() *ConfigStatus {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetMachineStatusResponse) GetState() GetMachineStatusResponse_State {
	if x != nil {
		return x.State
	}
	return GetMachineStatusResponse_STATE_UNSPECIFIED
}

type ResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource name.
	Name *v1.ResourceName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// current state.
	State ResourceStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=viam.robot.v1.ResourceStatus_State" json:"state,omitempty"`
	// state transition timestamp.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// revision of the last config that successfully updated this resource.
	Revision string `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	// error details for a resource. This is guaranteed to be null if the
	// resource is ready and non-null if the resource unhealthy.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// infomation about resource orgID, locationID and partID
	CloudMetadata *GetCloudMetadataResponse `protobuf:"bytes,6,opt,name=cloud_metadata,json=cloudMetadata,proto3,oneof" json:"cloud_metadata,omitempty"`
}

func (x *ResourceStatus) Reset() {
	*x = ResourceStatus{}
	mi := &file_robot_v1_robot_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatus) ProtoMessage() {}

func (x *ResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatus.ProtoReflect.Descriptor instead.
func (*ResourceStatus) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{53}
}

func (x *ResourceStatus) GetName() *v1.ResourceName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ResourceStatus) GetState() ResourceStatus_State {
	if x != nil {
		return x.State
	}
	return ResourceStatus_STATE_UNSPECIFIED
}

func (x *ResourceStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ResourceStatus) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ResourceStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ResourceStatus) GetCloudMetadata() *GetCloudMetadataResponse {
	if x != nil {
		return x.CloudMetadata
	}
	return nil
}

type ConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision of the last config that the machine successfully ingested.
	Revision string `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// config ingestion timestamp.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *ConfigStatus) Reset() {
	*x = ConfigStatus{}
	mi := &file_robot_v1_robot_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigStatus) ProtoMessage() {}

func (x *ConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigStatus.ProtoReflect.Descriptor instead.
func (*ConfigStatus) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{54}
}

func (x *ConfigStatus) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ConfigStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	mi := &file_robot_v1_robot_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{55}
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// platform type of viam-server (ie. `rdk` or `micro-rdk`).
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// version of viam-server. If built without a version, it will be dev-<git hash>.
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ApiVersion string `protobuf:"bytes,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	mi := &file_robot_v1_robot_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_robot_v1_robot_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_robot_v1_robot_proto_rawDescGZIP(), []int{56}
}

func (x *GetVersionResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetVersionResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

var File_robot_v1_robot_proto protoreflect.FileDescriptor

var file_robot_v1_robot_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0d, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x0e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x66,
	0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x7d, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x6b, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x73, 0x22, 0x6e, 0x0a, 0x18, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x16, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0x6f, 0x0a, 0x19, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x50, 0x43, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x63, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x63, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x43, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x63, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x63, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x1c, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x70, 0x63, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc6, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x1d,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x72, 0x79, 0x22, 0x45, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xe0, 0x03, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x22, 0x87, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x05, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x7a, 0x0a, 0x12, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x50, 0x43, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x42, 0x52, 0x54, 0x43, 0x10, 0x02, 0x32, 0x8e, 0x17, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61,
	0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x50, 0x43, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1e, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x8d, 0x01, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1d, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x93, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x43, 0x44, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x50, 0x43, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x43, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x70, 0x63, 0x64, 0x12, 0x6e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x02, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x88, 0x02, 0x01, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c,
	0x6c, 0x12, 0x1d, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x12,
	0x76, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x22, 0x15, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x2a, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x24, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x56, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x19,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x61, 0x6d,
	0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f,
	0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x12,
	0x88, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7f, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b,
	0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x22, 0x15, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x6f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x76, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x69,
	0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x77,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x2e,
	0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x2d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x69, 0x61, 0x6d, 0x2e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x5a, 0x18, 0x67, 0x6f,
	0x2e, 0x76, 0x69, 0x61, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_robot_v1_robot_proto_rawDescOnce sync.Once
	file_robot_v1_robot_proto_rawDescData = file_robot_v1_robot_proto_rawDesc
)

func file_robot_v1_robot_proto_rawDescGZIP() []byte {
	file_robot_v1_robot_proto_rawDescOnce.Do(func() {
		file_robot_v1_robot_proto_rawDescData = protoimpl.X.CompressGZIP(file_robot_v1_robot_proto_rawDescData)
	})
	return file_robot_v1_robot_proto_rawDescData
}

var file_robot_v1_robot_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_robot_v1_robot_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_robot_v1_robot_proto_goTypes = []any{
	(PeerConnectionType)(0),              // 0: viam.robot.v1.PeerConnectionType
	(GetMachineStatusResponse_State)(0),  // 1: viam.robot.v1.GetMachineStatusResponse.State
	(ResourceStatus_State)(0),            // 2: viam.robot.v1.ResourceStatus.State
	(*TunnelRequest)(nil),                // 3: viam.robot.v1.TunnelRequest
	(*TunnelResponse)(nil),               // 4: viam.robot.v1.TunnelResponse
	(*ListTunnelsRequest)(nil),           // 5: viam.robot.v1.ListTunnelsRequest
	(*ListTunnelsResponse)(nil),          // 6: viam.robot.v1.ListTunnelsResponse
	(*Tunnel)(nil),                       // 7: viam.robot.v1.Tunnel
	(*FrameSystemConfig)(nil),            // 8: viam.robot.v1.FrameSystemConfig
	(*FrameSystemConfigRequest)(nil),     // 9: viam.robot.v1.FrameSystemConfigRequest
	(*FrameSystemConfigResponse)(nil),    // 10: viam.robot.v1.FrameSystemConfigResponse
	(*TransformPoseRequest)(nil),         // 11: viam.robot.v1.TransformPoseRequest
	(*TransformPoseResponse)(nil),        // 12: viam.robot.v1.TransformPoseResponse
	(*TransformPCDRequest)(nil),          // 13: viam.robot.v1.TransformPCDRequest
	(*TransformPCDResponse)(nil),         // 14: viam.robot.v1.TransformPCDResponse
	(*ResourceNamesRequest)(nil),         // 15: viam.robot.v1.ResourceNamesRequest
	(*ResourceNamesResponse)(nil),        // 16: viam.robot.v1.ResourceNamesResponse
	(*ResourceRPCSubtype)(nil),           // 17: viam.robot.v1.ResourceRPCSubtype
	(*ResourceRPCSubtypesRequest)(nil),   // 18: viam.robot.v1.ResourceRPCSubtypesRequest
	(*ResourceRPCSubtypesResponse)(nil),  // 19: viam.robot.v1.ResourceRPCSubtypesResponse
	(*Operation)(nil),                    // 20: viam.robot.v1.Operation
	(*GetOperationsRequest)(nil),         // 21: viam.robot.v1.GetOperationsRequest
	(*GetOperationsResponse)(nil),        // 22: viam.robot.v1.GetOperationsResponse
	(*CancelOperationRequest)(nil),       // 23: viam.robot.v1.CancelOperationRequest
	(*CancelOperationResponse)(nil),      // 24: viam.robot.v1.CancelOperationResponse
	(*BlockForOperationRequest)(nil),     // 25: viam.robot.v1.BlockForOperationRequest
	(*BlockForOperationResponse)(nil),    // 26: viam.robot.v1.BlockForOperationResponse
	(*PeerConnectionInfo)(nil),           // 27: viam.robot.v1.PeerConnectionInfo
	(*Session)(nil),                      // 28: viam.robot.v1.Session
	(*GetSessionsRequest)(nil),           // 29: viam.robot.v1.GetSessionsRequest
	(*GetSessionsResponse)(nil),          // 30: viam.robot.v1.GetSessionsResponse
	(*ModuleModel)(nil),                  // 31: viam.robot.v1.ModuleModel
	(*GetModelsFromModulesRequest)(nil),  // 32: viam.robot.v1.GetModelsFromModulesRequest
	(*GetModelsFromModulesResponse)(nil), // 33: viam.robot.v1.GetModelsFromModulesResponse
	(*Status)(nil),                       // 34: viam.robot.v1.Status
	(*GetStatusRequest)(nil),             // 35: viam.robot.v1.GetStatusRequest
	(*GetStatusResponse)(nil),            // 36: viam.robot.v1.GetStatusResponse
	(*StreamStatusRequest)(nil),          // 37: viam.robot.v1.StreamStatusRequest
	(*StreamStatusResponse)(nil),         // 38: viam.robot.v1.StreamStatusResponse
	(*StopExtraParameters)(nil),          // 39: viam.robot.v1.StopExtraParameters
	(*StopAllRequest)(nil),               // 40: viam.robot.v1.StopAllRequest
	(*StopAllResponse)(nil),              // 41: viam.robot.v1.StopAllResponse
	(*StartSessionRequest)(nil),          // 42: viam.robot.v1.StartSessionRequest
	(*StartSessionResponse)(nil),         // 43: viam.robot.v1.StartSessionResponse
	(*SendSessionHeartbeatRequest)(nil),  // 44: viam.robot.v1.SendSessionHeartbeatRequest
	(*SendSessionHeartbeatResponse)(nil), // 45: viam.robot.v1.SendSessionHeartbeatResponse
	(*LogRequest)(nil),                   // 46: viam.robot.v1.LogRequest
	(*LogResponse)(nil),                  // 47: viam.robot.v1.LogResponse
	(*GetCloudMetadataRequest)(nil),      // 48: viam.robot.v1.GetCloudMetadataRequest
	(*GetCloudMetadataResponse)(nil),     // 49: viam.robot.v1.GetCloudMetadataResponse
	(*RestartModuleRequest)(nil),         // 50: viam.robot.v1.RestartModuleRequest
	(*RestartModuleResponse)(nil),        // 51: viam.robot.v1.RestartModuleResponse
	(*ShutdownRequest)(nil),              // 52: viam.robot.v1.ShutdownRequest
	(*ShutdownResponse)(nil),             // 53: viam.robot.v1.ShutdownResponse
	(*GetMachineStatusRequest)(nil),      // 54: viam.robot.v1.GetMachineStatusRequest
	(*GetMachineStatusResponse)(nil),     // 55: viam.robot.v1.GetMachineStatusResponse
	(*ResourceStatus)(nil),               // 56: viam.robot.v1.ResourceStatus
	(*ConfigStatus)(nil),                 // 57: viam.robot.v1.ConfigStatus
	(*GetVersionRequest)(nil),            // 58: viam.robot.v1.GetVersionRequest
	(*GetVersionResponse)(nil),           // 59: viam.robot.v1.GetVersionResponse
	(*durationpb.Duration)(nil),          // 60: google.protobuf.Duration
	(*v1.Transform)(nil),                 // 61: viam.common.v1.Transform
	(*structpb.Struct)(nil),              // 62: google.protobuf.Struct
	(*v1.PoseInFrame)(nil),               // 63: viam.common.v1.PoseInFrame
	(*v1.ResourceName)(nil),              // 64: viam.common.v1.ResourceName
	(*timestamppb.Timestamp)(nil),        // 65: google.protobuf.Timestamp
	(*v1.LogEntry)(nil),                  // 66: viam.common.v1.LogEntry
}
var file_robot_v1_robot_proto_depIdxs = []int32{
	7,  // 0: viam.robot.v1.ListTunnelsResponse.tunnels:type_name -> viam.robot.v1.Tunnel
	60, // 1: viam.robot.v1.Tunnel.connection_timeout:type_name -> google.protobuf.Duration
	61, // 2: viam.robot.v1.FrameSystemConfig.frame:type_name -> viam.common.v1.Transform
	62, // 3: viam.robot.v1.FrameSystemConfig.kinematics:type_name -> google.protobuf.Struct
	61, // 4: viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms:type_name -> viam.common.v1.Transform
	8,  // 5: viam.robot.v1.FrameSystemConfigResponse.frame_system_configs:type_name -> viam.robot.v1.FrameSystemConfig
	63, // 6: viam.robot.v1.TransformPoseRequest.source:type_name -> viam.common.v1.PoseInFrame
	61, // 7: viam.robot.v1.TransformPoseRequest.supplemental_transforms:type_name -> viam.common.v1.Transform
	63, // 8: viam.robot.v1.TransformPoseResponse.pose:type_name -> viam.common.v1.PoseInFrame
	64, // 9: viam.robot.v1.ResourceNamesResponse.resources:type_name -> viam.common.v1.ResourceName
	64, // 10: viam.robot.v1.ResourceRPCSubtype.subtype:type_name -> viam.common.v1.ResourceName
	17, // 11: viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes:type_name -> viam.robot.v1.ResourceRPCSubtype
	62, // 12: viam.robot.v1.Operation.arguments:type_name -> google.protobuf.Struct
	65, // 13: viam.robot.v1.Operation.started:type_name -> google.protobuf.Timestamp
	20, // 14: viam.robot.v1.GetOperationsResponse.operations:type_name -> viam.robot.v1.Operation
	0,  // 15: viam.robot.v1.PeerConnectionInfo.type:type_name -> viam.robot.v1.PeerConnectionType
	27, // 16: viam.robot.v1.Session.peer_connection_info:type_name -> viam.robot.v1.PeerConnectionInfo
	28, // 17: viam.robot.v1.GetSessionsResponse.sessions:type_name -> viam.robot.v1.Session
	31, // 18: viam.robot.v1.GetModelsFromModulesResponse.models:type_name -> viam.robot.v1.ModuleModel
	64, // 19: viam.robot.v1.Status.name:type_name -> viam.common.v1.ResourceName
	62, // 20: viam.robot.v1.Status.status:type_name -> google.protobuf.Struct
	65, // 21: viam.robot.v1.Status.last_reconfigured:type_name -> google.protobuf.Timestamp
	64, // 22: viam.robot.v1.GetStatusRequest.resource_names:type_name -> viam.common.v1.ResourceName
	34, // 23: viam.robot.v1.GetStatusResponse.status:type_name -> viam.robot.v1.Status
	64, // 24: viam.robot.v1.StreamStatusRequest.resource_names:type_name -> viam.common.v1.ResourceName
	60, // 25: viam.robot.v1.StreamStatusRequest.every:type_name -> google.protobuf.Duration
	34, // 26: viam.robot.v1.StreamStatusResponse.status:type_name -> viam.robot.v1.Status
	64, // 27: viam.robot.v1.StopExtraParameters.name:type_name -> viam.common.v1.ResourceName
	62, // 28: viam.robot.v1.StopExtraParameters.params:type_name -> google.protobuf.Struct
	39, // 29: viam.robot.v1.StopAllRequest.extra:type_name -> viam.robot.v1.StopExtraParameters
	60, // 30: viam.robot.v1.StartSessionResponse.heartbeat_window:type_name -> google.protobuf.Duration
	66, // 31: viam.robot.v1.LogRequest.logs:type_name -> viam.common.v1.LogEntry
	56, // 32: viam.robot.v1.GetMachineStatusResponse.resources:type_name -> viam.robot.v1.ResourceStatus
	57, // 33: viam.robot.v1.GetMachineStatusResponse.config:type_name -> viam.robot.v1.ConfigStatus
	1,  // 34: viam.robot.v1.GetMachineStatusResponse.state:type_name -> viam.robot.v1.GetMachineStatusResponse.State
	64, // 35: viam.robot.v1.ResourceStatus.name:type_name -> viam.common.v1.ResourceName
	2,  // 36: viam.robot.v1.ResourceStatus.state:type_name -> viam.robot.v1.ResourceStatus.State
	65, // 37: viam.robot.v1.ResourceStatus.last_updated:type_name -> google.protobuf.Timestamp
	49, // 38: viam.robot.v1.ResourceStatus.cloud_metadata:type_name -> viam.robot.v1.GetCloudMetadataResponse
	65, // 39: viam.robot.v1.ConfigStatus.last_updated:type_name -> google.protobuf.Timestamp
	21, // 40: viam.robot.v1.RobotService.GetOperations:input_type -> viam.robot.v1.GetOperationsRequest
	29, // 41: viam.robot.v1.RobotService.GetSessions:input_type -> viam.robot.v1.GetSessionsRequest
	15, // 42: viam.robot.v1.RobotService.ResourceNames:input_type -> viam.robot.v1.ResourceNamesRequest
	18, // 43: viam.robot.v1.RobotService.ResourceRPCSubtypes:input_type -> viam.robot.v1.ResourceRPCSubtypesRequest
	23, // 44: viam.robot.v1.RobotService.CancelOperation:input_type -> viam.robot.v1.CancelOperationRequest
	25, // 45: viam.robot.v1.RobotService.BlockForOperation:input_type -> viam.robot.v1.BlockForOperationRequest
	32, // 46: viam.robot.v1.RobotService.GetModelsFromModules:input_type -> viam.robot.v1.GetModelsFromModulesRequest
	9,  // 47: viam.robot.v1.RobotService.FrameSystemConfig:input_type -> viam.robot.v1.FrameSystemConfigRequest
	11, // 48: viam.robot.v1.RobotService.TransformPose:input_type -> viam.robot.v1.TransformPoseRequest
	13, // 49: viam.robot.v1.RobotService.TransformPCD:input_type -> viam.robot.v1.TransformPCDRequest
	35, // 50: viam.robot.v1.RobotService.GetStatus:input_type -> viam.robot.v1.GetStatusRequest
	37, // 51: viam.robot.v1.RobotService.StreamStatus:input_type -> viam.robot.v1.StreamStatusRequest
	40, // 52: viam.robot.v1.RobotService.StopAll:input_type -> viam.robot.v1.StopAllRequest
	42, // 53: viam.robot.v1.RobotService.StartSession:input_type -> viam.robot.v1.StartSessionRequest
	44, // 54: viam.robot.v1.RobotService.SendSessionHeartbeat:input_type -> viam.robot.v1.SendSessionHeartbeatRequest
	46, // 55: viam.robot.v1.RobotService.Log:input_type -> viam.robot.v1.LogRequest
	48, // 56: viam.robot.v1.RobotService.GetCloudMetadata:input_type -> viam.robot.v1.GetCloudMetadataRequest
	50, // 57: viam.robot.v1.RobotService.RestartModule:input_type -> viam.robot.v1.RestartModuleRequest
	52, // 58: viam.robot.v1.RobotService.Shutdown:input_type -> viam.robot.v1.ShutdownRequest
	54, // 59: viam.robot.v1.RobotService.GetMachineStatus:input_type -> viam.robot.v1.GetMachineStatusRequest
	58, // 60: viam.robot.v1.RobotService.GetVersion:input_type -> viam.robot.v1.GetVersionRequest
	3,  // 61: viam.robot.v1.RobotService.Tunnel:input_type -> viam.robot.v1.TunnelRequest
	5,  // 62: viam.robot.v1.RobotService.ListTunnels:input_type -> viam.robot.v1.ListTunnelsRequest
	22, // 63: viam.robot.v1.RobotService.GetOperations:output_type -> viam.robot.v1.GetOperationsResponse
	30, // 64: viam.robot.v1.RobotService.GetSessions:output_type -> viam.robot.v1.GetSessionsResponse
	16, // 65: viam.robot.v1.RobotService.ResourceNames:output_type -> viam.robot.v1.ResourceNamesResponse
	19, // 66: viam.robot.v1.RobotService.ResourceRPCSubtypes:output_type -> viam.robot.v1.ResourceRPCSubtypesResponse
	24, // 67: viam.robot.v1.RobotService.CancelOperation:output_type -> viam.robot.v1.CancelOperationResponse
	26, // 68: viam.robot.v1.RobotService.BlockForOperation:output_type -> viam.robot.v1.BlockForOperationResponse
	33, // 69: viam.robot.v1.RobotService.GetModelsFromModules:output_type -> viam.robot.v1.GetModelsFromModulesResponse
	10, // 70: viam.robot.v1.RobotService.FrameSystemConfig:output_type -> viam.robot.v1.FrameSystemConfigResponse
	12, // 71: viam.robot.v1.RobotService.TransformPose:output_type -> viam.robot.v1.TransformPoseResponse
	14, // 72: viam.robot.v1.RobotService.TransformPCD:output_type -> viam.robot.v1.TransformPCDResponse
	36, // 73: viam.robot.v1.RobotService.GetStatus:output_type -> viam.robot.v1.GetStatusResponse
	38, // 74: viam.robot.v1.RobotService.StreamStatus:output_type -> viam.robot.v1.StreamStatusResponse
	41, // 75: viam.robot.v1.RobotService.StopAll:output_type -> viam.robot.v1.StopAllResponse
	43, // 76: viam.robot.v1.RobotService.StartSession:output_type -> viam.robot.v1.StartSessionResponse
	45, // 77: viam.robot.v1.RobotService.SendSessionHeartbeat:output_type -> viam.robot.v1.SendSessionHeartbeatResponse
	47, // 78: viam.robot.v1.RobotService.Log:output_type -> viam.robot.v1.LogResponse
	49, // 79: viam.robot.v1.RobotService.GetCloudMetadata:output_type -> viam.robot.v1.GetCloudMetadataResponse
	51, // 80: viam.robot.v1.RobotService.RestartModule:output_type -> viam.robot.v1.RestartModuleResponse
	53, // 81: viam.robot.v1.RobotService.Shutdown:output_type -> viam.robot.v1.ShutdownResponse
	55, // 82: viam.robot.v1.RobotService.GetMachineStatus:output_type -> viam.robot.v1.GetMachineStatusResponse
	59, // 83: viam.robot.v1.RobotService.GetVersion:output_type -> viam.robot.v1.GetVersionResponse
	4,  // 84: viam.robot.v1.RobotService.Tunnel:output_type -> viam.robot.v1.TunnelResponse
	6,  // 85: viam.robot.v1.RobotService.ListTunnels:output_type -> viam.robot.v1.ListTunnelsResponse
	63, // [63:86] is the sub-list for method output_type
	40, // [40:63] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_robot_v1_robot_proto_init() }
func file_robot_v1_robot_proto_init() {
	if File_robot_v1_robot_proto != nil {
		return
	}
	file_robot_v1_robot_proto_msgTypes[17].OneofWrappers = []any{}
	file_robot_v1_robot_proto_msgTypes[24].OneofWrappers = []any{}
	file_robot_v1_robot_proto_msgTypes[25].OneofWrappers = []any{}
	file_robot_v1_robot_proto_msgTypes[47].OneofWrappers = []any{
		(*RestartModuleRequest_ModuleId)(nil),
		(*RestartModuleRequest_ModuleName)(nil),
	}
	file_robot_v1_robot_proto_msgTypes[53].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_robot_v1_robot_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_robot_v1_robot_proto_goTypes,
		DependencyIndexes: file_robot_v1_robot_proto_depIdxs,
		EnumInfos:         file_robot_v1_robot_proto_enumTypes,
		MessageInfos:      file_robot_v1_robot_proto_msgTypes,
	}.Build()
	File_robot_v1_robot_proto = out.File
	file_robot_v1_robot_proto_rawDesc = nil
	file_robot_v1_robot_proto_goTypes = nil
	file_robot_v1_robot_proto_depIdxs = nil
}
