// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/component/gizmo/v1/gizmo.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GizmoServiceClient is the client API for GizmoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GizmoServiceClient interface {
	DoOne(ctx context.Context, in *DoOneRequest, opts ...grpc.CallOption) (*DoOneResponse, error)
	DoOneClientStream(ctx context.Context, opts ...grpc.CallOption) (GizmoService_DoOneClientStreamClient, error)
	DoOneServerStream(ctx context.Context, in *DoOneServerStreamRequest, opts ...grpc.CallOption) (GizmoService_DoOneServerStreamClient, error)
	DoOneBiDiStream(ctx context.Context, opts ...grpc.CallOption) (GizmoService_DoOneBiDiStreamClient, error)
	DoTwo(ctx context.Context, in *DoTwoRequest, opts ...grpc.CallOption) (*DoTwoResponse, error)
	DoCommand(ctx context.Context, in *DoCommandRequest, opts ...grpc.CallOption) (*DoCommandResponse, error)
}

type gizmoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGizmoServiceClient(cc grpc.ClientConnInterface) GizmoServiceClient {
	return &gizmoServiceClient{cc}
}

func (c *gizmoServiceClient) DoOne(ctx context.Context, in *DoOneRequest, opts ...grpc.CallOption) (*DoOneResponse, error) {
	out := new(DoOneResponse)
	err := c.cc.Invoke(ctx, "/acme.component.gizmo.v1.GizmoService/DoOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gizmoServiceClient) DoOneClientStream(ctx context.Context, opts ...grpc.CallOption) (GizmoService_DoOneClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GizmoService_ServiceDesc.Streams[0], "/acme.component.gizmo.v1.GizmoService/DoOneClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gizmoServiceDoOneClientStreamClient{stream}
	return x, nil
}

type GizmoService_DoOneClientStreamClient interface {
	Send(*DoOneClientStreamRequest) error
	CloseAndRecv() (*DoOneClientStreamResponse, error)
	grpc.ClientStream
}

type gizmoServiceDoOneClientStreamClient struct {
	grpc.ClientStream
}

func (x *gizmoServiceDoOneClientStreamClient) Send(m *DoOneClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gizmoServiceDoOneClientStreamClient) CloseAndRecv() (*DoOneClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DoOneClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gizmoServiceClient) DoOneServerStream(ctx context.Context, in *DoOneServerStreamRequest, opts ...grpc.CallOption) (GizmoService_DoOneServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GizmoService_ServiceDesc.Streams[1], "/acme.component.gizmo.v1.GizmoService/DoOneServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gizmoServiceDoOneServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GizmoService_DoOneServerStreamClient interface {
	Recv() (*DoOneServerStreamResponse, error)
	grpc.ClientStream
}

type gizmoServiceDoOneServerStreamClient struct {
	grpc.ClientStream
}

func (x *gizmoServiceDoOneServerStreamClient) Recv() (*DoOneServerStreamResponse, error) {
	m := new(DoOneServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gizmoServiceClient) DoOneBiDiStream(ctx context.Context, opts ...grpc.CallOption) (GizmoService_DoOneBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GizmoService_ServiceDesc.Streams[2], "/acme.component.gizmo.v1.GizmoService/DoOneBiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gizmoServiceDoOneBiDiStreamClient{stream}
	return x, nil
}

type GizmoService_DoOneBiDiStreamClient interface {
	Send(*DoOneBiDiStreamRequest) error
	Recv() (*DoOneBiDiStreamResponse, error)
	grpc.ClientStream
}

type gizmoServiceDoOneBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *gizmoServiceDoOneBiDiStreamClient) Send(m *DoOneBiDiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gizmoServiceDoOneBiDiStreamClient) Recv() (*DoOneBiDiStreamResponse, error) {
	m := new(DoOneBiDiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gizmoServiceClient) DoTwo(ctx context.Context, in *DoTwoRequest, opts ...grpc.CallOption) (*DoTwoResponse, error) {
	out := new(DoTwoResponse)
	err := c.cc.Invoke(ctx, "/acme.component.gizmo.v1.GizmoService/DoTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gizmoServiceClient) DoCommand(ctx context.Context, in *DoCommandRequest, opts ...grpc.CallOption) (*DoCommandResponse, error) {
	out := new(DoCommandResponse)
	err := c.cc.Invoke(ctx, "/acme.component.gizmo.v1.GizmoService/DoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GizmoServiceServer is the server API for GizmoService service.
// All implementations must embed UnimplementedGizmoServiceServer
// for forward compatibility
type GizmoServiceServer interface {
	DoOne(context.Context, *DoOneRequest) (*DoOneResponse, error)
	DoOneClientStream(GizmoService_DoOneClientStreamServer) error
	DoOneServerStream(*DoOneServerStreamRequest, GizmoService_DoOneServerStreamServer) error
	DoOneBiDiStream(GizmoService_DoOneBiDiStreamServer) error
	DoTwo(context.Context, *DoTwoRequest) (*DoTwoResponse, error)
	DoCommand(context.Context, *DoCommandRequest) (*DoCommandResponse, error)
	mustEmbedUnimplementedGizmoServiceServer()
}

// UnimplementedGizmoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGizmoServiceServer struct {
}

func (UnimplementedGizmoServiceServer) DoOne(context.Context, *DoOneRequest) (*DoOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOne not implemented")
}
func (UnimplementedGizmoServiceServer) DoOneClientStream(GizmoService_DoOneClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneClientStream not implemented")
}
func (UnimplementedGizmoServiceServer) DoOneServerStream(*DoOneServerStreamRequest, GizmoService_DoOneServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneServerStream not implemented")
}
func (UnimplementedGizmoServiceServer) DoOneBiDiStream(GizmoService_DoOneBiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneBiDiStream not implemented")
}
func (UnimplementedGizmoServiceServer) DoTwo(context.Context, *DoTwoRequest) (*DoTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoTwo not implemented")
}
func (UnimplementedGizmoServiceServer) DoCommand(context.Context, *DoCommandRequest) (*DoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommand not implemented")
}
func (UnimplementedGizmoServiceServer) mustEmbedUnimplementedGizmoServiceServer() {}

// UnsafeGizmoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GizmoServiceServer will
// result in compilation errors.
type UnsafeGizmoServiceServer interface {
	mustEmbedUnimplementedGizmoServiceServer()
}

func RegisterGizmoServiceServer(s grpc.ServiceRegistrar, srv GizmoServiceServer) {
	s.RegisterService(&GizmoService_ServiceDesc, srv)
}

func _GizmoService_DoOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GizmoServiceServer).DoOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.component.gizmo.v1.GizmoService/DoOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GizmoServiceServer).DoOne(ctx, req.(*DoOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GizmoService_DoOneClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GizmoServiceServer).DoOneClientStream(&gizmoServiceDoOneClientStreamServer{stream})
}

type GizmoService_DoOneClientStreamServer interface {
	SendAndClose(*DoOneClientStreamResponse) error
	Recv() (*DoOneClientStreamRequest, error)
	grpc.ServerStream
}

type gizmoServiceDoOneClientStreamServer struct {
	grpc.ServerStream
}

func (x *gizmoServiceDoOneClientStreamServer) SendAndClose(m *DoOneClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gizmoServiceDoOneClientStreamServer) Recv() (*DoOneClientStreamRequest, error) {
	m := new(DoOneClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GizmoService_DoOneServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DoOneServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GizmoServiceServer).DoOneServerStream(m, &gizmoServiceDoOneServerStreamServer{stream})
}

type GizmoService_DoOneServerStreamServer interface {
	Send(*DoOneServerStreamResponse) error
	grpc.ServerStream
}

type gizmoServiceDoOneServerStreamServer struct {
	grpc.ServerStream
}

func (x *gizmoServiceDoOneServerStreamServer) Send(m *DoOneServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GizmoService_DoOneBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GizmoServiceServer).DoOneBiDiStream(&gizmoServiceDoOneBiDiStreamServer{stream})
}

type GizmoService_DoOneBiDiStreamServer interface {
	Send(*DoOneBiDiStreamResponse) error
	Recv() (*DoOneBiDiStreamRequest, error)
	grpc.ServerStream
}

type gizmoServiceDoOneBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *gizmoServiceDoOneBiDiStreamServer) Send(m *DoOneBiDiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gizmoServiceDoOneBiDiStreamServer) Recv() (*DoOneBiDiStreamRequest, error) {
	m := new(DoOneBiDiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GizmoService_DoTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GizmoServiceServer).DoTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.component.gizmo.v1.GizmoService/DoTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GizmoServiceServer).DoTwo(ctx, req.(*DoTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GizmoService_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GizmoServiceServer).DoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.component.gizmo.v1.GizmoService/DoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GizmoServiceServer).DoCommand(ctx, req.(*DoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GizmoService_ServiceDesc is the grpc.ServiceDesc for GizmoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GizmoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acme.component.gizmo.v1.GizmoService",
	HandlerType: (*GizmoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoOne",
			Handler:    _GizmoService_DoOne_Handler,
		},
		{
			MethodName: "DoTwo",
			Handler:    _GizmoService_DoTwo_Handler,
		},
		{
			MethodName: "DoCommand",
			Handler:    _GizmoService_DoCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoOneClientStream",
			Handler:       _GizmoService_DoOneClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoOneServerStream",
			Handler:       _GizmoService_DoOneServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoOneBiDiStream",
			Handler:       _GizmoService_DoOneBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/component/gizmo/v1/gizmo.proto",
}
