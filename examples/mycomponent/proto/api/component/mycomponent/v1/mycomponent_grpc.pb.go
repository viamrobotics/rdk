// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/api/component/mycomponent/v1/mycomponent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyComponentServiceClient is the client API for MyComponentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyComponentServiceClient interface {
	DoOne(ctx context.Context, in *DoOneRequest, opts ...grpc.CallOption) (*DoOneResponse, error)
	DoOneClientStream(ctx context.Context, opts ...grpc.CallOption) (MyComponentService_DoOneClientStreamClient, error)
	DoOneServerStream(ctx context.Context, in *DoOneServerStreamRequest, opts ...grpc.CallOption) (MyComponentService_DoOneServerStreamClient, error)
	DoOneBiDiStream(ctx context.Context, opts ...grpc.CallOption) (MyComponentService_DoOneBiDiStreamClient, error)
	DoTwo(ctx context.Context, in *DoTwoRequest, opts ...grpc.CallOption) (*DoTwoResponse, error)
}

type myComponentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyComponentServiceClient(cc grpc.ClientConnInterface) MyComponentServiceClient {
	return &myComponentServiceClient{cc}
}

func (c *myComponentServiceClient) DoOne(ctx context.Context, in *DoOneRequest, opts ...grpc.CallOption) (*DoOneResponse, error) {
	out := new(DoOneResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.mycomponent.v1.MyComponentService/DoOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myComponentServiceClient) DoOneClientStream(ctx context.Context, opts ...grpc.CallOption) (MyComponentService_DoOneClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyComponentService_ServiceDesc.Streams[0], "/proto.api.component.mycomponent.v1.MyComponentService/DoOneClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &myComponentServiceDoOneClientStreamClient{stream}
	return x, nil
}

type MyComponentService_DoOneClientStreamClient interface {
	Send(*DoOneClientStreamRequest) error
	CloseAndRecv() (*DoOneClientStreamResponse, error)
	grpc.ClientStream
}

type myComponentServiceDoOneClientStreamClient struct {
	grpc.ClientStream
}

func (x *myComponentServiceDoOneClientStreamClient) Send(m *DoOneClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myComponentServiceDoOneClientStreamClient) CloseAndRecv() (*DoOneClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DoOneClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myComponentServiceClient) DoOneServerStream(ctx context.Context, in *DoOneServerStreamRequest, opts ...grpc.CallOption) (MyComponentService_DoOneServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyComponentService_ServiceDesc.Streams[1], "/proto.api.component.mycomponent.v1.MyComponentService/DoOneServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &myComponentServiceDoOneServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyComponentService_DoOneServerStreamClient interface {
	Recv() (*DoOneServerStreamResponse, error)
	grpc.ClientStream
}

type myComponentServiceDoOneServerStreamClient struct {
	grpc.ClientStream
}

func (x *myComponentServiceDoOneServerStreamClient) Recv() (*DoOneServerStreamResponse, error) {
	m := new(DoOneServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myComponentServiceClient) DoOneBiDiStream(ctx context.Context, opts ...grpc.CallOption) (MyComponentService_DoOneBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyComponentService_ServiceDesc.Streams[2], "/proto.api.component.mycomponent.v1.MyComponentService/DoOneBiDiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &myComponentServiceDoOneBiDiStreamClient{stream}
	return x, nil
}

type MyComponentService_DoOneBiDiStreamClient interface {
	Send(*DoOneBiDiStreamRequest) error
	Recv() (*DoOneBiDiStreamResponse, error)
	grpc.ClientStream
}

type myComponentServiceDoOneBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *myComponentServiceDoOneBiDiStreamClient) Send(m *DoOneBiDiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myComponentServiceDoOneBiDiStreamClient) Recv() (*DoOneBiDiStreamResponse, error) {
	m := new(DoOneBiDiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myComponentServiceClient) DoTwo(ctx context.Context, in *DoTwoRequest, opts ...grpc.CallOption) (*DoTwoResponse, error) {
	out := new(DoTwoResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.mycomponent.v1.MyComponentService/DoTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyComponentServiceServer is the server API for MyComponentService service.
// All implementations must embed UnimplementedMyComponentServiceServer
// for forward compatibility
type MyComponentServiceServer interface {
	DoOne(context.Context, *DoOneRequest) (*DoOneResponse, error)
	DoOneClientStream(MyComponentService_DoOneClientStreamServer) error
	DoOneServerStream(*DoOneServerStreamRequest, MyComponentService_DoOneServerStreamServer) error
	DoOneBiDiStream(MyComponentService_DoOneBiDiStreamServer) error
	DoTwo(context.Context, *DoTwoRequest) (*DoTwoResponse, error)
	mustEmbedUnimplementedMyComponentServiceServer()
}

// UnimplementedMyComponentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyComponentServiceServer struct {
}

func (UnimplementedMyComponentServiceServer) DoOne(context.Context, *DoOneRequest) (*DoOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOne not implemented")
}
func (UnimplementedMyComponentServiceServer) DoOneClientStream(MyComponentService_DoOneClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneClientStream not implemented")
}
func (UnimplementedMyComponentServiceServer) DoOneServerStream(*DoOneServerStreamRequest, MyComponentService_DoOneServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneServerStream not implemented")
}
func (UnimplementedMyComponentServiceServer) DoOneBiDiStream(MyComponentService_DoOneBiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoOneBiDiStream not implemented")
}
func (UnimplementedMyComponentServiceServer) DoTwo(context.Context, *DoTwoRequest) (*DoTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoTwo not implemented")
}
func (UnimplementedMyComponentServiceServer) mustEmbedUnimplementedMyComponentServiceServer() {}

// UnsafeMyComponentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyComponentServiceServer will
// result in compilation errors.
type UnsafeMyComponentServiceServer interface {
	mustEmbedUnimplementedMyComponentServiceServer()
}

func RegisterMyComponentServiceServer(s grpc.ServiceRegistrar, srv MyComponentServiceServer) {
	s.RegisterService(&MyComponentService_ServiceDesc, srv)
}

func _MyComponentService_DoOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyComponentServiceServer).DoOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.mycomponent.v1.MyComponentService/DoOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyComponentServiceServer).DoOne(ctx, req.(*DoOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyComponentService_DoOneClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyComponentServiceServer).DoOneClientStream(&myComponentServiceDoOneClientStreamServer{stream})
}

type MyComponentService_DoOneClientStreamServer interface {
	SendAndClose(*DoOneClientStreamResponse) error
	Recv() (*DoOneClientStreamRequest, error)
	grpc.ServerStream
}

type myComponentServiceDoOneClientStreamServer struct {
	grpc.ServerStream
}

func (x *myComponentServiceDoOneClientStreamServer) SendAndClose(m *DoOneClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myComponentServiceDoOneClientStreamServer) Recv() (*DoOneClientStreamRequest, error) {
	m := new(DoOneClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyComponentService_DoOneServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DoOneServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyComponentServiceServer).DoOneServerStream(m, &myComponentServiceDoOneServerStreamServer{stream})
}

type MyComponentService_DoOneServerStreamServer interface {
	Send(*DoOneServerStreamResponse) error
	grpc.ServerStream
}

type myComponentServiceDoOneServerStreamServer struct {
	grpc.ServerStream
}

func (x *myComponentServiceDoOneServerStreamServer) Send(m *DoOneServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MyComponentService_DoOneBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyComponentServiceServer).DoOneBiDiStream(&myComponentServiceDoOneBiDiStreamServer{stream})
}

type MyComponentService_DoOneBiDiStreamServer interface {
	Send(*DoOneBiDiStreamResponse) error
	Recv() (*DoOneBiDiStreamRequest, error)
	grpc.ServerStream
}

type myComponentServiceDoOneBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *myComponentServiceDoOneBiDiStreamServer) Send(m *DoOneBiDiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myComponentServiceDoOneBiDiStreamServer) Recv() (*DoOneBiDiStreamRequest, error) {
	m := new(DoOneBiDiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyComponentService_DoTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyComponentServiceServer).DoTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.mycomponent.v1.MyComponentService/DoTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyComponentServiceServer).DoTwo(ctx, req.(*DoTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyComponentService_ServiceDesc is the grpc.ServiceDesc for MyComponentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyComponentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.mycomponent.v1.MyComponentService",
	HandlerType: (*MyComponentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoOne",
			Handler:    _MyComponentService_DoOne_Handler,
		},
		{
			MethodName: "DoTwo",
			Handler:    _MyComponentService_DoTwo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoOneClientStream",
			Handler:       _MyComponentService_DoOneClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoOneServerStream",
			Handler:       _MyComponentService_DoOneServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoOneBiDiStream",
			Handler:       _MyComponentService_DoOneBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api/component/mycomponent/v1/mycomponent.proto",
}
