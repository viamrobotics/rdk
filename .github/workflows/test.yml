name: Test

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      ARTIFACT_READ_ONLY_GCP_CREDENTIALS:
        required: true
      MONGODB_TEST_OUTPUT_URI:
        required: true

env:
  GOPRIVATE: "github.com/viamrobotics/*,go.viam.com/*"
  GOOGLE_APPLICATION_CREDENTIALS_FILENAME: "google-credentials.json"
  MONGODB_TEST_OUTPUT_URI: ${{ secrets.MONGODB_TEST_OUTPUT_URI }}

jobs:
  build_and_test:
    name: Build and Test
    strategy:
      matrix:
        include:
          - arch: [x64, qemu-host]
            image: ghcr.io/viamrobotics/canon:amd64-cache
            platform: linux/amd64
            build_lint: 'make build lint'
          - arch: [arm64, qemu-host]
            image: ghcr.io/viamrobotics/canon:arm64-cache
            platform: linux/arm64
            build_lint: 'make build-go lint-go'
    runs-on: ${{ matrix.arch }}
    container:
      image: ${{ matrix.image }}
      options: --platform ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
    - name: Check out main branch code
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check out PR branch code
      if: github.event_name == 'pull_request_target'
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0 # 0 so we can analyze history for coverage

    - name: Set main env vars
      if: github.event_name != 'pull_request_target'
      run: |
        echo "GITHUB_HEAD_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
        echo "GITHUB_HEAD_REF=${GITHUB_REF_NAME}" >> $GITHUB_ENV

    - name: Set PR env vars
      if: github.event_name == 'pull_request_target'
      run: |
        echo "GITHUB_HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        echo "GITHUB_HEAD_REF=${{ github.event.pull_request.head.label }}" >> $GITHUB_ENV
        echo "GITHUB_PR_BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
        echo "GITHUB_PR_BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV

    - name: Create GCP Credential File from secret
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=`pwd`/${GOOGLE_APPLICATION_CREDENTIALS_FILENAME}
        echo "${{ secrets.ARTIFACT_READ_ONLY_GCP_CREDENTIALS }}" >> ${GOOGLE_APPLICATION_CREDENTIALS}
        echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}" >> $GITHUB_ENV

    - name: Verify no uncommitted changes from "${{ matrix.build_lint }}"
      run: |
        git init
        git add .
        chown -R testbot .
        sudo -u testbot bash -lc '${{ matrix.build_lint }}'
        GEN_DIFF=$(git status -s)

        if [ -n "$GEN_DIFF" ]; then
            echo '"make build lint" resulted in changes not in git' 1>&2
            git status
            exit 1
        fi

    - name: Test
      if: matrix.platform == 'linux/amd64'
      run: |
        export ${{ github.event.pull_request.head.sha }}
        sudo --preserve-env=GOOGLE_APPLICATION_CREDENTIALS,MONGODB_TEST_OUTPUT_URI,GITHUB_SHA,GITHUB_RUN_ID,GITHUB_RUN_NUMBER,GITHUB_RUN_ATTEMPT,GITHUB_PR_BASE_SHA,GITHUB_PR_BASE_REF,GITHUB_HEAD_REF,GITHUB_HEAD_SHA -u testbot bash -lc 'make cover test-web'

    # Now that RDK is public, can't directly comment without token having full read/write access
    # pullrequestcomment.yml will trigger seperately and post the actual comments

    - name: Prepare code comment
      run: |
        echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> pr.env

    - name: Mark appimage label
      if: contains(github.event.pull_request.labels.*.name, 'appimage')
      run: |
        echo "APPIMAGE=true" >> pr.env

    - name: Upload code coverage
      uses: actions/upload-artifact@v3
      with:
        name: pr-code-coverage
        path: |
         pr.env
         code-coverage-results.md
        retention-days: 1

  test_pi:
    name: Test Raspberry Pi Code
    runs-on: pi4
    timeout-minutes: 5

    steps:
    - name: Clean Workspace
      run: |
        shopt -s dotglob
        sudo chown -R `whoami` ./
        rm -rf ./*

    - name: Check out main branch code
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check out PR branch code
      if: github.event_name == 'pull_request_target'
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 2

    - name: Create GCP Credential File from secret
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=`pwd`/${GOOGLE_APPLICATION_CREDENTIALS_FILENAME}
        echo "${{ secrets.ARTIFACT_READ_ONLY_GCP_CREDENTIALS }}" >> ${GOOGLE_APPLICATION_CREDENTIALS}
        echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}" >> $GITHUB_ENV

    - name: Test
      run: make test-pi

  test_passing:
    name: All Tests Passing
    needs: [test_pi, build_and_test]
    runs-on: [x64, qemu-host]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo Test Pi: ${{ needs.test_pi.result }}
          echo Main Tests: ${{ needs.build_and_test.result }}
          [ "${{ needs.test_pi.result }}" == "success" ] && \
          [ "${{ needs.build_and_test.result }}" == "success" ]

  test_e2e:
    name: End-to-End Tests Passing
    runs-on: [x64, qemu-host]
    container:
      image: ghcr.io/viamrobotics/canon:amd64-cache
      options: --platform linux/amd64
    steps:
      - name: Check out main branch code
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check out PR branch code
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Create GCP Credential File from secret
        run: |
          GOOGLE_APPLICATION_CREDENTIALS=`pwd`/${GOOGLE_APPLICATION_CREDENTIALS_FILENAME}
          echo "${{ secrets.ARTIFACT_READ_ONLY_GCP_CREDENTIALS }}" >> ${GOOGLE_APPLICATION_CREDENTIALS}
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb netcat lsof

      - name: Run e2e Tests
        run: |
          chown -R testbot .
          sudo --preserve-env=GOOGLE_APPLICATION_CREDENTIALS -u testbot bash -lc 'make build-web test-e2e'

  test_integration:
    name: Integration Tests Passing
    runs-on: [x64, qemu-host]
    container:
      image: ghcr.io/viamrobotics/canon:amd64-cache
      options: --platform linux/amd64
    timeout-minutes: 30
    steps:
    - name: Check out main branch code
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check out PR branch code
      if: github.event_name == 'pull_request_target'
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 2

    - name: Create GCP Credential File from secret
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=`pwd`/${GOOGLE_APPLICATION_CREDENTIALS_FILENAME}
        echo "${{ secrets.ARTIFACT_READ_ONLY_GCP_CREDENTIALS }}" >> ${GOOGLE_APPLICATION_CREDENTIALS}
        echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}" >> $GITHUB_ENV

    - name: Get orbslam binary for integration tests
      run: |
        sudo curl -o /usr/local/bin/orb_grpc_server http://packages.viam.com/apps/slam-servers/orb_grpc_server-latest-x86_64.AppImage
        sudo chmod a+rx /usr/local/bin/orb_grpc_server

    - name: Run integration tests
      run: |
        sudo --preserve-env=GOOGLE_APPLICATION_CREDENTIALS -u testbot bash -lc 'export APPIMAGE_EXTRACT_AND_RUN=1 && make test-integration'
