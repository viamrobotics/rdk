{"version":3,"sources":["webpack://rdk-web/./src/rc/control_helpers.js"],"names":["window","BaseControlHelper","moveStraight","name","distance_mm","speed_mm_s","cb","req","baseApi","MoveStraightRequest","setName","setMmPerSec","setDistanceMm","rcLogConditionally","baseService","spin","angle_deg","speed_deg_s","SpinRequest","setAngleDeg","setDegsPerSec","setPower","linearVector","angularVector","SetPowerRequest","setLinear","setAngular","setVelocity","SetVelocityRequest","computeKeyboardBaseControls","keysPressed","linear","angular","forward","backward","right","left","MotorControlHelper","powerPct","motorApi","setPowerPct","motorService","goFor","rpm","revolutions","GoForRequest","setRpm","setRevolutions","goTo","positionRevolutions","GoToRequest","setPositionRevolutions","stop","StopRequest","BoardControlHelper","getGPIO","pin","boardApi","GetGPIORequest","setPin","boardService","setGPIO","value","SetGPIORequest","setHigh","ServoControlHelper","servoApi","servoService"],"mappings":"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","file":"control_helpers.js","sourcesContent":["/*\n* This file contains gRPC helper functions for the Remote Control page.\n* These helpers will be deprecated by a future node SDK.\n* Feel free to add any missing gRPC method wrappers.\n*/\n\n// Base control helpers\nwindow.BaseControlHelper = {\n  moveStraight: function(name, distance_mm, speed_mm_s, cb) {\n    const req = new baseApi.MoveStraightRequest();\n    req.setName(name);\n    req.setMmPerSec(speed_mm_s);\n    req.setDistanceMm(distance_mm);\n\n    rcLogConditionally(req);\n    baseService.moveStraight(req, {}, cb);\n  },\n\n  spin: function(name, angle_deg, speed_deg_s, cb) {\n    const req = new baseApi.SpinRequest();\n    req.setName(name);\n    req.setAngleDeg(angle_deg);\n    req.setDegsPerSec(speed_deg_s);\n\n    rcLogConditionally(req);\n    baseService.spin(req, {}, cb);\n  },\n\n  setPower: function(name, linearVector, angularVector, cb) {\n      const req = new baseApi.SetPowerRequest();\n      req.setName(name);\n      req.setLinear(linearVector);\n      req.setAngular(angularVector);\n\n      rcLogConditionally(req);\n      baseService.setPower(req, {}, cb);\n  },\n\n  setVelocity: function(name, linearVector, angularVector, cb) {\n    const req = new baseApi.SetVelocityRequest();\n    req.setName(name);\n    req.setLinear(linearVector);\n    req.setAngular(angularVector);\n\n    rcLogConditionally(req);\n    baseService.setVelocity(req, {}, cb);\n  },\n};\n\n/*\n* Base keyboard control calculations.\n* Input: State of keys. e.g. {straight : true, backward : false, right : false, left: false}\n* Output: linearY and angularZ throttle\n*/\nwindow.computeKeyboardBaseControls = function(keysPressed) {\n    let linear = 0;\n    let angular = 0;\n\n    if (keysPressed.forward) {\n        linear = 1;\n    } else if (keysPressed.backward) {\n        linear = -1;\n    } \n    \n    if (keysPressed.right) {\n        angular = -1;\n    } else if (keysPressed.left) {\n        angular = 1;\n    } \n    \n    return {linear, angular};\n};\n\n// Simple motor control helpers\nwindow.MotorControlHelper = {\n  setPower: function(name, powerPct, cb) {\n    const req = new motorApi.SetPowerRequest();\n    req.setName(name);\n    req.setPowerPct(powerPct);\n\n    rcLogConditionally(req);\n    motorService.setPower(req, {}, cb);\n  },\n  \n  goFor: function(name, rpm, revolutions, cb) {\n    const req = new motorApi.GoForRequest();\n    req.setName(name);\n    req.setRpm(rpm);\n    req.setRevolutions(revolutions);\n\n    rcLogConditionally(req);\n    motorService.goFor(req, {}, cb);\n  },\n\n  goTo: function(name, rpm, positionRevolutions, cb) {\n    const req = new motorApi.GoToRequest();\n    req.setName(name);\n    req.setRpm(rpm);\n    req.setPositionRevolutions(positionRevolutions);\n\n    rcLogConditionally(req);\n    motorService.goTo(req, {}, cb);\n  },\n\n  stop: function(name, cb) {\n    const req = new motorApi.StopRequest();\n    req.setName(name);\n\n    rcLogConditionally(req);\n    motorService.stop(req, {}, cb);\n  },\n};\n\n// Simple motor control helpers\nwindow.BoardControlHelper = {\n  getGPIO: function (name, pin, cb) {\n    const req = new boardApi.GetGPIORequest();\n    req.setName(name);\n    req.setPin(pin);\n\n    rcLogConditionally(req);\n    boardService.getGPIO(req, {}, cb);\n  },\n\n  setGPIO: function (name, pin, value, cb) {\n    const req = new boardApi.SetGPIORequest();\n    req.setName(name);\n    req.setPin(pin);\n    req.setHigh(value);\n\n    rcLogConditionally(req);\n    boardService.setGPIO(req, {}, cb);\n  },\n\n  // TODO: Add PWM\n};\n\n// Servo control helpers\n// todo: add the rest\nwindow.ServoControlHelper = {\n  stop: function(name, cb) {\n    const req = new servoApi.StopRequest();\n    req.setName(name);\n\n    rcLogConditionally(req);\n    servoService.stop(req, {}, cb);\n  },\n};\n"],"sourceRoot":""}