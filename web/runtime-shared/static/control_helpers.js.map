{"version":3,"sources":["webpack://rdk-web/./src/rc/control_helpers.js"],"names":["window","BaseControlHelper","moveStraight","name","distance_mm","speed_mm_s","cb","req","baseApi","MoveStraightRequest","setName","setMmPerSec","setDistanceMm","rcLogConditionally","baseService","spin","angle_deg","speed_deg_s","SpinRequest","setAngleDeg","setDegsPerSec","setPower","linearVector","angularVector","SetPowerRequest","setLinear","setAngular","computeKeyboardBaseControls","keysPressed","linear","angular","forward","backward","right","left","MotorControlHelper","powerPct","motorApi","setPowerPct","motorService","goFor","rpm","revolutions","GoForRequest","setRpm","setRevolutions","goTo","positionRevolutions","GoToRequest","setPositionRevolutions","stop","StopRequest"],"mappings":"AAGAA,OAAOC,kBAAoB,CACzBC,aAAc,SAASC,EAAMC,EAAaC,EAAYC,GACpD,MAAMC,EAAM,IAAIC,QAAQC,oBACxBF,EAAIG,QAAQP,GACZI,EAAII,YAAYN,GAChBE,EAAIK,cAAcR,GAElBS,mBAAmBN,GACnBO,YAAYZ,aAAaK,EAAK,GAAID,IAGpCS,KAAM,SAASZ,EAAMa,EAAWC,EAAaX,GAC3C,MAAMC,EAAM,IAAIC,QAAQU,YACxBX,EAAIG,QAAQP,GACZI,EAAIY,YAAYH,GAChBT,EAAIa,cAAcH,GAElBJ,mBAAmBN,GACnBO,YAAYC,KAAKR,EAAK,GAAID,IAG5Be,SAAU,SAASlB,EAAMmB,EAAcC,EAAejB,GAClD,MAAMC,EAAM,IAAIC,QAAQgB,gBACxBjB,EAAIG,QAAQP,GACZI,EAAIkB,UAAUH,GACdf,EAAImB,WAAWH,GAEfV,mBAAmBN,GACnBO,YAAYO,SAASd,EAAK,GAAID,KASpCN,OAAO2B,4BAA8B,SAASC,GAC1C,IAAIC,EAAS,EACTC,EAAU,EAcd,OAZIF,EAAYG,QACZF,EAAS,EACFD,EAAYI,WACnBH,GAAU,GAGVD,EAAYK,MACZH,GAAW,EACJF,EAAYM,OACnBJ,EAAU,GAGP,CAACD,SAAQC,YAMpB9B,OAAOmC,mBAAqB,CAC1Bd,SAAU,SAASlB,EAAMiC,EAAU9B,GACjC,MAAMC,EAAM,IAAI8B,SAASb,gBACzBjB,EAAIG,QAAQP,GACZI,EAAI+B,YAAYF,GAEhBvB,mBAAmBN,GACnBgC,aAAalB,SAASd,EAAK,GAAID,IAGjCkC,MAAO,SAASrC,EAAMsC,EAAKC,EAAapC,GACtC,MAAMC,EAAM,IAAI8B,SAASM,aACzBpC,EAAIG,QAAQP,GACZI,EAAIqC,OAAOH,GACXlC,EAAIsC,eAAeH,GAEnB7B,mBAAmBN,GACnBgC,aAAaC,MAAMjC,EAAK,GAAID,IAG9BwC,KAAM,SAAS3C,EAAMsC,EAAKM,EAAqBzC,GAC7C,MAAMC,EAAM,IAAI8B,SAASW,YACzBzC,EAAIG,QAAQP,GACZI,EAAIqC,OAAOH,GACXlC,EAAI0C,uBAAuBF,GAE3BlC,mBAAmBN,GACnBgC,aAAaO,KAAKvC,EAAK,GAAID,IAG7B4C,KAAM,SAAS/C,EAAMG,GACnB,MAAMC,EAAM,IAAI8B,SAASc,YACzB5C,EAAIG,QAAQP,GAEZU,mBAAmBN,GACnBgC,aAAaW,KAAK3C,EAAK,GAAID","file":"control_helpers.js","sourcesContent":["/*\nSimple base control helpers. Should be replaced by a proper SDK once available.\n*/\nwindow.BaseControlHelper = {\n  moveStraight: function(name, distance_mm, speed_mm_s, cb) {\n    const req = new baseApi.MoveStraightRequest();\n    req.setName(name);\n    req.setMmPerSec(speed_mm_s);\n    req.setDistanceMm(distance_mm);\n\n    rcLogConditionally(req);\n    baseService.moveStraight(req, {}, cb);\n  },\n\n  spin: function(name, angle_deg, speed_deg_s, cb) {\n    const req = new baseApi.SpinRequest();\n    req.setName(name);\n    req.setAngleDeg(angle_deg);\n    req.setDegsPerSec(speed_deg_s);\n\n    rcLogConditionally(req);\n    baseService.spin(req, {}, cb);\n  },\n\n  setPower: function(name, linearVector, angularVector, cb) {\n      const req = new baseApi.SetPowerRequest();\n      req.setName(name);\n      req.setLinear(linearVector);\n      req.setAngular(angularVector);\n\n      rcLogConditionally(req);\n      baseService.setPower(req, {}, cb);\n  },\n\n};\n\n/*\n  Input: State of keys. e.g. {straight : true, backward : false, right : false, left: false}\n  Output: linearY and angularZ throttle\n*/\nwindow.computeKeyboardBaseControls = function(keysPressed) {\n    let linear = 0;\n    let angular = 0;\n\n    if (keysPressed.forward) {\n        linear = 1;\n    } else if (keysPressed.backward) {\n        linear = -1;\n    } \n    \n    if (keysPressed.right) {\n        angular = -1;\n    } else if (keysPressed.left) {\n        angular = 1;\n    } \n    \n    return {linear, angular};\n};\n\n/*\nSimple base control helpers. Should be replaced by a proper SDK once available.\n*/\nwindow.MotorControlHelper = {\n  setPower: function(name, powerPct, cb) {\n    const req = new motorApi.SetPowerRequest();\n    req.setName(name);\n    req.setPowerPct(powerPct);\n\n    rcLogConditionally(req);\n    motorService.setPower(req, {}, cb);\n  },\n  \n  goFor: function(name, rpm, revolutions, cb) {\n    const req = new motorApi.GoForRequest();\n    req.setName(name);\n    req.setRpm(rpm);\n    req.setRevolutions(revolutions);\n\n    rcLogConditionally(req);\n    motorService.goFor(req, {}, cb);\n  },\n\n  goTo: function(name, rpm, positionRevolutions, cb) {\n    const req = new motorApi.GoToRequest();\n    req.setName(name);\n    req.setRpm(rpm);\n    req.setPositionRevolutions(positionRevolutions);\n\n    rcLogConditionally(req);\n    motorService.goTo(req, {}, cb);\n  },\n\n  stop: function(name, cb) {\n    const req = new motorApi.StopRequest();\n    req.setName(name);\n\n    rcLogConditionally(req);\n    motorService.stop(req, {}, cb);\n  },\n};\n"],"sourceRoot":""}